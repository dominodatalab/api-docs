FORMAT: 1A
HOST: https://api.dominodatalab.com/

# Domino Data Lab APIs


Domino has two types of APIs: **API Endpoints** which let you publish your code as a low-latency web service without any API design experience and the **Domino API** which lets you allow you to interact with your project's files and runs.

## Group API Endpoints

[API Endpoints](http://support.dominodatalab.com/hc/en-us/articles/204173149-API-Endpoints-Model-Deployment) help you deploy and operationalize your models as APIs without any web development knowledge.

### Your awesome model [POST /v1/{username}/{project_name}/endpoint]

Your API Endpoint is a wrapper on top of a function in your Domino-hosted code. The arguments to the API are the arguments to your function; the response from the API includes the return value from your function in the `result` object.

Learn more about API Endpoint and Model Development

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name

+ Request (application/json)

    + Headers

            X-Domino-Api-Key: YOUR_DOMINO_API_KEY

    + Attributes
    
        + parameters: 20, 200 (array[string], required) - An array of objects which directly map to the parameters of the function powering your API endpoint. 
        
            For example, if your API endpoint is powered by the following function:
            
            ```python
                def random_number(start = 10, stop = 100):
                  return random.uniform(start, stop)
            ```
            
            You would pass two number objects in to `parameters`, for example:
            
            ```
                {"parameters": [20, 200] }
            ```
            
    + Body

            {"parameters": [20, 200] }

+ Response 200 (application/json)

    + Headers
    
            Domino-Deserialization-Time: 1
            Domino-User-Code-Time: 10
            Domino-Serialization-Time: 2

    + Attributes
    
        + release (object) - An object of key/value pairs describing the version of your API endpoint that responded to your request
            + commitId: `e1dfab96a6c6014767e9561059224a3153cb6de6` (string) - The commit your API endpoint is bound to
            + file: `predict.R` (string) - The file your API endpoint is bound to
            + function: `predictQuality` (string) - The function your API endpoint is bound to
            + version: `14` (number) - The version of your API that was used
        + requestId: `NMEOMGVJURWVPOQF` (string) - A unique request ID assigned to your API request
        + result (object) - The result of the function you bound to your API Endpoint. Will be either a JSON object/dictionary or array depending on what your function returns.
            + a_random_number: `103` (number)


## Group Project Runs and Files

These APIs allow you to interact with your project's files and runs


### List of Runs [GET /v1/projects/{username}/{project_name}/runs]

Get a list of runs

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name

+ Request

    + Headers

            X-Domino-Api-Key: YOUR_DOMINO_API_KEY
            
+ Response 200 (application/json)

    + Attributes
    
        + objectType: `list` (string) - The type of object the API returned
        + uri (string) - The URI that responded to your request
        + data (array) - Array of run statuses
            - (object) # TODO: DRY this up once Aglio supports MSON Data Structures
                + id: `57dafe43317467e7b0ef5276` (string) - The unique ID for the run
                + projectId: `54c17e92e4b0bc49e27d9398` (string) - The ID of the project
                + number: `5` (number) - The auto-increment number associated with the run
                + startingUserId: `57a28b28961401f240812caf` (string) - The ID of the user who started the run
                + queued: `1473969731915`  (number) - Milliseconds epoch time the run was added to the queue
                + started: `1473969754283` (number) - Milliseconds epoch time the run started executing
                + completed: `1473969762970` (number) - Milliseconds epoch time the run completed running
                + status: `Succeeded` (string) - The status of the run
                + commitId: `1c6e8aa47951e39f9a905f0077af9355c35b712b` (string) - The commit hash of the project used to create the run
                + executor: `us-west-2:i-007942020ce7baeb5` (string) - The unique ID of the executor (compute node) the run was executed on
                + outputCommitId: `73fe9481fe635bada713246c3c739beefa424e8c` (string) - The commit hash of the project post-run (look at files with this hash for the results)
                + title: `Run with great R^2 of 1!` (string) - Title of the run, if it was renamed
                + isArchived: `false` (boolean) - Boolean denoting if the run was archived (hidden from the web interface)
                + postProcessedTimestamp: `1473969767822` (number) -  Milliseconds epoch time the run finished processing (this happens after the run has completed and includes saving the results back to the main project repo)
                + diagnoisticStatistics (object) - Object containing information about the run's [Diagnostic Statistics aka dominostats.json](http://support.dominodatalab.com/hc/en-us/articles/204348169-Run-Diagnostic-Statistics)
                    + isError: `false` (boolean)
                    + data (array)
                        - (object)
                            + key: `R^2` (string): 
                            + value: `1.000`
                + isCompleted: `true` (boolean) - A boolean to denote if the run has completed or is still run. See `status` for success/failure status.
                + hardwareTierId: `gpu` (string) - The hardware tier the run exectued on (new in v1.42)


### Start Run [POST /v1/projects/{username}/{project_name}/runs]

Start a run of a given script or command

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name

+ Request (application/json)

    + Attributes
    
        + command (array, required) - Array of strings making up your command. For example:
        
            ```python
                    ["model.py", "dataset", "--sample", "2000"]
            ```
        
        + isDirect: `false` (boolean, required) - A direct command is interpretted as a shell command; Domino doesn't try to infer a program to match your file type
        + title: `This one should work!` (string) - An optional title for your run
        + tier: `gpu` (string) - Identifier of the hardware tier to use
        + commitId: `1c6e8aa47951e39f9a905f0077af9355c35b712b` (string) - Tevision at which to start the run
        + publishApiEndpoint: `false` (boolean) - If true, the results of a successful run will be deployed to the project's active API Endpoint, if one exists 

    + Headers

            X-Domino-Api-Key: YOUR_DOMINO_API_KEY

+ Response 200 (application/json)

    + Attributes
        + runId: `553af271e4b0364c0f717b24` (string) - The unique ID for the run that was just started
        + message: `Run for project <username>/<project_name> started. You can view progress here: https://app.dominodatalab.com/<username>/<project_name/runs/553af271e4b0364c0f717b24` (string) - A human-readable message with a full link to view the status of your run

### Run Status [GET /v1/projects/{username}/{project_name}/runs/{run_id}]

Get the status of a run

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name
    + run_id (string, required) - The unique ID for the run 

+ Request

    + Headers

            X-Domino-Api-Key: YOUR_DOMINO_API_KEY
        
+ Response 200 (application/json)

    + Attributes
    
        + id: `57dafe43317467e7b0ef5276` (string) - The unique ID for the run
        + projectId: `54c17e92e4b0bc49e27d9398` (string) - The ID of the project
        + number: `5` (number) - The auto-increment number associated with the run
        + startingUserId: `57a28b28961401f240812caf` (string) - The ID of the user who started the run
        + queued: `1473969731915`  (number) - Milliseconds epoch time the run was added to the queue
        + started: `1473969754283` (number) - Milliseconds epoch time the run started executing
        + completed: `1473969762970` (number) - Milliseconds epoch time the run completed running
        + status: `Succeeded` (string) - The status of the run
        + commitId: `1c6e8aa47951e39f9a905f0077af9355c35b712b` (string) - The commit hash of the project used to create the run
        + executor: `us-west-2:i-007942020ce7baeb5` (string) - The unique ID of the executor (compute node) the run was executed on
        + outputCommitId: `73fe9481fe635bada713246c3c739beefa424e8c` (string) - The commit hash of the project post-run (look at files with this hash for the results)
        + title: `Run with great R^2 of 1!` (string) - Title of the run, if it was renamed
        + isArchived: `false` (boolean) - Boolean denoting if the run was archived (hidden from the web interface)
        + postProcessedTimestamp: `1473969767822` (number) -  Milliseconds epoch time the run finished processing (this happens after the run has completed and includes saving the results back to the main project repo)
        + diagnoisticStatistics (object) - Object containing information about the run's [Diagnostic Statistics aka dominostats.json](http://support.dominodatalab.com/hc/en-us/articles/204348169-Run-Diagnostic-Statistics)
            + isError: `false` (boolean)
            + data (array)
                - (object)
                    + key: `R^2` (string): 
                    + value: `1.000`
        + isCompleted: `true` (boolean) - A boolean to denote if the run has completed or is still run. See `status` for success/failure status.
        + hardwareTierId: `gpu` (string) - The hardware tier the run exectued on (new in v1.42)

### List files [GET /v1/projects/{username}/{project_name}/files/{commit_id}/{path}]

Get a list of files in a commit

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name

+ Request 

    + Headers
    
            X-Domino-Api-Key: YOUR_DOMINO_API_KEY

+ Response 200 (application/json)

### Get a file [GET /v1/projects/{username}/{project_name}/blobs/{blob_id}]

Get the contents of a file from the project

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name
    + blob_id: `adfjlklasdfhjklah8323hfjkdf` (string, required) - The unique ID of the blob

+ Request

    + Headers
    
            X-Domino-Api-Key: YOUR_DOMINO_API_KEY

+ Response 200

### Upload a file [PUT /v1/projects/{username}/{project_name}/{path}]
 
Upload a file to your project

+ Parameters

    + username: `nick` (string, required) - The project owner's username
    + project_name: `winequality` (string, required) - The project name
    + path: `data/randomNumbers.rdata` (string, required) - Where you want the file to be saved. (You can include forward slashes to upload files into folders that exist)

+ Request

    + Headers
    
            X-Domino-Api-Key: YOUR_DOMINO_API_KEY
            
    + Body
    
            <CONTENTS_OF_YOUR_FILE>

+ Response 201 (application/json)

    + Headers
    
            Location: https://app.dominodatalab.com/v1/projects/marks/quick-start/blobs/5c28ab880e29953e41b91e351f786a833fbf18a5
            Transfer-Encoding: chunked

    + Attributes
        + path: `data/randomNumbers.rdata` (string, required) - Path within the project your file was saved to
        + lastModified: `1475878612000` (number, required) - Milliseconds epoch time the file was last modified
        + size: `32690` (number, required) - The size of the file you just uploaded, in bytes
        + key: `5c28ab880e29953e41b91e351f786a833fbf18a5` (string, required) - The blob ID for the file. Used by the 'Get a file' API
        + url: `https://app.dominodatalab.com/v1/projects/marks/quick-start/blobs/5c28ab880e29953e41b91e351f786a833fbf18a5` (string, required) - The full URL to the blob (this can be used to re-download the file)


## Group Search

These APIs allow you to search your projects, runs, files, and comments

### Search [GET /v1/search{?query,area}]

Execute a search

+ Parameters
    + query: `shiny` (string, required) - The phrase to search
    + area: `projects` (string, required) - The type of object to search. Valid values are `project`, `run`, `file`, and `comment`

+ Request 

    + Headers
    
            X-Domino-Api-Key: YOUR_DOMINO_API_KEY

+ Response 200 (application/json)