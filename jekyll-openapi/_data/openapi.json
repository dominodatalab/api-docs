{
  "security": [{ "BearerAuthentication": [] }, { "DominoApiKey": [] }],
  "tags": [],
  "paths": {
    "/accounts/{userId}/gitcredentials": {
      "post": {
        "operationId": "addGitCredential",
        "tags": ["Git Credentials"],
        "summary": "add git credential",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "userId",
            "description": "User id for adding git credential",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Git credential",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.server.account.api.GitCredentialDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getGitCredentials",
        "tags": ["Git Credentials"],
        "summary": "retrieves git credentials for the given user",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "userId",
            "description": "User id for retrieving git credentials",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/accounts/{userId}/gitcredentials/{credentialId}": {
      "delete": {
        "operationId": "deleteGitCredential",
        "tags": ["Git Credentials"],
        "summary": "delete git credential",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "userId",
            "description": "User id for deleting git credential",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "credentialId",
            "description": "Id of the git credential to delete",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.account.api.GitCredentialAccessorDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/accounts/gitproviders": {
      "get": {
        "operationId": "getProviderList",
        "tags": ["Git Credentials"],
        "summary": "retrieves git providers list",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.GitProvidersDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivityStream",
        "tags": ["Activity"],
        "summary": "Gets all activity stream",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Project id to get the activity",
            "required": true
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "pageSize",
            "description": "page size to get the activity",
            "required": false
          },
          {
            "schema": { "nullable": true, "format": "int64", "type": "number" },
            "in": "query",
            "name": "latestTimeStamp",
            "description": "latest time stamp of the activity",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project",
                  "job",
                  "model_api",
                  "schedule_job",
                  "files",
                  "workspace",
                  "comment",
                  "app"
                ]
              }
            },
            "in": "query",
            "name": "filterBy",
            "description": "Comma-separated activity sources",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.activity.api.ActivityStream"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/activity/metadata": {
      "get": {
        "operationId": "notFound",
        "tags": ["Activity"],
        "summary": "Metadata entries.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.activity.api.AllMetadata"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/executions": {
      "get": {
        "operationId": "getCurrentExecutions",
        "tags": ["Admin"],
        "summary": "Gets all non-completed executions (running on the Kubernetes Compute Grid, for now)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ExecutionOverview"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/nodes": {
      "get": {
        "operationId": "getNodes",
        "tags": ["Admin"],
        "summary": "Gets information about nodes in the compute cluster",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeOverview"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/infrastructure": {
      "get": {
        "operationId": "getInfrastructureInfo",
        "tags": ["Admin"],
        "summary": "Gets information about all the nodes' names, instance types, and node pools in the cluster",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeInfrastructureInfo"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/supportbundle/{executionId}": {
      "get": {
        "operationId": "getExecutionSupportBundle",
        "tags": ["Admin"],
        "summary": "Gets a zipfile containing useful information about an executionId, FIXME should this path be /executions/executionId/supportbundle",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/whitelabel/configurations": {
      "get": {
        "operationId": "getWhiteLabelConfigurations",
        "tags": ["WhiteLabel"],
        "summary": "Gets whitelabel configurations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.WhiteLabelConfigurations"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/admin/dashboardEntries": {
      "get": {
        "operationId": "getDashboardEntries",
        "tags": ["Admin"],
        "summary": "Gets all dashboard entries",
        "parameters": [
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip relative to the checkpoint project before starting to collect the\npage. If no checkpoint project is provided, will skip relative to the first project of the first user.\nCan be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "checkpointProjectId",
            "description": "The projectId to construct the page relative to.",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "searchString",
            "description": "Filters projects by owner name and project name substrings",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["ownerId", "name", "created"]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.admin.interface.ProjectSearchResultsDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/auth/principal": {
      "get": {
        "operationId": "getPrincipal",
        "tags": ["Authentication and Authorization"],
        "summary": "retrieves the current security principal",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.lib.auth.PrincipalWithFeatureFlags"
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/auth/authorizations/{operation}": {
      "get": {
        "operationId": "isAuthorized",
        "tags": ["Authentication and Authorization"],
        "summary": "andrewziegler TODO document route",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "operation",
            "required": true
          }
        ],
        "responses": { "200": { "description": "success" } }
      }
    },
    "/gruz/import": {
      "post": {
        "operationId": "importRuns",
        "tags": ["Gruz"],
        "summary": "Import Run records (for migration purposes)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "ImportRunRequest wrapping an array of Raw Run objects",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.gruz.web.RunImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success (content is the number of created runs)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DominoId" }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs": {
      "get": {
        "operationId": "getJobs",
        "tags": ["Jobs"],
        "summary": "Gets all Jobs for the given Project",
        "parameters": [
          {
            "schema": { "default": "None", "nullable": true, "type": "string" },
            "in": "query",
            "name": "dominoStatsSortFieldName",
            "description": "If orderBy is set to \"dominoStatsField\", then which field of Domino Stats to sort by. Otherwise, this field is ignored",
            "required": false
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "Id of the Project"
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": { "type": "number" },
            "description": "Number of projects to fetch"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": { "type": "string" },
            "description": "Order to sort by"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": { "type": "string" },
            "description": "Field on which sort has to be applied"
          },
          {
            "in": "query",
            "name": "page_no",
            "schema": { "type": "number" },
            "description": "Page number to fetch"
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string" },
            "description": "Status of job to fetch"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": { "type": "string" },
            "description": "Optional Tag filter"
          },
          {
            "in": "query",
            "name": "query",
            "schema": { "type": "string" },
            "description": "Optional search query"
          },
          {
            "in": "query",
            "name": "show_archived",
            "schema": { "type": "boolean" },
            "required": false,
            "description": "If show_archived is true, then jobs that are archived also will be shown."
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/timeline/project/{projectId}": {
      "get": {
        "operationId": "getJobsTimeline",
        "tags": ["Jobs"],
        "summary": "Gets Jobs timeline for a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          },
          {
            "in": "query",
            "name": "tag",
            "schema": { "type": "string" },
            "required": false,
            "description": "Optional Tag filter"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "operationId": "getJob",
        "tags": ["Jobs"],
        "summary": "Gets a job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/tags": {
      "get": {
        "operationId": "getTagsForJob",
        "tags": ["Tags"],
        "summary": "Get the Tags applied to the given Job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.TagApplication"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/projects/{projectId}/tags": {
      "get": {
        "operationId": "getTagsInProject",
        "tags": ["Tags"],
        "summary": "Get the Job Tags used in this Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/comments": {
      "get": {
        "operationId": "getComments",
        "tags": ["JobComments"],
        "summary": "Get all comments specific to job context",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/allComments": {
      "get": {
        "operationId": "getAllComments",
        "tags": ["JobComments"],
        "summary": "Get all aggregated comments",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/resultFile/comments": {
      "get": {
        "operationId": "getResultFileComments",
        "tags": ["JobComments"],
        "summary": "Get all comments specific to result files generated by running the job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": { "type": "string" },
            "required": true,
            "description": "Name of the result file"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": { "type": "string" },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/comment": {
      "post": {
        "operationId": "createJobComment",
        "tags": ["JobComments"],
        "summary": "Create a Job Comment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on the job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/file/comment": {
      "post": {
        "operationId": "createJobResultFileComment",
        "tags": ["JobComments"],
        "summary": "Create a Job Result File Comment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": { "type": "string" },
            "required": true,
            "description": "Name of the result file to comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": { "type": "string" },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on a result file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/comment/{threadId}": {
      "delete": {
        "operationId": "archiveComment",
        "tags": ["JobComments"],
        "summary": "Archive the comment in a comment thread",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "threadId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information about the index of the comment to be archived",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/tag": {
      "post": {
        "operationId": "addTagToJob",
        "tags": ["Tags"],
        "summary": "Creates a Tag for a jobId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for creating tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.CreateTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "removeTagFromJob",
        "tags": ["Tags"],
        "summary": "Deletes a tag for a jobId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for delete tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.RemoveTagFromJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Tag"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/name": {
      "post": {
        "operationId": "updateJob",
        "tags": ["Jobs"],
        "summary": "Update name for job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.UpdateJobName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/results": {
      "get": {
        "operationId": "getResults",
        "tags": ["JobResults"],
        "summary": "Get Results for a Job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string" },
            "description": "ProjectId associated with the job"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobResultFiles"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/{contentId}/contents": {
      "get": {
        "operationId": "getResultContents",
        "tags": ["JobResults"],
        "summary": "Gets the contents of the result file",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "contentId",
            "required": true
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "Id of the Project"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.ResultFileContent"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/logsWithProblemSuggestions": {
      "get": {
        "operationId": "getLogsWithProblemSuggestions",
        "tags": ["LogsWithProblemSuggestion"],
        "summary": "Get the suggestion when problem occurs in a job along with the logs",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the job's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the job's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the job's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the job.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number", "default": 10000 },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "number", "default": 0 },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the problem  detector detects no problem, then the client should expect\n  * a `LogsWithProblemSuggestion` object with only logs\n\nIf the problem  detector detects the problem, then the client should expect\n  * a `LogsWithProblemSuggestion` object with logs with problem suggestions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.LogsWithProblemSuggestion"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/jobs/{jobId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": ["Jobs"],
        "summary": "Get resource usage for a Job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.jobs.interface.JobResourceUsage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/start": {
      "post": {
        "operationId": "startJob",
        "tags": ["Jobs"],
        "summary": "Starts a new Job",
        "requestBody": {
          "description": "JSON object with information for starting the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.StartJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": { "$ref": "#/components/responses/Relogin" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/archive": {
      "post": {
        "operationId": "archiveJob",
        "tags": ["Jobs"],
        "summary": "Archive a Job",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "JSON object with information for archiving the Job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.JobOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/stop": {
      "post": {
        "operationId": "stopJob",
        "tags": ["Jobs"],
        "summary": "Stop a Job",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for stopping the Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.JobStopOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/restart": {
      "post": {
        "operationId": "restartJob",
        "tags": ["Jobs"],
        "summary": "Restart a Job",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for restarting the Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.JobRestartOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.Job"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": { "$ref": "#/components/responses/Relogin" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/getStatus/values": {
      "get": {
        "operationId": "getStatus",
        "tags": ["Jobs"],
        "summary": "Get possible status for a Job",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/events": {
      "get": {
        "operationId": "notFound",
        "tags": ["Jobs", "Socket"],
        "summary": "Entities that are pushed via socket updates.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.web.JobEvents"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/resourceStatuses": {
      "get": {
        "operationId": "getResourcesStatus",
        "tags": ["Jobs"],
        "summary": "Gets the resource statuses for the running Job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobResourcesStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/runtimeExecutionDetails": {
      "get": {
        "operationId": "getRuntimeExecutionDetails",
        "tags": ["Jobs"],
        "summary": "Get the runtime execution details for a given job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobRuntimeExecutionDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/linkJobToGoal": {
      "post": {
        "operationId": "linkJobToGoal",
        "tags": ["Job"],
        "summary": "Link job to a goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.LinkJobtoGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/unlinkJobGoal": {
      "post": {
        "operationId": "unlinkJobFromGoal",
        "tags": ["Job"],
        "summary": "Unlink job from a goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.jobs.web.UnlinkJobfromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.jobs.interface.JobGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/job/{jobId}/sparkClusterDetails": {
      "get": {
        "operationId": "getSparkClusterDetails",
        "tags": ["Job"],
        "summary": "Gets spark cluster properties for a given job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterDetailsView"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/{clusterType}/hostAndPort": {
      "get": {
        "operationId": "getComputeClusterHostAndPort",
        "tags": ["Jobs"],
        "summary": "Gets host and port for spark web ui reverse proxy",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "name of the cluster to connect to"
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": { "description": "success" }
        }
      }
    },
    "/jobs/job/{jobId}/onDemandSparkStatus": {
      "get": {
        "operationId": "getOnDemandSparkClusterStatus",
        "tags": ["Job"],
        "summary": "Get on demand spark cluster status.",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterStatus"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/project/{projectId}/defaultSparkSettings": {
      "get": {
        "operationId": "getDefaultOnDemandSparkSettings",
        "tags": ["Job"],
        "summary": "gets the default spark settings for jobs",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.DefaultOnDemandSparkClusterPropertiesSpec"
                }
              }
            }
          },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/project/{projectId}/codeInfo/{jobId}": {
      "get": {
        "operationId": "getCodeInfo",
        "tags": ["Job"],
        "summary": "get CodeInfo for a specific job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoDto"
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/job/{jobId}/artifactsInfo": {
      "get": {
        "operationId": "getArtifactsInfo",
        "tags": ["Job"],
        "summary": "get ArtifactsInfoDto for a specific job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsInfoDto"
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/computeClusterStatus": {
      "get": {
        "operationId": "getComputeClusterStatus",
        "tags": ["Job"],
        "summary": "Get the status of the compute cluster for a job",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "type": "domino.common.DominoId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{jobId}/computeClusterDetails": {
      "get": {
        "operationId": "getComputeClusterDetails",
        "tags": ["Job"],
        "summary": "Get the details of the compute cluster for a job",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "jobId",
            "description": "ID of the job",
            "type": "domino.common.DominoId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/jobs/{projectId}/{clusterType}/defaultComputeClusterSettings": {
      "get": {
        "operationId": "getDefaultComputeClusterSettings",
        "tags": ["Job"],
        "summary": "Get the default compute settings for jobs",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "type": "domino.common.DominoId",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "Type of the cluster to get settings for"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.DefaultComputeClusterSettings"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/hardwareTier/{hardwareTierId}": {
      "get": {
        "operationId": "getHardwareTier",
        "tags": ["Hardware Tier"],
        "summary": "Get a hardware tier",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "hardwareTierId",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "domino.common.DominoId"
            },
            "in": "query",
            "name": "projectId",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/hardwareTier": {
      "post": {
        "operationId": "createHardwareTier",
        "tags": ["Hardware Tier"],
        "summary": "Create a hardware tier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.hardwaretier.api.NewHardwareTierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/hardwareTier/archive": {
      "post": {
        "operationId": "archiveHardwareTier",
        "tags": ["Hardware Tier"],
        "summary": "Archive a hardware tier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "description": "not found" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace": {
      "post": {
        "operationId": "createAndStartWorkspace",
        "tags": ["Workspace"],
        "summary": "Create workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.CreateWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "provisionedWorkspaces",
        "tags": ["Workspace"],
        "summary": "Get all provisioned (i.e. not deleted) workspaces for project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/reproduceWorkspace": {
      "post": {
        "operationId": "reproduceAndStartWorkspace",
        "tags": ["Workspace"],
        "summary": "Reproduce workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reproduce workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.ReproduceWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/updateTitle": {
      "post": {
        "operationId": "updateWorkspaceTitle",
        "tags": ["Workspace"],
        "summary": "Update workspace title",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update workspace title request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.UpdateWorkspaceTitleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}": {
      "post": {
        "operationId": "updateWorkspaceConfigTemplate",
        "tags": ["Workspace"],
        "summary": "Update workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update workspace request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.UpdateWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getWorkspace",
        "tags": ["Workspace"],
        "summary": "Get workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteWorkspace",
        "tags": ["Workspace"],
        "summary": "Delete workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/deleted": {
      "get": {
        "operationId": "deletedWorkspaces",
        "tags": ["Workspace"],
        "summary": "Get deleted workspaces for project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/owner/{ownerId}": {
      "get": {
        "operationId": "ownerProvisionedWorkspaces",
        "tags": ["Workspace"],
        "summary": "Get all provisioned (i.e. not deleted) workspaces for project by owner",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "ownerId",
            "description": "owner id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/sessions": {
      "post": {
        "operationId": "startWorkspaceSession",
        "tags": ["Workspace"],
        "summary": "Start workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "externalVolumeMounts",
            "description": "external volume mount id's",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "listWorkspaceSessions",
        "tags": ["Workspace"],
        "summary": "List workspace sessions",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          },
          {
            "schema": { "default": 0, "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": false
          },
          {
            "schema": { "default": 5, "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "limit",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/stop": {
      "post": {
        "operationId": "stopWorkspaceSession",
        "tags": ["Workspace"],
        "summary": "Stop workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/sessions/{workspaceSessionId}": {
      "get": {
        "operationId": "getWorkspaceSession",
        "tags": ["Workspace"],
        "summary": "Get workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "workspace session id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/owner/{ownerId}/quota": {
      "get": {
        "operationId": "quotaStatus",
        "tags": ["Workspace"],
        "summary": "Get status of workspace quota",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "ownerId",
            "description": "owner id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceQuotaStatusDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/adminDashboardSummary": {
      "get": {
        "operationId": "getWorkspaceAdminSummary",
        "tags": ["Workspace"],
        "summary": "Get workspace admin dashboard summary data",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageSummaryDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/adminDashboardRowData": {
      "get": {
        "operationId": "getAdminDashboardRowData",
        "tags": ["Workspace"],
        "summary": "Get all workspace admin dashboard entries",
        "parameters": [
          {
            "schema": {
              "default": 0,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "The number of items to skip relative to the checkpoint project before starting to collect the\npage. If no checkpoint project is provided, will skip relative to the first project of the first user.\nCan be negative.\n",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The size of the page to return.",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "searchString",
            "description": "Filters projects by owner name and project name substrings",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSortableColumns.Value",
              "enum": ["volumeSize", "lastStartTime", "createdTime"]
            },
            "in": "query",
            "name": "sortBy",
            "description": "A column name to sort over.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageDataDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/events": {
      "get": {
        "operationId": "notFound",
        "tags": ["Workspace", "Socket"],
        "summary": "A hack, which allows types for pusher service to be generated for consumption by the frontend. Should be deleted when we fix how we use swagger.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.web.WorkspaceEvents"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{projectId}/getProvisionedWorkspaceCount": {
      "get": {
        "operationId": "getProvisionedWorkspaceCount",
        "tags": ["Workspace"],
        "summary": "Get the number of provisioned workspaces for project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "number" } }
            }
          },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/getGlobalSettings": {
      "get": {
        "operationId": "getGlobalSettings",
        "tags": ["Workspace"],
        "summary": "Get the global workspace settings",
        "parameters": null,
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceGlobalSettingsDto"
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{executionId}/getSessionByExecutionId": {
      "get": {
        "operationId": "getWorkspaceExecutionInfo",
        "tags": ["Workspace"],
        "summary": "Get workspace execution info",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "ownerName",
            "description": "name of owner of this workspace",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "name of project for this workspace is in",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceExecutionInfoDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/workspace/{workspaceId}/getWritableProjectMounts": {
      "get": {
        "operationId": "getWritableProjectMounts",
        "tags": ["Workspace"],
        "summary": "For the frontend to get info on workspace's writable mounts (e.g. imported git repos)",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "workspace id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.WritableProjectMounts"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{projectId}/{workspaceSessionId}/logs": {
      "get": {
        "operationId": "getLogs",
        "tags": ["Workspace", "Logs"],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 10000,
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided.",
            "required": false
          },
          {
            "schema": { "default": 0, "format": "int32", "type": "number" },
            "in": "query",
            "name": "offset",
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy.",
            "required": false
          },
          {
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string",
              "example": "1543538813745986325"
            },
            "in": "query",
            "name": "latestTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{projectId}/{workspaceSessionId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeLogs",
        "tags": ["Workspace", "Logs"],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          },
          {
            "schema": {
              "default": 10000,
              "nullable": true,
              "format": "int32",
              "type": "number"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided.",
            "required": false
          },
          {
            "schema": { "default": 0, "format": "int32", "type": "number" },
            "in": "query",
            "name": "offset",
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy.",
            "required": false
          },
          {
            "schema": {
              "default": "0",
              "nullable": true,
              "type": "string",
              "example": "1543538813745986325"
            },
            "in": "query",
            "name": "latestTimeNano",
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceSessionId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": ["Workspace"],
        "summary": "Get resource usage for a workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "projectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ResourceUsage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceSessionId}/resourceStatuses": {
      "get": {
        "operationId": "getWorkspaceRepositoryStatus",
        "tags": ["Workspace"],
        "summary": "Get the status of a workspace's repositories",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspace.api.WorkspaceRepositoryState"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceSessionId}/executionCheckpointStatuses": {
      "get": {
        "operationId": "getExecutionCheckpointStatuses",
        "tags": ["Workspace"],
        "summary": "Get each checkpoint name and their individual status for an execution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.computegrid.ExecutionCheckpoint"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterStatus": {
      "get": {
        "operationId": "getComputeClusterStatus",
        "tags": ["Workspace"],
        "summary": "Get the status of the compute cluster for a workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computegrid.ComputeClusterStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceSessionId}/computeClusterDetails": {
      "get": {
        "operationId": "getComputeClusterDetails",
        "tags": ["Workspace"],
        "summary": "Get the details about the compute cluster for a workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceSessionId",
            "description": "ID of the workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{executionId}/{clusterType}/hostAndPort": {
      "get": {
        "operationId": "getComputeClusterHostAndPort",
        "tags": ["Workspace"],
        "summary": "Get the host and port for a compute cluster's webUi",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "name of the cluster to connect to"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{projectId}/{clusterType}/defaultComputeClusterSettings": {
      "get": {
        "operationId": "getDefaultComputeClusterSettings",
        "tags": ["Workspace"],
        "summary": "Get the default compute settings for workspaces",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "type": "domino.common.DominoId",
            "required": true
          },
          {
            "in": "path",
            "name": "clusterType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterType.Value"
            },
            "description": "Type of the cluster to get settings for"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.computecluster.api.DefaultComputeClusterSettings"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/runningClassicWorkspaces": {
      "get": {
        "operationId": "getRunningClassicWorkspaces",
        "tags": ["Workspace"],
        "summary": "Get running classic workspaces for project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/ownerRunningClassicWorkspaces": {
      "get": {
        "operationId": "getRunningClassicWorkspacesForOwner",
        "tags": ["Workspace"],
        "summary": "Get running classic workspaces owned by a user in a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "ownerId",
            "description": "workspace owner id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "offset",
            "description": "offset",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "limit",
            "description": "max length returned",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspacePageDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/stop/discard": {
      "post": {
        "operationId": "stopClassicWorkspaceDiscardChanges",
        "tags": ["Workspace"],
        "summary": "Stop a Classic Workspace and throw away all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.StopClassicWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/stop/save": {
      "post": {
        "operationId": "stopClassicWorkspaceSaveChanges",
        "tags": ["Workspace"],
        "summary": "Stop a Classic Workspace and save all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.web.StopClassicWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/project/{projectId}/commtiId/{commitId}/getCheckpoint": {
      "get": {
        "operationId": "fetchCheckpointForCommitId",
        "tags": ["Workspace"],
        "summary": "Get checkpoint for commitId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "commitId",
            "description": "commitId for the project commit",
            "required": true
          },
          {
            "schema": { "type": "boolean" },
            "in": "query",
            "name": "isDfsCommit",
            "description": "whether to look up a dfs or git commit",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{executionId}/provenanceCheckpoints": {
      "get": {
        "operationId": "getProvenanceCheckpointsForExecution",
        "tags": ["Workspace"],
        "summary": "Get the project snapshots for a workspace session",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "ID of the execution corresponding to a workspace session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionProvenanceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/cancelMergeResolution": {
      "post": {
        "operationId": "cancelMergeConflictResolution",
        "tags": ["Workspace", "Git"],
        "summary": "Cancel an existing merge conflict",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CancelMergeConflictResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/forcePushResolution": {
      "post": {
        "operationId": "forcePushResolution",
        "tags": ["Workspace", "Git"],
        "summary": "Force push branch to resolve merge conflict",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.ForcePushResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/hardResetResolution": {
      "post": {
        "operationId": "hardResetResolution",
        "tags": ["Workspace", "Git"],
        "summary": "Hard reset to remote tracking branch to resolve merge conflict",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that are in conflict",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.HardResetResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/continueMergeResolution": {
      "post": {
        "operationId": "continueMergeConflictResolution",
        "tags": ["Workspace", "Git"],
        "summary": "Continue merge conflict resolution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Repository to continue rebase for along with a commit message",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.ContinueMergeConflictResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.ContinueMergeConflictResolutionResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnCurrentLocalState": {
      "post": {
        "operationId": "stageFileBasedOnCurrentLocalState",
        "tags": ["Workspace", "Git"],
        "summary": "Git add (stage) a file using the current local version during merge conflict resolution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageCurrentLocalFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnLocalCommit": {
      "post": {
        "operationId": "stageFileBasedOnLocalCommit",
        "tags": ["Workspace", "Git"],
        "summary": "Git add (stage) a file using the last local commit during merge conflict resolution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageLocalCommitFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/stageFileBasedOnRemoteCommit": {
      "post": {
        "operationId": "stageFileBasedOnRemoteCommit",
        "tags": ["Workspace", "Git"],
        "summary": "Git add (stage) a file using the last remote commit during merge conflict resolution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "repo and file path of file to stage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.StageRemoteCommitFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.StageFileResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/commitAndPushReposEnhanced": {
      "post": {
        "operationId": "commitAndPushReposEnhanced",
        "tags": ["Workspace", "Git"],
        "summary": "Commit and Push for enhanced merge conflicts",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be committed and pushed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CommitAndPushRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.CommitAndPushReposResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/commitRepos": {
      "post": {
        "operationId": "commitRepos",
        "tags": ["Workspace", "Git"],
        "summary": "Commit repos",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be committed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.CommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.CommitReposResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspace/{workspaceId}/pullReposEnhanced": {
      "post": {
        "operationId": "pullReposEnhanced",
        "tags": ["Workspace", "Git"],
        "summary": "Pull repos with enhanced merge conflict resolution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "Id of the Workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "list of repositories that should be pulled",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspace.api.git.PullReposRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspace.api.git.PullReposResponseDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces": {
      "get": {
        "operationId": "listWorkspaceSummary",
        "tags": ["Workspaces"],
        "summary": "Gets the available workspaces for the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "userToFilter",
            "description": "Filter so only workspaces started by the given user are returned",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/domino.workspaces.api.ListWorkspaceStatus"
            },
            "description": "Filter on workspace state defaults all if not provided."
          },
          {
            "in": "query",
            "name": "tag",
            "schema": { "type": "string" },
            "description": "Optional Tag filter"
          },
          {
            "in": "query",
            "name": "show_archived",
            "schema": { "type": "boolean" },
            "required": false,
            "description": "If show_archived is true, then will fetch workspaces that are archived also."
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}": {
      "get": {
        "operationId": "getWorkspaceById",
        "tags": ["Workspaces"],
        "summary": "Gets the workspace for the given workspace id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Fetch workspace based on id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Workspace"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/summary": {
      "get": {
        "operationId": "getWorkspaceSummaryById",
        "tags": ["Workspaces"],
        "summary": "Gets the workspace summary for the given workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Fetch workspace based on id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceSummary"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/definitions": {
      "get": {
        "operationId": "getAvailableWorkspaceDefinitions",
        "tags": ["Workspaces"],
        "summary": "Gets the available workspace definitions for the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceDefinitionDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/launch": {
      "post": {
        "operationId": "launchWorkspace",
        "tags": ["Workspaces"],
        "summary": "Launch a new Workspace in the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.LaunchWorkspaceInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": { "$ref": "#/components/responses/Relogin" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/stop/end": {
      "post": {
        "operationId": "endWorkspaceSession",
        "tags": ["Workspaces"],
        "summary": "Stop a Workspace for the given Project, when the status of DFS, git repos, datasets, are unknown",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopEndWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/stop/discard": {
      "post": {
        "operationId": "stopWorkspaceDiscardChanges",
        "tags": ["Workspaces"],
        "summary": "Stop a Workspace and throw away all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopDiscardWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/stop/commit": {
      "post": {
        "operationId": "stopWorkspaceSaveChanges",
        "tags": ["Workspaces"],
        "summary": "Stop a Workspace and save all changes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.StopCommitWorkspaceDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/archive": {
      "post": {
        "operationId": "archiveWorkspace",
        "tags": ["Workspaces"],
        "summary": "Archive a Workspace for the given Project. Archived workspaces won't show up in workspaces.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.ArchiveWorkspaceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/logs": {
      "get": {
        "operationId": "getLogs",
        "tags": ["Logs"],
        "summary": "Get the logs of a workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the workspace's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the workspace.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number", "default": 10000 },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "number", "default": 0 },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeLogs",
        "tags": ["Logs"],
        "summary": "Get the logs of a workspace without going to s3",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the workspace's runtime environment.\n * `stdout` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the workspace's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the workspace.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number", "default": 10000 },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "number", "default": 0 },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/tags": {
      "post": {
        "operationId": "createTag",
        "tags": ["Tags"],
        "summary": "Creates a Tag for a workspaceId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tagName"],
                "properties": {
                  "tagName": { "type": "string", "example": "test" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getTags",
        "tags": ["Tags"],
        "summary": "Get the tags that a workspace belongs to",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteTag",
        "tags": ["Tags"],
        "summary": "Deletes a Tag for a workspaceId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "tagId",
            "description": "Tag Name to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/usage": {
      "get": {
        "operationId": "getResourceUsage",
        "tags": ["Workspaces"],
        "summary": "Get resource usage for a Workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/results": {
      "get": {
        "operationId": "getResults",
        "tags": ["WorkspaceResults"],
        "summary": "Get Results for a Workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId associated with the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResultFiles"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/comments": {
      "get": {
        "operationId": "getComments",
        "tags": ["WorkspaceComments"],
        "summary": "Get all comments specific to workspace context",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/allComments": {
      "get": {
        "operationId": "getAllComments",
        "tags": ["WorkspaceComments"],
        "summary": "Get all aggregated comments",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/resultFile/comments": {
      "get": {
        "operationId": "getResultFileComments",
        "tags": ["WorkspaceComments"],
        "summary": "Get all comments specific to result files generated by running the workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": { "type": "string" },
            "required": true,
            "description": "Name of the result file"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": { "type": "string" },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/comment": {
      "post": {
        "operationId": "createWorkspaceComment",
        "tags": ["WorkspaceComments"],
        "summary": "Create a Workspace Comment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on the workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.CreateCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/file/comment": {
      "post": {
        "operationId": "createWorkspaceResultFileComment",
        "tags": ["WorkspaceComments"],
        "summary": "Create a Workspace Result File Comment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "in": "query",
            "name": "fileName",
            "schema": { "type": "string" },
            "required": true,
            "description": "Name of the result file to comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": { "type": "string" },
            "required": true,
            "description": "git commit identifier to pick the result file"
          }
        ],
        "requestBody": {
          "description": "JSON object with information to comment on a result file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.CreateCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/comment/{threadId}": {
      "delete": {
        "operationId": "archiveComment",
        "tags": ["WorkspaceComments"],
        "summary": "Archive the comment in a comment thread",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "threadId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information about the index of the comment to be archived",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.ArchiveCommentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/updateTitle": {
      "post": {
        "operationId": "updateWorkspaceTitle",
        "tags": ["Workspaces"],
        "summary": "Update title of the workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.UpdateWorkspaceTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/events": {
      "get": {
        "operationId": "notFound",
        "tags": ["Workspaces", "Socket"],
        "summary": "Entities that are pushed via socket updates.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceEvents"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/resourceStatuses": {
      "get": {
        "operationId": "getWorkspaceRepositoryStatus",
        "tags": ["Workspaces"],
        "summary": "Get workspace Resources status",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRepositoryStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/relaunch": {
      "post": {
        "operationId": "relaunchWorkspace",
        "tags": ["Workspaces"],
        "summary": "Relaunch a Workspace for the given Project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceRelaunchOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.Workspace"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": { "$ref": "#/components/responses/Relogin" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/runtimeExecutionDetails": {
      "get": {
        "operationId": "getRuntimeExecutionDetails",
        "tags": ["Workspaces"],
        "summary": "Get the runtime execution details for a given workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ProjectId for the workspace",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRuntimeExecutionDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/linkWorkspacetoGoal": {
      "post": {
        "operationId": "linkWorkspaceToGoal",
        "tags": ["Workspaces"],
        "summary": "Link workspace to a goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking workspace to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.LinkWorkspaceToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/unlinkWorkspacefromGoal": {
      "post": {
        "operationId": "unlinkWorkspaceFromGoal",
        "tags": ["Workspaces"],
        "summary": "Unlink workspace from a goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking workspace from a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.UnlinkWorkspaceFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/autoSyncFrequency": {
      "post": {
        "operationId": "setAutoSyncFrequency",
        "tags": ["Workspaces"],
        "summary": "Update workspace auto sync settings",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with auto sync related info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.workspaces.web.AutoSyncFrequencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/executionCheckpointStatuses": {
      "get": {
        "operationId": "getExecutionCheckpointStatuses",
        "tags": ["Workspaces"],
        "summary": "Get each checkpoint name and their individual status for an execution",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.workspaces.api.ExecutionCheckpointStatus"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/project/{projectId}/environment/{environmentId}/availableTools": {
      "get": {
        "operationId": "getAvailableToolsForEnvironment",
        "tags": ["Workspaces"],
        "summary": "Get the list of available Workspace tools for the given Environment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.workspaces.api.AvailableWorkspaceTools"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/onDemandSparkStatus": {
      "get": {
        "operationId": "getOnDemandSparkClusterStatus",
        "tags": ["Workspaces"],
        "summary": "Get on demand spark cluster for on demand spark cluster.",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/workspace/{workspaceId}/sparkClusterDetails": {
      "get": {
        "operationId": "getSparkClusterDetails",
        "tags": ["Workspaces"],
        "summary": "Gets spark cluster properties for a given workspace",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterDetailsView"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/project/{projectId}/defaultSparkSettings": {
      "get": {
        "operationId": "getDefaultOnDemandSparkSettings",
        "tags": ["Workspaces"],
        "summary": "gets the default spark settings for workspaces",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.DefaultOnDemandSparkClusterPropertiesSpec"
                }
              }
            }
          },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{workspaceId}/project/{projectId}/getWritableProjectMounts": {
      "get": {
        "operationId": "getWritableProjectMounts",
        "tags": ["Workspaces"],
        "summary": "Gets the writable mounts for this workspace. This includes the main git repo, dfs mount, and imported git repos",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "ID of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.WritableProjectMounts"
                }
              }
            }
          },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/workspaces/{projectId}/getActiveClassicWorkspaceCount": {
      "get": {
        "operationId": "getActiveClassicWorkspaceCount",
        "tags": ["Workspaces"],
        "summary": "Get the number of active \"classic\" workspace sessions for this project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "number" } }
            }
          },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "tags": ["Users"],
        "summary": "retrieves a list of users",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "userId",
            "description": "Optional list of user identifiers to select the previously known users",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "userName",
            "description": "Optional filter for an exact user name",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "query",
            "description": "Optional filter for a user name (returns usernames starting with this query)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.user.Person"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/self": {
      "get": {
        "operationId": "getCurrentUser",
        "tags": ["Users"],
        "summary": "retrieves the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.Person"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/requestForTrialPeriodExtension": {
      "get": {
        "operationId": "requestForTrialPeriodExtension",
        "tags": ["Users"],
        "summary": "extend trial period",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": { "type": "string" },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.user.Response"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/isLiteUser": {
      "get": {
        "operationId": "isLiteUser",
        "tags": ["Users"],
        "summary": "Check if the user is lite user or not",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "type": "string",
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/components/schemas/domino.common.user.LiteUserResponseDTO"
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/trialStatus": {
      "get": {
        "operationId": "getCurrentUserTrialStatus",
        "tags": ["Users"],
        "summary": "Get trial status of the current user",
        "parameters": [
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": { "type": "string" },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.user.TrialStatusDTO"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/extendTrialPeriod/{userId}/{extensionPeriodInDays}": {
      "get": {
        "operationId": "extendTrialPeriod",
        "tags": ["Users"],
        "summary": "extend trial period for a user",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "userId",
            "description": "Domino id of the user to whom the extension will apply",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "path",
            "name": "extensionPeriodInDays",
            "description": "How many days to extend by",
            "required": true
          },
          {
            "in": "header",
            "name": "X-Domino-Api-Key",
            "required": false,
            "schema": { "type": "string" },
            "description": "API Key"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.user.Response"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/users/environmentVariables": {
      "get": {
        "operationId": "listUserEnvironmentVariables",
        "tags": ["Users"],
        "summary": "retrieves the specified user's environment variables",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteUserEnvironmentVariables",
        "tags": ["Users"],
        "summary": "deletes all of the specified user's environment variables",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/organizations": {
      "post": {
        "operationId": "createOrganization",
        "tags": ["Organizations"],
        "summary": "creates an Organization",
        "parameters": [],
        "requestBody": {
          "description": "Information necessary to create a new organization",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewOrganization" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getAllOrganizations",
        "tags": ["Organizations"],
        "summary": "allows an Admin to retrieve all Organizations",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "name",
            "description": "Optional filter with a name of the specific organization",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Organization" }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/organizations/self": {
      "get": {
        "operationId": "getCurrentUserOrganizations",
        "tags": ["Organizations"],
        "summary": "retrieves the current user's Organizations",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "name",
            "description": "Optional filter with a name of the specific organization",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Organization" }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/organizations/{organizationUserId}": {
      "get": {
        "operationId": "getOrganization",
        "tags": ["Organizations"],
        "summary": "retrieves an Organization by user id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "organizationUserId",
            "description": "Identifier of organization's user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/organizations/{organizationUserId}/members": {
      "put": {
        "operationId": "changeOrganizationMembers",
        "tags": ["Organizations"],
        "summary": "add/remove members from an Organization",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "organizationUserId",
            "description": "Identifier of organization's user to set members",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Object with a list of new organization members",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMembers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/jiraBasicAuth": {
      "post": {
        "operationId": "jiraBasicAuth",
        "tags": ["ProjectManagement"],
        "summary": "Add Project Management Linker Data For Jira Basic Authentication",
        "parameters": [
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to link a Project Management Tool",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.api.PmLinker"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/unlinkProjectManagement": {
      "post": {
        "operationId": "unlinkProjectManagement",
        "tags": ["ProjectManagement"],
        "summary": "Removes Project Management Linker Data For Project Management",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/isUserAuthenticated": {
      "post": {
        "operationId": "isUserAuthenticated",
        "tags": ["ProjectManagement"],
        "summary": "Tells whether User is Authenticated",
        "parameters": [
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/getProjectsFromPMT": {
      "get": {
        "operationId": "getRelevantBriefProjects",
        "tags": ["ProjectManagement"],
        "summary": "Gets List of Relevant Project Management Projects from Project Management Tool",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "The Name of the Jira Project to filter further",
            "required": false
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.PmProjectSummary"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/getTicketsFromPMT": {
      "get": {
        "operationId": "getRelevantBriefTickets",
        "tags": ["ProjectManagement"],
        "summary": "Gets List of Relevant Project Management Tickets for Project Management Tool",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "The Name of the Jira Project to filter further",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "boolean" },
            "in": "query",
            "name": "onlyAssignedToMe",
            "description": "Flag, to filter ticket Assigned to Me",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "filterText",
            "description": "The text to filter out Tickets",
            "required": false
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketSummary"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/fullSync": {
      "post": {
        "operationId": "fullSync",
        "tags": ["ProjectManagement"],
        "summary": "Sync project with linked project management ticket.",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Id of the domino project to be synced",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/fullSyncStatus": {
      "get": {
        "operationId": "getFullSyncStatus",
        "tags": ["ProjectManagement"],
        "summary": "Gets Current Full Sync Status For Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.FullSyncStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/linkDominoProjectToPMTTicket": {
      "post": {
        "operationId": "linkPmTicketWithDominoEntity",
        "tags": ["ProjectManagement"],
        "summary": "Link a Project with a Project Management Ticket",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "ticketId",
            "description": "TicketId of the Ticket in the Project management tool which needs to linked",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "type": "boolean" },
            "in": "query",
            "name": "keepExistingGoals",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/unlinkDominoProjectToPMTTicket": {
      "post": {
        "operationId": "unlinkPmTicketWithDominoEntity",
        "tags": ["ProjectManagement"],
        "summary": "UnLink a Project with Project Management Ticket",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "type": "boolean" },
            "in": "query",
            "name": "keepExistingGoals",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/getTicketDetails": {
      "get": {
        "operationId": "getTicketDetails",
        "tags": ["ProjectManagement"],
        "summary": "Gets Ticket Details from Project Management",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "ticketId",
            "description": "The Project Management Ticket Id",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmTicket"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/getLinkedTicket": {
      "get": {
        "operationId": "getLinkedTicketByProjectId",
        "tags": ["ProjectManagement"],
        "summary": "Get Ticket Linked to a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.TicketToDominoMapper"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/getLinkedSubTickets": {
      "get": {
        "operationId": "getLinkedSubTicketsByProjectId",
        "tags": ["ProjectManagement"],
        "summary": "Get SubTickets Linked to a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.SubTicketToDominoMapper"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/jiraOAuth": {
      "get": {
        "operationId": "jiraOAuth",
        "tags": ["ProjectManagement"],
        "summary": "Completes authentication with jira server/cloud through OAuth protocol.",
        "parameters": [
          {
            "name": "oauth_verifier",
            "in": "query",
            "required": false,
            "description": "The verifier token provided by jira server",
            "schema": { "type": "string" }
          },
          {
            "name": "dominoRedirectionUrl",
            "in": "query",
            "required": false,
            "description": "Domino page url to be opened after successful authentication by oAuth",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/getJiraOAuthConfiguration": {
      "get": {
        "operationId": "getJiraOAuthConfiguration",
        "tags": ["ProjectManagement"],
        "summary": "Gets the Jira OAuth-1a configuration",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmOAuth1aConfiguration"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/createJiraOAuthConfiguration": {
      "post": {
        "operationId": "createJiraOAuthConfiguration",
        "tags": ["ProjectManagement"],
        "summary": "Create Jira oauth  configuration",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "jiraUrl",
            "description": "Jira Host Url",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.PmOAuth1aConfiguration"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/deleteJiraOAuthConfiguration": {
      "delete": {
        "operationId": "removeJiraOAuthConfiguration",
        "tags": ["ProjectManagement"],
        "summary": "Delete Jira oauth configuration",
        "parameters": [],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/allLinkedProjects": {
      "get": {
        "operationId": "getAllLinkedProjects",
        "tags": ["ProjectManagement"],
        "summary": "Get All Linked Projects",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projectManagement.api.LinkedProjectDetails"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/totalNumberOfLinkedProjects": {
      "get": {
        "operationId": "getTotalNumberOfLinkedProjects",
        "tags": ["ProjectManagement"],
        "summary": "count All Linked Projects",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "integer" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/unlinkAndResetProject": {
      "post": {
        "operationId": "unlinkAndResetProject",
        "tags": ["ProjectManagement"],
        "summary": "Unlink and Reset Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/isUserAuthorized": {
      "get": {
        "operationId": "isUserAuthorized",
        "tags": ["ProjectManagement"],
        "summary": "Checks if User is authorized to view that linked project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Domino Project Id which is linked to jira.",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/isProjectLinked": {
      "get": {
        "operationId": "isProjectLinked",
        "tags": ["ProjectManagement"],
        "summary": "Verifies if Project is linked to a ticket in Project Management Tool.",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Domino Project Id which is linked to jira.",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/project/{projectId}/stage/list": {
      "get": {
        "operationId": "getStagesForProject",
        "tags": ["ProjectManagement"],
        "summary": "Get allowed stages for a given project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/moveProjectToStage": {
      "post": {
        "operationId": "moveProjectToStage",
        "tags": ["ProjectManagement"],
        "summary": "Assign stage to a project",
        "parameters": [
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to assign a stage to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MoveProjectToStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/stage/list": {
      "get": {
        "operationId": "getStagesForGoal",
        "tags": ["ProjectManagement"],
        "summary": "Get allowed goal stages for a given goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/stage/{stageId}": {
      "post": {
        "operationId": "moveGoalToStage",
        "tags": ["ProjectManagement"],
        "summary": "Assign stage to a Goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "stageId",
            "description": "Domino id of the project stage",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoalStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/goals": {
      "get": {
        "operationId": "getProjectGoals",
        "tags": ["ProjectManagement"],
        "summary": "Get project goals",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{projectId}/createGoal": {
      "post": {
        "operationId": "createProjectGoal",
        "tags": ["ProjectManagement"],
        "summary": "Create project goal",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a project goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/updateTitle": {
      "post": {
        "operationId": "updateProjectGoalTitle",
        "tags": ["ProjectManagement"],
        "summary": "Update title of a project goal",
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with title to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/updateDescription": {
      "post": {
        "operationId": "updateProjectGoalDescription",
        "tags": ["ProjectManagement"],
        "summary": "Update description of a project goal",
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with description be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalDescription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}": {
      "delete": {
        "operationId": "deleteProjectGoal",
        "tags": ["ProjectManagement"],
        "summary": "Delete a project goal",
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/comment/list": {
      "get": {
        "operationId": "getCommentsOnGoal",
        "tags": ["ProjectManagement"],
        "summary": "Get comments on a Goal",
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goal/{goalId}/comment": {
      "post": {
        "operationId": "addCommentOnGoal",
        "tags": ["ProjectManagement"],
        "summary": "Add comment on Goal",
        "parameters": [
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goalComment/{threadId}/{commentId}/canUpdate": {
      "get": {
        "operationId": "canUpdateCommentOnGoal",
        "tags": ["ProjectManagement"],
        "summary": "Boolean representing user can update a comment on Goal",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/goalComment/{threadId}/{commentId}": {
      "delete": {
        "operationId": "archiveCommentOnGoal",
        "tags": ["ProjectManagement"],
        "summary": "Archive comment on Goal",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateCommentOnGoal",
        "tags": ["ProjectManagement"],
        "summary": "Update comment on Goal",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/project/{projectId}/comment/list": {
      "get": {
        "operationId": "getCommentsOnProject",
        "tags": ["ProjectManagement"],
        "summary": "Get comments on a Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/project/{projectId}/comment": {
      "post": {
        "operationId": "addCommentOnProject",
        "tags": ["ProjectManagement"],
        "summary": "Add comment on Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/projectComment/{threadId}/{commentId}/canUpdate": {
      "get": {
        "operationId": "canUpdateCommentOnProject",
        "tags": ["ProjectManagement"],
        "summary": "Boolean representing user can update comment on Project",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/projectComment/{threadId}/{commentId}": {
      "delete": {
        "operationId": "archiveCommentOnProject",
        "tags": ["ProjectManagement"],
        "summary": "Archive comment on Project",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateCommentOnProject",
        "tags": ["ProjectManagement"],
        "summary": "Update comment on Project",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{jobId}/linkJobToGoal": {
      "post": {
        "operationId": "linkJobToGoal",
        "tags": ["ProjectManagement"],
        "summary": "Link job to goal",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkJobToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{jobId}/unlinkJobFromGoal": {
      "post": {
        "operationId": "unlinkJobFromGoal",
        "tags": ["ProjectManagement"],
        "summary": "Unlink job from goal",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking goal from job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkJobFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{workspaceId}/linkWorkspaceToGoal": {
      "post": {
        "operationId": "linkWorkspaceToGoal",
        "tags": ["ProjectManagement"],
        "summary": "Link workspace to goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "workspaceId",
            "description": "ID of the workspace",
            "required": true
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking goal to a workpace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkWorkspaceToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/{workspaceId}/unlinkWorkspaceFromGoal": {
      "post": {
        "operationId": "unlinkWorkspaceFromGoal",
        "tags": ["ProjectManagement"],
        "summary": "Unlink workspace from goal",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkWorkspaceFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/linkFileToGoal": {
      "post": {
        "operationId": "linkFileToGoal",
        "tags": ["ProjectManagement"],
        "summary": "Link a file to a goal",
        "parameters": [
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.LinkFileToGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projectManagement/unlinkFileFromGoal": {
      "post": {
        "operationId": "unlinkFileFromGoal",
        "tags": ["ProjectManagement"],
        "summary": "Unlink a file from a goal",
        "parameters": [
          {
            "name": "X-Domino-PmApiToken",
            "in": "cookie",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking goal from workspace",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projectManagement.web.UnlinkFileFromGoalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projectManagement.api.ResponseMessage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "$ref": "#/components/responses/ProjectManagementErrorResponse"
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects": {
      "post": {
        "operationId": "createProject",
        "tags": ["Projects"],
        "summary": "creates a project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.NewProject"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "operationId": "getProjectSummary",
        "tags": ["Projects"],
        "summary": "gets the summary for this given projectId",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectSummary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "archiveProjectById",
        "tags": ["Projects"],
        "summary": "archive an project by id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to archive",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectToForkId}/fork": {
      "post": {
        "operationId": "forkProject",
        "tags": ["Projects"],
        "summary": "forks a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectToForkId",
            "description": "Id of the project to fork",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.ForkOrCopyProject"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectToCopyId}/copy": {
      "post": {
        "operationId": "copyProject",
        "tags": ["Projects"],
        "summary": "copies a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectToCopyId",
            "description": "Id of the project to copy",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.ForkOrCopyProject"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/description": {
      "patch": {
        "operationId": "updateProjectDescription",
        "tags": ["Projects"],
        "summary": "update project description for this given projectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.UpdateProjectDescription"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/visibility": {
      "patch": {
        "operationId": "updateProjectVisibility",
        "tags": ["Projects"],
        "summary": "update project visibility for this given projectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.UpdateProjectVisibility"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/tags": {
      "post": {
        "operationId": "addTags",
        "tags": ["Projects"],
        "summary": "adds tag(s) to a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add tag(s) to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.NewTags"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/tags/{tagId}": {
      "delete": {
        "operationId": "removeTagFromProject",
        "tags": ["Projects"],
        "summary": "delete a tag from a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to delete tag from",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "tagId",
            "description": "Id of the tag to delete",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/releases": {
      "get": {
        "operationId": "getProjectReleases",
        "tags": ["Projects"],
        "summary": "gets the releases for the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projectreleases.ProjectReleaseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/settings": {
      "get": {
        "operationId": "getProjectSettings",
        "tags": ["Projects"],
        "summary": "gets the settings for the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.ProjectSettingsDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateProjectSettings",
        "tags": ["Projects"],
        "summary": "update the settings for the given Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.ProjectSettingsUpdateDto"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/hardwareTiers": {
      "get": {
        "operationId": "listHardwareTiersForProject",
        "tags": ["Projects"],
        "summary": "retrieves the Hardware Tiers accessible for a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierWithCapacityDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/collaborators": {
      "post": {
        "operationId": "addCollaborator",
        "tags": ["Projects"],
        "summary": "adds a user or organization to Project as a collaborator",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add collaborator to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.project.models.Collaborator"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.project.models.Collaborator"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/collaborators/{collaboratorId}": {
      "delete": {
        "operationId": "removeCollaborator",
        "tags": ["Projects"],
        "summary": "remove a collaborator from a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "collaboratorId",
            "description": "Id of the collaborator to remove from the project",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/commits/head/files/{path}": {
      "post": {
        "operationId": "uploadFile",
        "tags": ["Files"],
        "summary": "uploads a file to the head commit of the project's repository",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to upload the file to",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "path",
            "name": "path",
            "description": "Path in the project's repository to upload the file to",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "upfile": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectFile"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getProjectFilesFromHead",
        "tags": ["Files"],
        "summary": "returns all the files for a specified project from the last commit",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return files for",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "path",
            "name": "path",
            "description": "Path in the project's repository to list files from (if not specified, files in the root will be listed)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectFileDeprecated"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/commits/{commitId}/files/{path}": {
      "get": {
        "operationId": "getProjectFiles",
        "tags": ["Files"],
        "summary": "returns all the files for a specified project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return files for",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "commitId",
            "description": "Id of a commit in the project repository to list files from",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "path",
            "name": "path",
            "description": "Path in the project's repository to list files from (if not specified, files in the root will be listed)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectFileDeprecated"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/commits/head": {
      "get": {
        "operationId": "getProjectHeadCommit",
        "tags": ["Files"],
        "summary": "retrieves the last (head) commit in the repository associated with the specified project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return head commit for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.file.ProjectCommitDeprecated"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/commits": {
      "get": {
        "operationId": "getProjectCommits",
        "tags": ["Files"],
        "summary": "retrieves commits of the repository associated with the specified project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to return commits for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.file.ProjectCommitDeprecated"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/gitRepositories": {
      "post": {
        "operationId": "addGitRepo",
        "tags": ["Projects"],
        "summary": "adds a git repository to a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add the repository to",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getGitRepos",
        "tags": ["Projects"],
        "summary": "gets git repositories for a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repositories from",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}": {
      "patch": {
        "operationId": "editGitRepo",
        "tags": ["Projects"],
        "summary": "edits a git repository",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being edited",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
              }
            }
          }
        },
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      },
      "delete": {
        "operationId": "archiveGitRepo",
        "tags": ["Projects"],
        "summary": "archives a git repository from a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to archive the repository from",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository to archive",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/environmentVariables": {
      "post": {
        "operationId": "setProjectEnvironmentVariables",
        "tags": ["Projects"],
        "summary": "sets the specified project's environment variables",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to add environment variables",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "listProjectEnvironmentVariables",
        "tags": ["Projects"],
        "summary": "retrieves the specified project's environment variables",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.models.EnvironmentVariables"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/getProjectStages": {
      "get": {
        "operationId": "getProjectStages",
        "tags": ["Projects"],
        "summary": "Get project stages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/createProjectStage": {
      "post": {
        "operationId": "createProjectStage",
        "tags": ["Projects"],
        "summary": "Create project stages",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to create a projectStage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/archiveProjectStage": {
      "delete": {
        "operationId": "archiveProjectStage",
        "tags": ["Projects"],
        "summary": "Archive project stage",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to archive a projectStage",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveProjectStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/moveProjectToStage": {
      "post": {
        "operationId": "moveProjectToStage",
        "tags": ["Projects"],
        "summary": "Assign stage to a project",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to assign a stage to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MoveProjectToStage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/raiseBlockerToProject": {
      "post": {
        "operationId": "raiseBlockerToProject",
        "tags": ["Projects"],
        "summary": "Raise blocker to a project",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to raise blocker to a project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.RaiseBlockerToProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/markProjectComplete": {
      "post": {
        "operationId": "markProjectComplete",
        "tags": ["Projects"],
        "summary": "Mark Project as complete",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to mark project as complete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MarkProjectComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/markProjectActive": {
      "post": {
        "operationId": "markProjectActive",
        "tags": ["Projects"],
        "summary": "Mark Project as active",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to mark project as active",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.MarkProjectActive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/getCurrentStageAndStatus": {
      "get": {
        "operationId": "getCurrentProjectStageAndStatus",
        "tags": ["Projects"],
        "summary": "Get current project stage and status",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/updateStageName": {
      "post": {
        "operationId": "updateStageName",
        "tags": ["Projects"],
        "summary": "Update stage name",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to update the stage name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateStageName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectStageAndStatus"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/getProjectPortfolioStats": {
      "get": {
        "operationId": "getProjectPortfolioStats",
        "tags": ["Projects"],
        "summary": "Get project portfolio stats",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "boolean" },
            "in": "query",
            "name": "includePmLinkedProjects",
            "description": "boolean to include project management linked projects",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioStats"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/getProjectPortfolio": {
      "get": {
        "operationId": "getProjectPortfolio",
        "tags": ["Projects"],
        "summary": "Get project portfolio stats",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "number of projects to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "sortBy",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNo",
            "description": "the page number to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "searchQuery",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "stageId",
            "description": "The stageId to filter",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": { "type": "string" }
            },
            "in": "query",
            "name": "status",
            "description": "Status to filter",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "boolean" },
            "in": "query",
            "name": "isBlocked",
            "description": "boolean to filter blocked projects",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "boolean" },
            "in": "query",
            "name": "includePmLinkedProjects",
            "description": "boolean to include project management linked projects",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/getProjectStages": {
      "get": {
        "operationId": "getProjectStagesForProject",
        "tags": ["Projects"],
        "summary": "Get allowed project stages for a given project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/getCommentsOnBlockedProject": {
      "get": {
        "operationId": "getCommentsOnBlockedProject",
        "tags": ["Projects"],
        "summary": "Get comment on blocked project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "format": "int64", "type": "string" },
            "in": "query",
            "name": "blockedAt",
            "description": "The time in millis (instant) at which the project is blocked",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/addCommentOnBlockedProject": {
      "post": {
        "operationId": "addCommentOnBlockedProject",
        "tags": ["Projects"],
        "summary": "Add comment on blocked project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on blocked project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddBlockedAtComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/archiveCommentOnBlockedProject": {
      "delete": {
        "operationId": "archiveCommentOnBlockedProject",
        "tags": ["Projects"],
        "summary": "Archive comment on blocked project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to archive comment on blocked project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{goalId}/getCommentsOnGoal": {
      "get": {
        "operationId": "getCommentsOnGoal",
        "tags": ["Projects"],
        "summary": "Get comments on a Goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "in": "path",
            "name": "goalId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{goalId}/addCommentOnGoal": {
      "post": {
        "operationId": "addCommentOnGoal",
        "tags": ["Projects"],
        "summary": "Add comment on Goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{goalId}/comment": {
      "put": {
        "operationId": "updateCommentOnGoal",
        "tags": ["Projects"],
        "summary": "Update comment on Goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateCommentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/projectGoals/archiveCommentOnGoal": {
      "delete": {
        "operationId": "archiveCommentOnGoal",
        "tags": ["Projects"],
        "summary": "Archive comment on Goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with data to archive comment on Goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/dontCall": {
      "get": {
        "operationId": "notFound",
        "tags": ["Projects"],
        "summary": "Get all possible statuses (Dirty hack to send enums to frontend)",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioMetaData"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/getAssetPortfolioStats": {
      "get": {
        "operationId": "getAssetPortfolioStats",
        "tags": ["Projects"],
        "summary": "Get assets portfolio stats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioStats"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/portfolio/getAssetPortfolio": {
      "get": {
        "operationId": "getAssetPortfolio",
        "tags": ["Projects"],
        "summary": "Get assets portfolio",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["App", "ModelAPI", "Launcher", "Schedules"]
            },
            "in": "query",
            "name": "assetType",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageSize",
            "description": "number of projects to fetch",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "order of sort",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "sortBy",
            "description": "column to sort on",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "pageNo",
            "description": "the page number to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "searchQuery",
            "description": "column to sort on",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goals": {
      "get": {
        "operationId": "getProjectGoals",
        "tags": ["Projects"],
        "summary": "Get project goals",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/createGoal": {
      "post": {
        "operationId": "createProjectGoal",
        "tags": ["Projects"],
        "summary": "Create project goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to create a project goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.CreateProjectGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}": {
      "delete": {
        "operationId": "deleteProjectGoal",
        "tags": ["Projects"],
        "summary": "Delete a project goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/markComplete": {
      "post": {
        "operationId": "markProjectGoalComplete",
        "tags": ["Projects"],
        "summary": "Mark project goal complete",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/markIncomplete": {
      "post": {
        "operationId": "markProjectGoalIncomplete",
        "tags": ["Projects"],
        "summary": "Mark a project goal incomplete",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/updateTitle": {
      "post": {
        "operationId": "updateProjectGoalTitle",
        "tags": ["Projects"],
        "summary": "Update title of a project goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with title to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalTitle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/goal/{goalId}/updateDescription": {
      "post": {
        "operationId": "updateProjectGoalDescription",
        "tags": ["Projects"],
        "summary": "Update description of a project goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "goalId",
            "description": "Domino id of the goal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with description be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateProjectGoalDescription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/comments": {
      "get": {
        "operationId": "getCommentsOnProject",
        "tags": ["Projects"],
        "summary": "Get comments on a Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/comment": {
      "post": {
        "operationId": "addCommentOnProject",
        "tags": ["Projects"],
        "summary": "Add comment on Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to add comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.AddComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "archiveCommentOnProject",
        "tags": ["Projects"],
        "summary": "Archive comment on Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to archive comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.ArchiveComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateCommentOnProject",
        "tags": ["Projects"],
        "summary": "Update comment on Project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Domino id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with data to update comment on Project",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.UpdateCommentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/useableEnvironments": {
      "get": {
        "operationId": "getUseableEnvironments",
        "tags": ["Projects"],
        "summary": "gets the list of Environments that this Project can use",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.UseableProjectEnvironmentsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/environment/{environmentId}": {
      "get": {
        "operationId": "getUseableEnvironmentDetails",
        "tags": ["Projects"],
        "summary": "gets the details for an environment visible by this project and the requesting user",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "environmentId",
            "description": "Id of the environment",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.EnvironmentDetails"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/dependenciesAndForks": {
      "get": {
        "operationId": "getDependenciesAndForks",
        "tags": ["Projects"],
        "summary": "get project dependencies and fork info, request merge status to be sent via websocket",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.ProjectDependenciesAndForks"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/repository/{repoId}/credentialMapping": {
      "get": {
        "operationId": "getCredentialId",
        "tags": ["Projects"],
        "summary": "get credential id used for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.DominoId"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteCredentialMapping",
        "tags": ["Projects"],
        "summary": "delete credential mapping for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "setCredentialMapping",
        "tags": ["Projects"],
        "summary": "set credential to use for a specific user-project-repo combination",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with credential ID to set",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.web.SetCredentialMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/credentialMapping": {
      "get": {
        "operationId": "getAllCredentialsForProject",
        "tags": ["Projects"],
        "summary": "get list of credential mappings for a specific user-project combination",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.repositories.CredentialMappingDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/credentialMapping/credential/{credentialId}": {
      "delete": {
        "operationId": "deleteCredentialMappingsByCredentialId",
        "tags": ["Projects"],
        "summary": "delete credential mappings associated with a particular credential",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "credentialId",
            "description": "Id of the credential",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{repoId}/defaultTreeUri": {
      "get": {
        "operationId": "getDefaultTreeUri",
        "tags": ["Projects"],
        "summary": "get uri for default tree of repository",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "String" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForBlobAtBranch/{branch}/{fileName}": {
      "get": {
        "operationId": "getBlobAtBranch",
        "tags": ["Projects"],
        "summary": "get repository uri for blob at a specific branch for a specific file",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "branch",
            "description": "Desired branch",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "fileName",
            "description": "Name of file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "String" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForBlobAtCommit/{commit}/{fileName}": {
      "get": {
        "operationId": "getBlobAtCommit",
        "tags": ["Projects"],
        "summary": "get repository uri for blob at a specific commit for a specific file",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "commit",
            "description": "Desired commit",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "fileName",
            "description": "Name of file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "String" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/{repoId}/uriForTreeAtCommit/{commit}": {
      "get": {
        "operationId": "getTreeAtCommit",
        "tags": ["Projects"],
        "summary": "get repository uri for tree at a specific commit",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "repoId",
            "description": "Id of the repository",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "commit",
            "description": "Desired commit",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "String" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/branches": {
      "get": {
        "operationId": "getBranches",
        "tags": ["Projects", "Git"],
        "summary": "retrieves list of a repository's branches",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": {
              "default": 1,
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "startIndex",
            "description": "Index of the first result desired by the client (1-indexed)",
            "required": false
          },
          {
            "schema": {
              "default": 20,
              "nullable": true,
              "format": "int32",
              "type": "number",
              "minimum": 1
            },
            "in": "query",
            "name": "count",
            "description": "Desired number of results per page",
            "required": false
          },
          {
            "schema": {
              "default": "name",
              "nullable": true,
              "type": "string",
              "enum": ["name"]
            },
            "in": "query",
            "name": "sort",
            "description": "Field name to sort results on.",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "in": "query",
            "name": "sortDirection",
            "description": "Direction to sort results in. Default value depends on sort field. Ignored if 'sort' is empty.",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "searchPattern",
            "description": "Optional search parameter to filter by.",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetBranchesApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/commits": {
      "get": {
        "operationId": "getCommits",
        "tags": ["Projects", "Git"],
        "summary": "retrieves list of a repository's commits",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "branch",
            "description": "Optional Name of a branch to start the history from.",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetCommitsApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/browse": {
      "get": {
        "operationId": "getBrowseFiles",
        "tags": ["Projects", "Git"],
        "summary": "gets a list of a repository's files and directories",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the repository from.",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "directory",
            "description": "The path to browse the repository at.",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to browse the repository at. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to browse the repository at. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.projects.api.repositories.responses.GetRepoBrowseApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/git/raw": {
      "get": {
        "operationId": "getRepoFile",
        "tags": ["Projects", "Git"],
        "summary": "gets a file from a repository",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project to get the file from",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "fileName",
            "description": "The full path to the file to retrieve",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "branchName",
            "description": "A branch name to retrieve the file for. Defaults to the default set by the domino project, or if one doesn't exist, the repository's default. This parameter will be ignored if `commit` is provided.\n",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "commit",
            "description": "A commit SHA to retrieve the file for. This parameter will take priority over `branchName`.\n",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": { "description": "success" }
        }
      }
    },
    "/projects/{projectId}/gitRepositories/{repositoryId}/ref": {
      "put": {
        "operationId": "updateGitRepositoryDefaultRef",
        "tags": ["Projects", "Git"],
        "summary": "update the default ref for a repository",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "repositoryId",
            "description": "Id of the repository being queried. You can use \"_\" to refer to the project's mainRepository.",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs": {
      "post": {
        "operationId": "createScheduledJob",
        "tags": ["Scheduled Jobs"],
        "summary": "creates a new scheduled job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.scheduledrun.api.NewScheduledJobDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "listScheduledJobs",
        "tags": ["Scheduled Jobs"],
        "summary": "retrieves list of scheduled job definitions for a given project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs/forRequestingUser": {
      "get": {
        "operationId": "listScheduledJobsForRequestingUser",
        "tags": ["Scheduled Jobs"],
        "summary": "retrieves list of scheduled job definitions for a given project with metadata specific to requesting user",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobForRequestingUserDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/scheduledjobs/{scheduledJobKey}": {
      "get": {
        "operationId": "getScheduledJob",
        "tags": ["Scheduled Jobs"],
        "summary": "retrieves a scheduled job by Id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be retrieved",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "unscheduleJob",
        "tags": ["Scheduled Jobs"],
        "summary": "deletes a scheduled job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateScheduledJob",
        "tags": ["Scheduled Jobs"],
        "summary": "updates a scheduled job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "scheduledJobKey",
            "description": "Id of the scheduled job to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.scheduledrun.api.UpdatedScheduledJobDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/projects/{projectId}/launcherJob/{launcherId}": {
      "post": {
        "operationId": "startLauncherJob",
        "tags": ["Launchers"],
        "summary": "starts an existing launcher job",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "launcherId",
            "description": "Id of the existing launcher",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Information required to start a Job for an existing Launcher. Note that the object in uploadedFiles must contain the Base64 encoded text version of the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.launcherjob.api.LauncherJobStartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.DominoId"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/provenance/provenanceCheckpoint/{provenanceCheckpointId}": {
      "get": {
        "operationId": "getProvenanceCheckpoint",
        "tags": ["Provenance"],
        "summary": "Get the provenance checkpoint for a provenance checkpoint id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "ID of the Project",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "provenanceCheckpointId",
            "description": "ID of the provenance checkpoint",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/provenance/updateCheckpoint": {
      "post": {
        "operationId": "updateProvenanceCheckpoint",
        "tags": ["Provenance"],
        "summary": "Update the provenance checkpoint with details from Run record",
        "requestBody": {
          "description": "A provenance chedkpoint object with executionId and pullOrSyncOperationId",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.provenance.web.UpsertProvenanceCheckpointRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated checkpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/environments/defaultEnvironment": {
      "get": {
        "operationId": "getDefaultEnvironment",
        "tags": ["Environments"],
        "summary": "Get default environment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/environments/self": {
      "get": {
        "operationId": "getCurrentUserEnvironments",
        "tags": ["Environments"],
        "summary": "retrieves the current user's Environments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/environments/{environmentId}": {
      "get": {
        "operationId": "getEnvironmentById",
        "tags": ["Environments"],
        "summary": "retrieves an Environment by id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "environmentId",
            "description": "Id of the environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.environments.api.EnvironmentDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/environments/{environmentId}/availableTools": {
      "get": {
        "operationId": "getAvailableToolsForEnvironment",
        "tags": ["Environments"],
        "summary": "Get the list of available Workspace tools for the given Environment",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.environments.api.EnvironmentWorkspaceToolDefinition"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/environments/{environmentId}/page/{page}/pageSize/{pageSize}/revisions": {
      "get": {
        "operationId": "getBuiltEnvironmentRevisions",
        "tags": ["Environments"],
        "summary": "Get environment revision summaries",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "environmentId",
            "description": "ID of the Environment",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "path",
            "name": "page",
            "description": "page number, indexed from 0",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "path",
            "name": "pageSize",
            "description": "page size",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/domino.environments.api.PaginatedRevisionData"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/hardwareTiers": {
      "get": {
        "operationId": "getHardwareTiers",
        "tags": ["Control Center"],
        "summary": "retrieves utilization and cost summary by hardware tier",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.HardwareTiersUtilizationDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/runs": {
      "get": {
        "operationId": "getRuns",
        "tags": ["Control Center"],
        "summary": "retrieves run usage and cost details",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Optional filter by project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "Optional filter by starting user",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "hardwareTierId",
            "description": "Optional filter by hardware tier",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RunUtilization" }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/runsPerDay": {
      "get": {
        "operationId": "getRunsPerDay",
        "tags": ["Control Center"],
        "summary": "retrieves run usage and cost details per day",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "Optional filter by project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "Optional filter by starting user",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "hardwareTierId",
            "description": "Optional filter by hardware tier",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "runs": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/RunUtilization" }
                    },
                    "maxLoadPeriodInMonths": { "type": "number" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topRunTypesByComputeHours": {
      "get": {
        "operationId": "topRunTypesByComputeHours",
        "tags": ["Control Center"],
        "summary": "retrieves top run types by compute hours utilized",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "id of the project that owns runs examined",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/getTopHardwareTiersByEstimatedCost": {
      "get": {
        "operationId": "getTopHardwareTiersByEstimatedCost",
        "tags": ["Control Center"],
        "summary": "retrieves top hardware tiers by compute spend",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "id of the project that owns runs examined",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topProjectsByComputeHours": {
      "get": {
        "operationId": "getTopProjectsByComputeHours",
        "tags": ["Control Center"],
        "summary": "retrieves top projects by compute hours utilized",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topProjectsByComputeCost": {
      "get": {
        "operationId": "getTopProjectsByComputeCost",
        "tags": ["Control Center"],
        "summary": "retrieves top projects by compute spend",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "startingUserId",
            "description": "id of user who started runs in project",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "organizationId",
            "description": "Optional filter by organization id",
            "required": false
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topUsersByComputeHours": {
      "get": {
        "operationId": "getTopUsersByComputeHours",
        "tags": ["Control Center"],
        "summary": "retrieves top users by compute hours utilized",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topUsersByComputeCost": {
      "get": {
        "operationId": "getTopUsersByComputeCost",
        "tags": ["Control Center"],
        "summary": "retrieves top users by compute spend",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topOrganizationsByComputeHours": {
      "get": {
        "operationId": "getTopOrganizationsByComputeHours",
        "tags": ["Control Center"],
        "summary": "retrieves top organizations by compute hours utilized",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/topOrganizationsByComputeCost": {
      "get": {
        "operationId": "getTopOrganizationsByComputeCost",
        "tags": ["Control Center"],
        "summary": "retrieves top organizations by compute spend",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.TopItemDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/statsForAllUsers": {
      "get": {
        "operationId": "getStatsForAllUsers",
        "tags": ["Control Center"],
        "summary": "retrieves statistics for all users",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.UserStatsDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/controlCenter/utilization/statsForAllOrganizations": {
      "get": {
        "operationId": "getStatsForAllOrganizations",
        "tags": ["Control Center"],
        "summary": "retrieves statistics for all organizations",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "Start of the date range in YYYYMMDD format"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string" },
            "description": "End of the date range in YYYYMMDD format (inclusive)"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.controlcenter.OrganizationStatsDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts": {
      "post": {
        "operationId": "createModelProduct",
        "tags": ["Model Products"],
        "summary": "creates a new ModelProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "listProjectModelProducts",
        "tags": ["Model Products"],
        "summary": "Retrieves Model Products the current publisher can access",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "schema": { "type": "string" }
          },
          { "in": "query", "name": "type", "schema": { "type": "string" } }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modelProducts/consumer": {
      "get": {
        "operationId": "listModelProducts",
        "tags": ["Model Products"],
        "summary": "retrieves Model Products the current consumer can access",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string" },
            "description": "the type of model product"
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ConsumerModelProduct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modelProducts/{modelProductId}": {
      "get": {
        "operationId": "getModelProduct",
        "tags": ["Model Products"],
        "summary": "retrieves a Model Product by id",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/start": {
      "post": {
        "operationId": "start",
        "tags": ["Model Products"],
        "summary": "starts a runnable ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.StartParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/restartAll": {
      "post": {
        "operationId": "restartAll",
        "tags": ["Model Products"],
        "summary": "restarts all active apps",
        "parameters": [],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/requestAccess": {
      "post": {
        "operationId": "requestAccess",
        "tags": ["Model Products"],
        "summary": "requests access to a ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/grantAccess": {
      "post": {
        "operationId": "grantAccess",
        "tags": ["Model Products"],
        "summary": "grants access to a ModelProduct to a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.AccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/denyAccess": {
      "post": {
        "operationId": "denyAccess",
        "tags": ["Model Products"],
        "summary": "denies access to a ModelProduct to a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.AccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/invite": {
      "post": {
        "operationId": "bulkGrantAccess",
        "tags": ["Model Products"],
        "summary": "grants access to a ModelProduct to multiple users",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.GranteeList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.EmailInvitationResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/uninvite": {
      "post": {
        "operationId": "uninvite",
        "tags": ["Model Products"],
        "summary": "uninvite a user",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UninviteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/visibility": {
      "post": {
        "operationId": "updateVisibility",
        "tags": ["Model Products"],
        "summary": "sets visibility for a ModelProduct",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.VisibilityPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/stop": {
      "post": {
        "operationId": "stop",
        "tags": ["Model Products"],
        "summary": "stops a runnable ModelProduct",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "modelProductId",
            "description": "Domino id of the model product (app)",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "boolean" },
            "in": "query",
            "name": "force",
            "description": "Stop an app regardless of its status",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DominoId" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{runId}/view": {
      "post": {
        "operationId": "record",
        "tags": ["Model Products"],
        "summary": "record a view on a model product",
        "parameters": [
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsRecorded"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/top": {
      "get": {
        "operationId": "getTopN",
        "tags": ["Model Products"],
        "summary": "list top model product views for a given time range",
        "parameters": [
          {
            "in": "query",
            "name": "startMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "count",
            "schema": { "default": 20, "format": "int32", "type": "integer" },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTopNResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/totals": {
      "get": {
        "operationId": "getTotal",
        "tags": ["Model Products"],
        "summary": "get count of views on one model product for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTotalResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/{modelProductId}/timeseries": {
      "get": {
        "operationId": "getTimeseries",
        "tags": ["Model Products"],
        "summary": "get count of views on one model product for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "granularityMillis",
            "schema": {
              "default": 3600000,
              "format": "int64",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTimeseriesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          },
          "500": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProductError"
          }
        }
      }
    },
    "/modelProducts/isRunnable": {
      "get": {
        "operationId": "isRunnable",
        "tags": ["Model Products"],
        "summary": "retrieves whether this project can be run as the model product type",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": ["APP", "BATCH", "REPORT", "SCORER"]
            },
            "in": "query",
            "name": "type",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.IsRunnable"
                }
              }
            }
          }
        }
      }
    },
    "/modelProducts/consumer/{modelProductId}": {
      "get": {
        "operationId": "consumerSummary",
        "tags": ["Model Products"],
        "summary": "retrieves a Model Product by id",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ConsumerModelProduct"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": {
            "description": "Current user does not have access to this model product but may request it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.GrantAccessRequired"
                }
              }
            }
          },
          "403": {
            "description": "Access to this model product is forbidden for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.LoginRequired"
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}/logs": {
      "get": {
        "operationId": "getAppVersionLogs",
        "tags": ["Model Products"],
        "summary": "Get the logs of an App Version",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the app instance's runtime environment.\n * `stdout` - Log lines displayed in the stdout of the app instance's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the app instance's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the app instance.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number", "default": 10000 },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "number", "default": 0 },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}/realTimeLogs": {
      "get": {
        "operationId": "getRealTimeAppVersionLogs",
        "tags": ["Model Products"],
        "summary": "Get the logs of an App Version without going to s3",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "logType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "console",
                "stdout",
                "stderr",
                "stdoutstderr",
                "prepareoutput"
              ],
              "example": "console  |  stdout  |  stderr  |  stdoutstderr  |  prepareoutput",
              "default": "console"
            },
            "description": "Types of logs:\n * `console` - This is the default if the value is not provided. All logs lines displayed in the app instance's runtime environment.\n * `stdout` - Log lines displayed in the stdout of the app instance's runtime environment.\n * `stderr` - Log lines displayed in the stderr of the app instance's runtime environment.\n * `stdoutstderr` - Interleaved stdout and stderr.\n * `prepareoutput` - Log lines generated by the environment preparing the app instance.\n"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number", "default": 10000 },
            "description": "Max number of log lines to fetch. Will be overridden by the configuration's limit if this value exceeds the configuration's limit, or if this value is not provided."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": { "type": "number", "default": 0 },
            "description": "The index of the current body of logs to start fetching from. 0 by default and typically won't be used for a timestamp-based offset log fetching strategy."
          },
          {
            "in": "query",
            "name": "latestTimeNano",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1543538813745986325",
              "default": "0"
            },
            "description": "The epoch time in nanoseconds to start fetching from, such as \"1543538813745986325\". \"0\" by default and will typically be used for a timestamp-based offset log fetching strategy."
          }
        ],
        "responses": {
          "200": {
            "description": "Scenarios:<br>\nIf the log retriever got NO logs, then the client should expect\n  * an empty `logContent` array\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was done fetching ALL of the logs, then the client should expect\n  * `isComplete = true`\n  * `paginationFilter.limit = 0`\n\nfrom the returned LogSet.<br><br>\nIf the log retriever was NOT done fetching all of the logs, then the client should expect\n  * `isComplete = false`\n  * `paginationFilter` encoding the next `offset` or `latestTimeNano` of the last log line fetched by the retriever.\n\nfrom the returned LogSet.<br><br>\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.LogSet"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/apps/versions/{appVersionId}": {
      "get": {
        "operationId": "getAppVersionDetails",
        "tags": ["Model Products"],
        "summary": "Get the details of a particular App Version",
        "parameters": [
          {
            "in": "path",
            "name": "appVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppVersionDetails"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/{modelProductId}/versions": {
      "get": {
        "operationId": "getAllAppVersions",
        "tags": ["Model Products"],
        "summary": "Get all Versions of an App",
        "parameters": [
          {
            "in": "path",
            "name": "modelProductId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.modelproduct.AppVersionOverview"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/linkToGoal": {
      "post": {
        "operationId": "linkAppToGoal",
        "tags": ["Model Products"],
        "summary": "Link a app to a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to link app to goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.LinkAppToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelProducts/unlinkFromGoal": {
      "post": {
        "operationId": "unlinkAppFromGoal",
        "tags": ["Model Products"],
        "summary": "Unlink a app from a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to unlink app from goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UnlinkAppFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.modelproduct.AppGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/{snapshotId}": {
      "post": {
        "operationId": "updateSnapshotStatus",
        "tags": ["dataset"],
        "summary": "update a dataset snapshot's status",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.UpdateSnapshotStatusInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getSnapshot",
        "tags": ["dataset"],
        "summary": "retrieves the specified snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotSummaryDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshots": {
      "get": {
        "operationId": "getSnapshots",
        "tags": ["dataset"],
        "summary": "retrieves all snapshots for a dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/versionSummaries": {
      "get": {
        "operationId": "getSnapshotSummaries",
        "tags": ["dataset"],
        "summary": "retrieves data set summaries of all the data set verisions for a specified data set collection",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotSummaryDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/tags": {
      "post": {
        "operationId": "addTag",
        "tags": ["dataset"],
        "summary": "adds a tag to a dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AddDataSetTagInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/tags/{tagName}": {
      "delete": {
        "operationId": "removeTag",
        "tags": ["dataset"],
        "summary": "removes a tag from a dataset by updating the dataset's collection tags map",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "tagName",
            "description": "Name of the tag to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/mountable": {
      "get": {
        "operationId": "getMountableDatasets",
        "tags": ["dataset"],
        "summary": "gets mountable dataset collections",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": { "type": "string" }
            },
            "in": "query",
            "name": "ignoreProjects",
            "description": "Ids of projects that should have their datasets excluded from being returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections": {
      "post": {
        "operationId": "createDataset",
        "tags": ["dataset"],
        "summary": "create a new dataset collection",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information for new dataset collection creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateDatasetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetViewModel"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/byProject": {
      "get": {
        "operationId": "lookupDatasetByName",
        "tags": ["dataset"],
        "summary": "lookup dataset by project and name",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectOwner",
            "description": "project owner",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "project name",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "collectionName",
            "description": "dataset collection name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file": {
      "post": {
        "operationId": "uploadSnapshotFile",
        "tags": ["dataset"],
        "summary": "Sends file upload chunks",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "key",
            "schema": { "type": "string" },
            "description": "unique identifier for this upload session"
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "resumableChunkSize",
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "a unique key which identifies this upload session"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/test": {
      "get": {
        "operationId": "uploadSnapshotFileTest",
        "tags": ["dataset"],
        "summary": "Tests whether or not this chunk has already been sent",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/end/{uploadKey}": {
      "get": {
        "operationId": "endSnapshotUpload",
        "tags": ["dataset"],
        "summary": "Indicates the successful completion of the files upload in the UI",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "uploadKey",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto",
            "description": "the new snapshot"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/start": {
      "get": {
        "operationId": "startSnapshotUpload",
        "tags": ["dataset"],
        "summary": "initializes chunked file uploads for a dataset collection snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/session/{uploadKey}": {
      "get": {
        "operationId": "getSnapshotUploadSession",
        "tags": ["dataset"],
        "summary": "Tests whether or not an upload session exists",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "path",
            "name": "uploadKey",
            "schema": { "type": "string" },
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/snapshot/file/cancel/{uploadKey}": {
      "get": {
        "operationId": "cancelSnapshotUpload",
        "tags": ["dataset"],
        "summary": "indicates the cancellation of the chunked file uploads",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "uploadKey",
            "description": "Unique identifier for upload session",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}": {
      "post": {
        "operationId": "updateDataset",
        "tags": ["dataset"],
        "summary": "updates a dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.UpdateDatasetInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/archive": {
      "delete": {
        "operationId": "archiveDataset",
        "tags": ["dataset"],
        "summary": "archive a dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/{snapshotId}/files/{path}": {
      "get": {
        "operationId": "getSnapshotFiles",
        "tags": ["dataset"],
        "summary": "retrieves the files in a specified data set at the specified directory",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot id",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "path",
            "description": "Directory path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserViewModel"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/{dataSetId}/files": {
      "get": {
        "operationId": "getSnapshotFilesAtRoot",
        "tags": ["dataset"],
        "summary": "retrieves the files in a specified data set at the root directory",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "dataSetId",
            "description": "Id of the dataset",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserViewModel"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/{dataSetId}": {
      "delete": {
        "operationId": "deleteSnapshot",
        "tags": ["dataset"],
        "summary": "deletes the specified data set snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "dataSetId",
            "description": "Id of the dataset snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi": {
      "delete": {
        "operationId": "deleteMarkedSnapshots",
        "tags": ["dataset"],
        "summary": "deletes all marked for deletion snapshots for a dataset",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/imported": {
      "post": {
        "operationId": "addImportedProjectMount",
        "tags": ["dataset"],
        "summary": "add project mount",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for new dataset tag",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AddMountInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.MountConfigViewModel"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getProjectImportedMountSummary",
        "tags": ["dataset"],
        "summary": "gets imported project mounts",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/imported/{mountPath}": {
      "delete": {
        "operationId": "deleteProjectMount",
        "tags": ["dataset"],
        "summary": "delete project mount",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "mountPath",
            "description": "the location at which the data set mounts",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/mounts/{projectId}/local": {
      "get": {
        "operationId": "getProjectLocalMounts",
        "tags": ["dataset"],
        "summary": "gets local project mounts",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "the project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/run/{collectionId}": {
      "post": {
        "operationId": "createSnapshotWithRun",
        "tags": ["dataset"],
        "summary": "starts a run to create a new dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "collectionId",
            "description": "the collectionId id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for run",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateSnapshotWithRunInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetRun"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/workspace/{collectionId}": {
      "post": {
        "operationId": "createSnapshotWithWorkspace",
        "tags": ["dataset"],
        "summary": "launches a workspace to create a new dataset",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "collectionId",
            "description": "the collectionId id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for run",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.CreateSnapshotWithWorkspaceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DatasetWorkspace"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/configs/advanced/{projectId}": {
      "get": {
        "operationId": "getAdvancedDatasetConfigYamls",
        "tags": ["Datasets"],
        "summary": "get advanced data set configs yaml files and names available to the current user",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "DominoId of the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModels"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/limits/{projectId}": {
      "post": {
        "operationId": "setLimitOverride",
        "tags": ["dataset"],
        "summary": "add or update a dataset limit override for a project",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project to override dataset limits for",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the override",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.nucleus.dataset.ui.SetLimitOverrideInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/consumption/snapshot/{snapshotId}": {
      "get": {
        "operationId": "getMostRecentConsumedSnapshotResource",
        "tags": ["dataset"],
        "summary": "retrieve the most recent consumption information for a snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot to get consumption data for",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.ConsumedSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/collections/{datasetId}/project/{projectId}/snapshot": {
      "post": {
        "operationId": "createSnapshotFromScratchSpace",
        "tags": ["dataset"],
        "summary": "Promotes a scratch space into a dataset snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/project/{projectId}/scratchSpace": {
      "get": {
        "operationId": "getScratchSpaceOrDefault",
        "tags": ["dataset"],
        "summary": "Promotes a scratch space into a dataset snapshot",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetScratchSpaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/scratchspace/{projectId}/files/{path}": {
      "get": {
        "operationId": "getScratchSpaceFiles",
        "tags": ["dataset"],
        "summary": "Gets files in a subdirectory of a project's scratch space",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "path",
            "description": "Directory path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/scratchspace/{projectId}/files": {
      "get": {
        "operationId": "getScratchSpaceFilesAtRoot",
        "tags": ["dataset"],
        "summary": "Gets files in a subdirectory of a project's scratch space",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/scratchSpace/{scratchSpaceId}": {
      "delete": {
        "operationId": "deleteScratchSpace",
        "tags": ["dataset"],
        "summary": "Deletes a scratch space",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "scratchSpaceId",
            "description": "Id of the scratch space",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.dataset.api.DatasetScratchSpaceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetUi/project/{projectId}/canAddDataset": {
      "get": {
        "operationId": "canAddDataset",
        "tags": ["dataset"],
        "summary": "Determine if a dataset can be added to a project",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/{projectId}/shared/{datasetId}": {
      "post": {
        "operationId": "addSharedDatasetRwEntry",
        "tags": ["DatasetRw"],
        "summary": "Add shared dataset to project",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.SharedDatasetRwEntryDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "removeSharedDatasetRwEntry",
        "tags": ["DatasetRw"],
        "summary": "Removes shared dataset from project",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.SharedDatasetRwEntryDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/tag": {
      "post": {
        "operationId": "addTag",
        "tags": ["DatasetRw"],
        "summary": "Add tag to Snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Snapshot ID and tag name",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.AddTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/filetask/callback": {
      "post": {
        "operationId": "callbackFromFiletask",
        "tags": ["DatasetRw"],
        "summary": "Filetask callback with task status change",
        "parameters": [],
        "requestBody": {
          "description": "filetask update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FiletaskUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "String" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/canAddDataset/{projectId}": {
      "get": {
        "operationId": "canAddDataset",
        "tags": ["DatasetRw"],
        "summary": "Determines if dataset can be added to project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/cancel-request-to-copy": {
      "delete": {
        "operationId": "cancelRequestToCopyDataset",
        "tags": ["DatasetRw"],
        "summary": "Cancel Request to Copy Dataset",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/cancel-request-to-copy": {
      "delete": {
        "operationId": "cancelRequestToCopySnapshot",
        "tags": ["DatasetRw"],
        "summary": "Cancel Request to Copy Snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/cancel-request-to-delete": {
      "delete": {
        "operationId": "cancelRequestToDeleteDataset",
        "tags": ["DatasetRw"],
        "summary": "Cancel Request to Delete Dataset",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/cancel-request-to-delete": {
      "delete": {
        "operationId": "cancelRequestToDeleteSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Cancel Request to Delete Snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/cancel/{uploadKey}": {
      "get": {
        "operationId": "cancelSnapshotUpload",
        "tags": ["DatasetRw"],
        "summary": "Indicates the cancellation of the chunked file uploads",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "uploadKey",
            "description": "Unique identifier for upload session",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw": {
      "post": {
        "operationId": "createDataset",
        "tags": ["DatasetRw"],
        "summary": "Create dataset",
        "parameters": [],
        "requestBody": {
          "description": "dataset spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{snapshotId}/create": {
      "post": {
        "operationId": "createDatasetFromSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Create dataset from snapshot",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID to create dataset from",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "name",
            "description": "name of dataset",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "description",
            "description": "description of dataset",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot": {
      "post": {
        "operationId": "createSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Create snapshot",
        "parameters": [],
        "requestBody": {
          "description": "dataset snapshot spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.CreateSnapshotRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/marked-datasets": {
      "delete": {
        "operationId": "deleteMarkedDatasets",
        "tags": ["DatasetRw"],
        "summary": "Delete Marked Datasets",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}": {
      "delete": {
        "operationId": "deleteDataset",
        "tags": ["DatasetRw"],
        "summary": "Delete Dataset",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateDataset",
        "tags": ["DatasetRw"],
        "summary": "Update Dataset metadata",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/files": {
      "delete": {
        "operationId": "deleteFiles",
        "tags": ["DatasetRw"],
        "summary": "Deletes files from snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FilesToDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/marked-snapshots": {
      "delete": {
        "operationId": "deleteMarkedSnapshots",
        "tags": ["DatasetRw"],
        "summary": "Delete Marked Snapshots",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}": {
      "get": {
        "operationId": "getSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Retrieves the specified snapshot",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotSummaryDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Delete Snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateSnapshotStatus",
        "tags": ["DatasetRw"],
        "summary": "Update a dataset snapshot's status",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the dataset snapshot to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateSnapshotStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/end/{uploadKey}": {
      "get": {
        "operationId": "endSnapshotUpload",
        "tags": ["DatasetRw"],
        "summary": "Indicates the successful completion of the files upload in the UI",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "uploadKey",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "the source path of the file tree was traversed to upload files",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/active/number": {
      "get": {
        "operationId": "getActiveSnapshotByNumber",
        "tags": ["DatasetRw"],
        "summary": "Get active snapshot by snapshot number",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "datasetId",
            "description": "Dataset Id",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "snapshotNumber",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/copy-estimate": {
      "get": {
        "operationId": "getCopyEstimate",
        "tags": ["DatasetRw"],
        "summary": "Get time estimate of copy task",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot Id",
            "required": true
          },
          {
            "schema": { "type": "array", "items": { "type": "string" } },
            "in": "query",
            "name": "relativeFilePaths",
            "description": "the file names/folder names that are selected to be copied",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwCopyTimeEstimateDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/copy-progress": {
      "get": {
        "operationId": "getCopyProgress",
        "tags": ["DatasetRw"],
        "summary": "Get progress of copy task",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFiletaskCopyUpdateDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}": {
      "get": {
        "operationId": "getDataset",
        "tags": ["DatasetRw"],
        "summary": "Lookup dataset by id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/name/{datasetName}": {
      "get": {
        "operationId": "getActiveDatasetByName",
        "tags": ["DatasetRw"],
        "summary": "Lookup dataset by project and name",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectOwner",
            "description": "project owner",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "project name",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "datasetName",
            "description": "dataset name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDetailsDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/fromRun/{runId}": {
      "get": {
        "operationId": "getDatasetDetailsByRun",
        "tags": ["DatasetRw"],
        "summary": "Retrieve datasets from run",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "project Id",
            "required": true
          },
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets": {
      "get": {
        "operationId": "getDatasets",
        "tags": ["DatasetRw"],
        "summary": "Get Datasets",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "query",
            "name": "projectId",
            "description": "Project ID filter",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/summary/all": {
      "get": {
        "operationId": "getDatasetSummaries",
        "tags": ["DatasetRw"],
        "summary": "Get dataset summaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSummaryDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/mountable-datasets": {
      "get": {
        "operationId": "getMountableDatasets",
        "tags": ["DatasetRw"],
        "summary": "Gets mountable dataset collections",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "project ID",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "array",
              "items": { "type": "string" }
            },
            "in": "query",
            "name": "ignoreProjects",
            "description": "Ids of projects that should have their datasets excluded from being returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshots/{datasetId}": {
      "get": {
        "operationId": "getSnapshots",
        "tags": ["DatasetRw"],
        "summary": "Get snapshots in dataset",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/size/{snapshotId}": {
      "get": {
        "operationId": "getSnapshotSize",
        "tags": ["DatasetRw"],
        "summary": "Updates and retrieves the size of the snapshot",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Id of the snapshot",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "number" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshots/summary/{datasetId}": {
      "get": {
        "operationId": "getSnapshotSummaries",
        "tags": ["DatasetRw"],
        "summary": "Get snapshot summaries",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotSummaryDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/admin/summary": {
      "get": {
        "operationId": "getSnapshotAdminSummaries",
        "tags": ["DatasetRw"],
        "summary": "Get snapshot admin summaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotAdminSummaryDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshots/project/{projectId}": {
      "get": {
        "operationId": "getSnapshotsByProject",
        "tags": ["DatasetRw"],
        "summary": "Get all snapshots by project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/run/{runId}": {
      "get": {
        "operationId": "getSnapshotUsageByRun",
        "tags": ["DatasetRw"],
        "summary": "Get snapshots used by run",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "projectId",
            "description": "project ID",
            "required": true
          },
          {
            "in": "path",
            "name": "runId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/files/{snapshotId}": {
      "get": {
        "operationId": "getFilesInSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Get snapshot files at specified path",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "snapshot ID",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "path",
            "description": "subPath to get files at",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotFilesViewDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/upload/{uploadKey}": {
      "get": {
        "operationId": "getSnapshotUploadSession",
        "tags": ["DatasetRw"],
        "summary": "Get snapshot upload session",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwUploadSessionDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uploadKey",
            "schema": { "type": "string" },
            "required": true
          }
        ]
      }
    },
    "/datasetrw/mounts/{projectId}/shared": {
      "get": {
        "operationId": "getSharedDatasetProjectMounts",
        "tags": ["DatasetRw"],
        "summary": "Get shared mounts in a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/mounts/{projectId}/local": {
      "get": {
        "operationId": "getLocalDatasetProjectMounts",
        "tags": ["DatasetRw"],
        "summary": "Get local mounts in a project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/snapshot/limit": {
      "get": {
        "operationId": "getMaxNumberOfSnapshotsPerDataset",
        "tags": ["DatasetRw"],
        "summary": "Get max number of snapshots per dataset",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "integer" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/active-readonly-count": {
      "get": {
        "operationId": "getNumberOfActiveReadOnlySnapshots",
        "tags": ["DatasetRw"],
        "summary": "Get number of active snapshots",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "integer" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/can-cancel-delete": {
      "get": {
        "operationId": "isAllowedToCancelDeleteDataset",
        "tags": ["DatasetRw"],
        "summary": "Determines if request to delete a dataset can be cancelled",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/{snapshotId}/can-cancel-delete": {
      "get": {
        "operationId": "isAllowedToCancelDeleteSnapshot",
        "tags": ["DatasetRw"],
        "summary": "Determines if request to delete a snapshot can be cancelled",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "snapshotId",
            "description": "Snapshot ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/principal/{projectId}/manage": {
      "get": {
        "operationId": "isAllowedToManageDatasetRw",
        "tags": ["DatasetRw"],
        "summary": "Determines if principal is authorized to manage dataset rw",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/file/test": {
      "get": {
        "operationId": "isChunkAvailable",
        "tags": ["DatasetRw"],
        "summary": "Returns whether or not this chunk has already been sent",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/limit/{projectId}": {
      "get": {
        "operationId": "isOverDatasetLimit",
        "tags": ["DatasetRw"],
        "summary": "Determines if dataset limit per project has been surpassed",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/snapshot/limit/{projectId}/{datasetId}": {
      "get": {
        "operationId": "isAtSnapshotLimit",
        "tags": ["DatasetRw"],
        "summary": "Determines if snapshot limit per dataset has been surpassed",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/tag/{tagName}": {
      "delete": {
        "operationId": "removeTag",
        "tags": ["DatasetRw"],
        "summary": "Remove a tag from Snapshot",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset ID",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "tagName",
            "description": "Name of tag",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwViewDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/limit/{projectId}": {
      "post": {
        "operationId": "setLimitOverride",
        "tags": ["DatasetRw"],
        "summary": "Set project-level dataset limit override",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Id of the project",
            "required": true
          },
          {
            "in": "query",
            "name": "ignoreLimit",
            "schema": { "type": "boolean" },
            "required": true
          },
          {
            "in": "query",
            "name": "ignoreLimits",
            "schema": { "type": "boolean" },
            "description": "boolean for ignore limit option"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file/start": {
      "post": {
        "operationId": "startSnapshotUpload",
        "tags": ["DatasetRw"],
        "summary": "Initializes chunked file uploads for a dataset collection snapshot",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Id of the collection of datasets",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.FileCollisionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/dataset/{datasetId}/status": {
      "put": {
        "operationId": "updateDatasetStatus",
        "tags": ["DatasetRw"],
        "summary": "Update a dataset's status",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "description": "Dataset Id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information describing the new status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasetrw.web.UpdateDatasetStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasetrw/datasets/{datasetId}/snapshot/file": {
      "post": {
        "operationId": "uploadSnapshotFile",
        "tags": ["DatasetRw"],
        "summary": "Sends file upload chunks",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datasetId",
            "required": true
          },
          {
            "in": "query",
            "name": "resumableChunkNumber",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableTotalChunks",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableIdentifier",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "key",
            "schema": { "type": "string" },
            "description": "unique identifier for this upload session"
          },
          {
            "in": "query",
            "name": "resumableRelativePath",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "resumableChunkSize",
            "schema": { "type": "integer" }
          },
          {
            "in": "query",
            "name": "resumableCurrentChunkSize",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": { "schema": { "type": "string" } }
            },
            "description": "a unique key which identifies this upload session"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount": {
      "post": {
        "operationId": "registerDataMount",
        "tags": ["DataMount"],
        "summary": "Register data mount",
        "parameters": [],
        "requestBody": {
          "description": "data mount spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.CreateDataMountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/isMountPathValid": {
      "get": {
        "operationId": "isMountPathValid",
        "tags": ["DataMount"],
        "summary": "Determine if mount path contains unique and non reserved words",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "mountPath",
            "description": "mount path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/status": {
      "post": {
        "operationId": "checkAndUpdateDataMountStatus",
        "tags": ["DataMount"],
        "summary": "Check and update external data volume status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.UpdateDataMountStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "408": { "$ref": "#/components/responses/Timeout" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/all": {
      "get": {
        "operationId": "getAllRegisteredDataMounts",
        "tags": ["DataMount"],
        "summary": "Get all registered datamounts",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/pvcs/names": {
      "post": {
        "operationId": "findDataMountsByPvcNames",
        "tags": ["DataMount"],
        "summary": "Find data mounts by pvc names",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.FindByPvcNamesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/{datamountId}": {
      "post": {
        "operationId": "updateDataMount",
        "tags": ["DataMount"],
        "summary": "Update data mount",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datamountId",
            "description": "registered data mount id",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datamount.web.UpdateDataMountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getDataMount",
        "tags": ["DataMount"],
        "summary": "Get data mount",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datamountId",
            "description": "registered data mount id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "unregisterDataMount",
        "tags": ["DataMount"],
        "summary": "Unregister data mount",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "datamountId",
            "description": "data mount id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/projects/{projectId}": {
      "post": {
        "operationId": "addProject",
        "tags": ["DataMount"],
        "summary": "Add project to data mounts",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id to add to data mounts",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "datamountIds",
            "description": "data mount id's to add to the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "findDataMountsByProject",
        "tags": ["DataMount"],
        "summary": "Find data mounts by project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "removeProject",
        "tags": ["DataMount"],
        "summary": "Remove project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project id to remove from data mount",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "datamountId",
            "description": "data mount id from which to remove the project",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/users/{userId}": {
      "get": {
        "operationId": "findDataMountsByUser",
        "tags": ["DataMount"],
        "summary": "Find data mounts by user",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "userId",
            "description": "user id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/projects/inaccessible/{projectId}": {
      "get": {
        "operationId": "getInaccessibleDataMountsByUser",
        "tags": ["DataMount"],
        "summary": "Find inaccessible data mounts to user for given project",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/paths/{projectId}": {
      "get": {
        "operationId": "getRootPathForProject",
        "tags": ["DataMount"],
        "summary": "Get data mount root path",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "project id for the datamount",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/pvcs/all": {
      "get": {
        "operationId": "getAllPvcsByType",
        "tags": ["DataMount"],
        "summary": "Get all pvcs information as wrapped in dummy datamount dtos",
        "parameters": [
          {
            "schema": { "type": "string", "enum": ["Nfs", "Smb", "Efs"] },
            "in": "query",
            "name": "volumeType",
            "description": "flag to specify volumeType",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datamount/pvcs/available": {
      "get": {
        "operationId": "getAvailablePvcsByType",
        "tags": ["DataMount"],
        "summary": "Get available pvcs information as wrapped in dummy datamount dtos",
        "parameters": [
          {
            "schema": { "type": "string", "enum": ["Nfs", "Smb", "Efs"] },
            "in": "query",
            "name": "volumeType",
            "description": "flag to specify volumeType",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datamount.api.DataMountDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource": {
      "post": {
        "operationId": "create",
        "tags": ["DataSource"],
        "summary": "Create data source",
        "parameters": [],
        "requestBody": {
          "description": "data source spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.CreateDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/users": {
      "post": {
        "operationId": "addUsers",
        "tags": ["DataSource"],
        "summary": "Add users to data source",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "userIds",
            "description": "the ids of the users to be added",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "removeUsers",
        "tags": ["DataSource"],
        "summary": "Remove users from data source",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": {
              "type": "array",
              "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
            },
            "in": "query",
            "name": "userIds",
            "description": "the ids of the users to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/projects/{projectId}": {
      "post": {
        "operationId": "addProject",
        "tags": ["DataSource"],
        "summary": "Add project to data source",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "removeProject",
        "tags": ["DataSource"],
        "summary": "Remove project from data source",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/name/check/{name}": {
      "get": {
        "operationId": "checkValidDataSourceName",
        "tags": ["DataSource"],
        "summary": "Check whether name is valid and unique",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "name",
            "description": "string",
            "required": true
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}": {
      "get": {
        "operationId": "getDataSource",
        "tags": ["DataSource"],
        "summary": "Get data source",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "operationId": "deleteDataSource",
        "tags": ["DataSource"],
        "summary": "Delete data source",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/projects/{projectId}": {
      "get": {
        "operationId": "getDataSourcesByProject",
        "tags": ["DataSource"],
        "summary": "Get data sources by project",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/name/{name}": {
      "get": {
        "operationId": "getDataSourceByName",
        "tags": ["DataSource"],
        "summary": "Get data source by name",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "name",
            "description": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/user/{userId}": {
      "get": {
        "operationId": "getDataSourcesByUser",
        "tags": ["DataSource"],
        "summary": "Get data sources by user",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "userId",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/dataSources/all": {
      "get": {
        "operationId": "getAllDataSources",
        "tags": ["DataSource"],
        "summary": "Get all active data sources",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/config": {
      "get": {
        "operationId": "getDataSourceConfig",
        "tags": ["DataSource"],
        "summary": "Get data source config",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceConfigDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "operationId": "updateDataSourceConfig",
        "tags": ["DataSource"],
        "summary": "Update data source config",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated data source spec with config info to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/credential": {
      "get": {
        "operationId": "getVisibleCredentials",
        "tags": ["DataSource"],
        "summary": "Get visible credentials",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/config/all": {
      "get": {
        "operationId": "getDataSourceConfigs",
        "tags": ["DataSource"],
        "summary": "Get config metadata for all data source types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.datasource.api.DataSourceTypeConfigMetadataDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/config/proxy": {
      "get": {
        "operationId": "getDataSourceConfigForProxy",
        "tags": ["DataSource"],
        "summary": "Get data source config object for proxy service",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID as string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceProxyConfigDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/authentication-status": {
      "get": {
        "operationId": "getAuthenticationStatus",
        "tags": ["DataSource"],
        "summary": "Get authentication status for data source",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/connection/string": {
      "get": {
        "operationId": "getConnectionSnippet",
        "tags": ["DataSource"],
        "summary": "Get code snippet/connection string",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "dataSourceName",
            "description": "The name of the data source",
            "required": true
          },
          {
            "schema": { "type": "string", "enum": ["Python"] },
            "in": "query",
            "name": "dataSourceLanguage",
            "description": "The language of the desired snippet",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/connection": {
      "post": {
        "operationId": "checkDataSourceConnection",
        "tags": ["DataSource"],
        "summary": "Check for valid authenticated connection to data source",
        "parameters": [],
        "requestBody": {
          "description": "data source spec to check for connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.CheckDataSourceConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/project/{projectId}/notification": {
      "get": {
        "operationId": "shouldNotificationBubbleAppear",
        "tags": ["DataSource"],
        "summary": "Get whether notification bubble in workspace pane appears (new datasources added to project in last week)",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "projectId",
            "description": "Project Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/transfer/{newOwner}": {
      "post": {
        "operationId": "transferOwnership",
        "tags": ["DataSource"],
        "summary": "Transfer data source ownership",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          },
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "newOwner",
            "description": "new owner Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/metadata": {
      "put": {
        "operationId": "updateDataSourceMetadata",
        "tags": ["DataSource"],
        "summary": "Update data source metadata",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "updated data source metadata spec to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/credentials": {
      "put": {
        "operationId": "updateDataSourceCredentials",
        "tags": ["DataSource"],
        "summary": "Add/update data source credentials",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "dataSourceId",
            "description": "active dataSource id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "added data source credentials to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.datasource.web.UpdateDataSourceCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/datasource/{dataSourceId}/lastUsed": {
      "put": {
        "operationId": "updateLastUpdatedInfo",
        "tags": ["DataSource"],
        "summary": "Update last updated info - when data source was last used in run",
        "parameters": [
          {
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
            "in": "path",
            "name": "dataSourceId",
            "description": "Data source Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.datasource.api.DataSourceDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential": {
      "post": {
        "operationId": "create",
        "tags": ["DataSourceCredential"],
        "summary": "Create data source credential",
        "parameters": [],
        "requestBody": {
          "description": "data source credential to persist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.credential.web.CreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential/visible": {
      "get": {
        "operationId": "getVisibleCredentials",
        "tags": ["DataSourceCredential"],
        "summary": "Get all visible credentials that match filter",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "dataSourceId",
            "description": "registered data source id",
            "required": false
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "userId",
            "description": "id of owner or user credential has been shared with",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["Individual", "Shared"]
            },
            "in": "query",
            "name": "credentialType",
            "description": "credential type",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential/full": {
      "get": {
        "operationId": "getFullCredentials",
        "tags": ["DataSourceCredential"],
        "summary": "Get all credentials that match filter",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "dataSourceId",
            "description": "registered data source id",
            "required": false
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "userId",
            "description": "id of owner or user credential has been shared with",
            "required": false
          },
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["Individual", "Shared"]
            },
            "in": "query",
            "name": "credentialType",
            "description": "credential type",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.credential.api.FullDataSourceCredentialDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential/access/{id}": {
      "post": {
        "operationId": "updateAccess",
        "tags": ["DataSourceCredential"],
        "summary": "Update access of data source credential",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "id",
            "description": "registered data source credential id",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.credential.web.UpdateAccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential/credential/{id}": {
      "post": {
        "operationId": "updateCredential",
        "tags": ["DataSourceCredential"],
        "summary": "Update credentials used to access data source",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "id",
            "description": "registered data source credential id",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.credential.web.UpdateCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/credential/{id}": {
      "delete": {
        "operationId": "deleteCredential",
        "tags": ["DataSourceCredential"],
        "summary": "Delete data source credential",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "id",
            "description": "data source credential id to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.credential.api.VisibleDataSourceCredentialDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/tags": {
      "get": {
        "operationId": "list",
        "tags": ["Tags"],
        "summary": "Retrieves Tags",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "query",
            "description": "Optional filter for a tag by name",
            "required": false
          }
        ],
        "responses": {
          "400": { "$ref": "#/components/responses/BadRequest" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/frontend/snippets": {
      "get": {
        "operationId": "list",
        "tags": ["Frontend"],
        "summary": "Retrieves snippets for the frontend",
        "parameters": [],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "string" } }
              }
            }
          }
        }
      }
    },
    "/modelManager/{modelVersionId}/logs": {
      "get": {
        "operationId": "downloadLogs",
        "tags": ["Model Manager"],
        "summary": "download logs for a model for a given time range",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "startMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          },
          {
            "in": "query",
            "name": "endMillis",
            "schema": { "format": "int64", "type": "integer" },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/x-ndjson": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelManager/recordInvocation": {
      "post": {
        "operationId": "recordInvocation",
        "tags": ["ModelManager"],
        "summary": "Record invocation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "invocation recording request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.RecordInvocation"
              }
            }
          }
        },
        "responses": { "200": { "description": "success" } }
      }
    },
    "/modelManager/{modelVersionId}/getTimeSeries": {
      "get": {
        "operationId": "getTimeSeriesForModelApiInvocations",
        "tags": ["ModelManager"],
        "summary": "Get timeseries of data for model invocation",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          {
            "in": "query",
            "name": "startTime",
            "schema": { "type": "number" },
            "required": true,
            "description": "start time to get the timeseries"
          },
          {
            "in": "query",
            "name": "endTime",
            "schema": { "type": "number" },
            "required": true,
            "description": "end time to get the timeseries"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelApiAggregatedUsageStatistics"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelManager/{modelVersionId}/getLast24HoursInvocationCounts": {
      "get": {
        "operationId": "getLast24HoursInvocationCount",
        "tags": ["ModelManager"],
        "summary": "Get last 24 hour invocation counts for model apis",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelApiLast24HourInvocationCount"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        },
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ]
      }
    },
    "/modelManager/{modelVersionId}/linkModeltoGoal": {
      "post": {
        "operationId": "linkModelToGoal",
        "tags": ["ModelManager"],
        "summary": "Link model to a goal",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "modelVersionId",
            "description": "Domino id of the model version",
            "required": true
          }
        ],
        "requestBody": {
          "description": "JSON object with information for linking model to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.LinkmodelToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelGoal"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/modelManager/{modelVersionId}/unlinkModelFromGoal": {
      "post": {
        "operationId": "unlinkModelFromGoal",
        "tags": ["ModelManager"],
        "summary": "Unlink model to a goal",
        "parameters": [
          {
            "in": "path",
            "name": "modelVersionId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "requestBody": {
          "description": "JSON object with information for unlinking model to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.modelmanager.web.UnlinkmodelFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.modelmanager.api.ModelGoal"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/runs/recent": {
      "get": {
        "operationId": "listRecentRuns",
        "tags": ["Runs"],
        "summary": "retrieves list of active and recently completed runs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.run.interfaces.RunMonolithDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/runs": {
      "post": {
        "operationId": "v4Start",
        "tags": ["Runs"],
        "summary": "Starts a new Run",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.common.run.interfaces.NewRunDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.run.interfaces.RunDTO"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/scheduledruns": {
      "get": {
        "operationId": "listScheduledRuns",
        "tags": ["Scheduled Runs"],
        "summary": "retrieves list of scheduled run definitions for a given user id",
        "parameters": [
          { "in": "query", "name": "userId", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.scheduledrun.api.LegacyScheduledRunDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/executions/{executionId}/events": {
      "get": {
        "operationId": "getExecutionEvents",
        "tags": ["Execution Events"],
        "summary": "Retrieves a list of execution events for a given execution id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "pageSize",
            "description": "Number of events to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "pageNumber",
            "description": "Page number to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "sortOrder",
            "description": "Sort order (1 for ascending, -1 for descending)",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "sortBy",
            "description": "Field to sort by",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "schema": { "nullable": true, "type": "string" },
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "excludeIgnoredEvents",
            "description": "If true, do not return events with Ignored status",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "excludeIgnoredHeartbeats",
            "description": "If true, do not return heartbeats with Ignored status",
            "required": false
          },
          {
            "schema": { "default": true, "nullable": true, "type": "string" },
            "in": "query",
            "name": "inline",
            "description": "If true, open the execution event history JSON payload in the browser, else download a file called `domino_event_log_[execution id].json`.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.computegrid.ExecutionEventDto"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/executions/{executionId}/events.csv": {
      "get": {
        "operationId": "getExecutionEventsCsv",
        "tags": ["Execution Events"],
        "summary": "Retrieves a list of execution events for a given execution id in csv format",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "pageSize",
            "description": "Number of events to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "pageNumber",
            "description": "Page number to fetch",
            "required": false
          },
          {
            "schema": { "nullable": true, "format": "int32", "type": "number" },
            "in": "query",
            "name": "sortOrder",
            "description": "Sort order (1 for ascending, -1 for descending)",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "sortBy",
            "description": "Field to sort by",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "schema": { "nullable": true, "type": "string" },
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "excludeIgnoredEvents",
            "description": "If true, do not return events with Ignored status",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "excludeIgnoredHeartbeats",
            "description": "If true, do not return heartbeats with Ignored status",
            "required": false
          },
          {
            "schema": { "default": true, "nullable": true, "type": "string" },
            "in": "query",
            "name": "inline",
            "description": "If true, open the file in the browser, else download a file called `domino_event_log_[execution id].csv`.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/executions/{executionId}/metrics/{metricName}/trace": {
      "post": {
        "operationId": "traceExecution",
        "tags": ["Execution Events"],
        "summary": "Starts (or ends) an execution trace event for a given execution id",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "metricName",
            "description": "Metric name",
            "required": true
          },
          {
            "schema": { "default": 0, "format": "int64", "type": "integer" },
            "in": "query",
            "name": "epochMillisOrZero",
            "description": "time in milliseconds from epoch (UNIX timestamp) or 0 to use server current time",
            "required": false
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/executions/{executionId}/metrics/{metricName}/increment": {
      "post": {
        "operationId": "incrementExecutionCounter",
        "tags": ["Execution Events"],
        "summary": "Increments an execution counter event for a given execution id (creates if missing) by 1",
        "parameters": [
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "path",
            "name": "executionId",
            "description": "Execution Id",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "metricName",
            "description": "Metric name",
            "required": true
          },
          {
            "schema": { "default": 0, "format": "int64", "type": "integer" },
            "in": "query",
            "name": "epochMillisOrZero",
            "description": "time in milliseconds from epoch (UNIX timestamp) or 0 to use server current time",
            "required": false
          },
          {
            "schema": { "default": 1, "format": "int32", "type": "integer" },
            "in": "query",
            "name": "count",
            "description": "count to increase counter by (defaults to 1)",
            "required": false
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/search/{projectId}": {
      "post": {
        "operationId": "fileSearch",
        "tags": ["Files"],
        "summary": "Search for files in a project by matching on path with string queries",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectId",
            "description": "Project in which to look for files",
            "required": true
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "required": false
          }
        ],
        "requestBody": {
          "description": "JSON object with the search query",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.interface.FileSearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileMatchesDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/comment": {
      "post": {
        "operationId": "addFileComment",
        "tags": ["Files"],
        "summary": "Create a File Comment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to comment on the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.CreateFileComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "get": {
        "operationId": "getFileCommentThread",
        "tags": ["Files"],
        "summary": "Get file comments",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string" },
            "description": "Project Id to which the file belongs"
          },
          {
            "in": "query",
            "name": "fileName",
            "required": true,
            "schema": { "type": "string" },
            "description": "file name to add the comment to"
          },
          {
            "in": "query",
            "name": "commitId",
            "required": true,
            "schema": { "type": "string" },
            "description": "commit id of the file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.CommentThread"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/comment/archive": {
      "post": {
        "operationId": "archiveFileComment",
        "tags": ["Files"],
        "summary": "Archive a File Comment",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to comment on the file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.ArchiveFileComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.Comment"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/linkToGoal": {
      "post": {
        "operationId": "linkFileToGoal",
        "tags": ["Files"],
        "summary": "Link a file to a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to link file to a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.LinkFileToGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/unlinkFromGoal": {
      "post": {
        "operationId": "unlinkFileFromGoal",
        "tags": ["Files"],
        "summary": "Unlink a file from a goal",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to unlink file from a goal",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.UnlinkFileFromGoal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.FileGoal"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/fullDelete": {
      "post": {
        "operationId": "fullDelete",
        "tags": ["Files"],
        "summary": "Full delete a file in a project starting at a commit",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to delete a file permanently",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FullDeleteSpecification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.DeletePropsDto"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/fullyDeleted": {
      "get": {
        "operationId": "fullyDeleted",
        "tags": ["Files"],
        "summary": "Check permanent deletion status of a file in a project starting at a commit",
        "parameters": [
          {
            "in": "query",
            "name": "filePath",
            "schema": { "type": "string" },
            "required": true,
            "description": "path to file"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "ID of the project the file is in"
          },
          {
            "in": "query",
            "name": "commitId",
            "schema": { "type": "string" },
            "required": true,
            "description": "ID of the commit for this file"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/domino.files.interface.DeletePropsDto"
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/removeFile": {
      "post": {
        "operationId": "removeFile",
        "tags": ["Files"],
        "summary": "Git remove single file or directory",
        "parameters": [],
        "requestBody": {
          "description": "JSON object with information to remove this file or direcotyr",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FileOrFolderToRemove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/removeFiles": {
      "post": {
        "operationId": "removeFiles",
        "tags": ["Files"],
        "summary": "Remove many files and/or directories",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FilesAndFoldersToRemove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/moveFileOrFolder": {
      "post": {
        "operationId": "moveFileOrFolder",
        "tags": ["Files"],
        "summary": "Move a file or a folder from one path to another",
        "parameters": [],
        "requestBody": {
          "description": "What to move and what it is",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domino.files.web.FileOrFolderToMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/{projectId}/readme": {
      "get": {
        "operationId": "getProjectReadme",
        "tags": ["Files"],
        "summary": "Get project readme file",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.files.interface.ProjectReadmeFile"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/files/{projectId}/commits": {
      "get": {
        "operationId": "getAllCommitsForProject",
        "tags": ["Files"],
        "summary": "Get all commits for a Project",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.files.interface.CommitInfo"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/metricsTesting/generateMetrics": {
      "post": {
        "operationId": "generateMetrics",
        "tags": ["Metrics"],
        "summary": "generate application metrics for testing",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric to generate",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "count",
            "description": "The number of this metric to generate",
            "required": true
          },
          {
            "schema": { "type": "boolean" },
            "in": "query",
            "name": "unique",
            "description": "Whether to make each instance of this metric unique",
            "required": true
          },
          {
            "schema": { "format": "int32", "type": "integer" },
            "in": "query",
            "name": "dataPoints",
            "description": "How many data points to store in this metric (e.g. a histogram of $dataPoints values)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/metricsTesting/countMetrics": {
      "get": {
        "operationId": "countMetrics",
        "tags": ["Metrics"],
        "summary": "check how many metrics are in the application",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["Gauge", "Counter", "Timer", "Histogram"]
            },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric you want to count",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": { "schema": { "type": "integer" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/metricsTesting/clearRegistry": {
      "post": {
        "operationId": "clearRegistry",
        "tags": ["Metrics"],
        "summary": "Remove metrics from the application",
        "parameters": [
          {
            "schema": {
              "nullable": true,
              "type": "string",
              "enum": ["Gauge", "Counter", "Timer", "Histogram"]
            },
            "in": "query",
            "name": "metricType",
            "description": "The type of metric you want to count",
            "required": false
          }
        ],
        "responses": {
          "200": { "description": "success" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/gitProviders/metadata/capabilities": {
      "get": {
        "operationId": "getRepoTypeCapabilities",
        "tags": ["Git", "Metadata"],
        "summary": "retrieves repository capabilities",
        "parameters": [
          {
            "schema": {
              "type": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve capabilities for",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "repoUri",
            "description": "uri of repository to retrieve capabilities for",
            "required": true
          },
          {
            "schema": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential being used to access the repository or none if not using credentials",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.gitproviders.api.GetRepoTypeCapabilitiesApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gitProviders/metadata/owners": {
      "get": {
        "operationId": "getPotentialRepoOwners",
        "tags": ["Git", "Metadata"],
        "summary": "retrieves potential owners for a given git service provider and credential id",
        "parameters": [
          {
            "schema": {
              "type": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve owners for",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "#/components/schemas/domino.common.DominoId"
            },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential to retrieve owners for",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.gitproviders.api.GetOwnersApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gitProviders/metadata/repositories": {
      "get": {
        "operationId": "getPotentialReposForOwner",
        "tags": ["Git", "Metadata"],
        "summary": "retrieves potential repos for a given git service provider, credential id, owner, and name query",
        "parameters": [
          {
            "schema": {
              "type": "#/components/schemas/domino.repoman.domain.GitProviderName",
              "enum": [
                "github",
                "gitlab",
                "githubEnterprise",
                "unknown",
                "gitlabEnterprise",
                "bitbucket",
                "bitbucketServer"
              ]
            },
            "in": "query",
            "name": "serviceProvider",
            "description": "git service provider to retrieve repos for",
            "required": true
          },
          {
            "schema": {
              "pattern": "^[0-9a-f]{24}$",
              "type": "#/components/schemas/domino.common.DominoId"
            },
            "in": "query",
            "name": "credentialId",
            "description": "id of credential to retrieve repos for",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "userOwner",
            "description": "user to retrieve repos for",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "orgOwner",
            "description": "organization to retrieve repos for",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "nameQuery",
            "description": "search query to retrieve repos for",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.gitproviders.api.GetReposApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/projects": {
      "get": {
        "operationId": "list",
        "tags": ["Gateway", "Projects"],
        "summary": "Retrieves projects for the Project List UI, ordered from most to least recently updated",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["Owned", "Collaborating", "Suggested", "Popular"]
            },
            "in": "query",
            "name": "relationship",
            "description": "The relationship between the current user and the projects to be returned",
            "required": true
          },
          {
            "schema": { "default": true, "type": "boolean" },
            "in": "query",
            "name": "showCompleted",
            "description": "include projects that are completed",
            "required": false
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewaySummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gateway/projects/executingResources/{ownerName}/{projectName}": {
      "get": {
        "operationId": "getExecutingRunsForProject",
        "tags": ["Gateway", "Projects"],
        "summary": "Gets the executing runs grouped by type for this project",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "projectName",
            "description": "the project's name",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "ownerName",
            "description": "the project owner's name",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayExecutingRunsByType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/gateway/projects/findProjectByOwnerAndName": {
      "get": {
        "operationId": "findProjectByOwnerAndName",
        "tags": ["Gateway"],
        "summary": "Retrieves a project for the Project Overview UI",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "ownerName",
            "description": "Username of the Owner",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "Name of the Project",
            "required": true
          }
        ],
        "responses": {
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayOverview"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/search": {
      "get": {
        "operationId": "search",
        "tags": ["Gateway", "Search"],
        "summary": "searches for the specified terms in the relevant areas with a limit on the number of results",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "query",
            "description": "Search term.",
            "required": true
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "area",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domino.common.gateway.search.SearchResultGatewayDTO"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/gateway/runs/getByBatchId": {
      "get": {
        "operationId": "listToJson",
        "tags": ["Gateway", "Runs"],
        "summary": "API to batch extract Runs data for import into a 3rd party tool",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "batchId",
            "description": "Starting id of the batch query",
            "required": true
          },
          {
            "schema": {
              "nullable": true,
              "format": "int32",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "The desired size of the batch to be returned",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.common.gateway.runs.RunsGatewaySequence"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/gateway/users/projectsDependencyGraph": {
      "get": {
        "operationId": "projectsDependencyGraph",
        "tags": ["Gateway", "Users"],
        "summary": "Retrieves projects dependency graph for a user, and optionally for a specific project",
        "parameters": [
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "ownerUsername",
            "description": "Owner username of the project, if dependency graph is being requested for a specific project.",
            "required": false
          },
          {
            "schema": { "nullable": true, "type": "string" },
            "in": "query",
            "name": "projectName",
            "description": "Project name for which a dependency graph is being requested. When not provided, the dependency graph is for all projects for the current user.",
            "required": false
          }
        ],
        "responses": {
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalError" },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domino.nucleus.gateway.users.models.ProjectsDependencyGraph"
                }
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.0.0",
  "info": {
    "description": "This API is going to provide access to all the Domino functions available in the user interface.\nTo authenticate your requests, include your API Key (which you can find on your account page) with the header X-Domino-Api-Key.\n",
    "title": "Domino Data Lab API v4",
    "version": "4.0.0"
  },
  "components": {
    "schemas": {
      "domino.activity.api.ProjectGoalModelLinkActivityMetadata": {
        "properties": {
          "action": { "type": "string", "enum": ["added", "removed"] },
          "modelId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "modelVersion": { "type": "integer", "format": "int32" },
          "modelVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectGoalTitle": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": [
          "action",
          "modelId",
          "modelVersion",
          "modelVersionId",
          "projectGoalTitle",
          "name"
        ]
      },
      "domino.workspace.api.WorkspaceGlobalSettingsDto": {
        "properties": {
          "stopToDeleteDelaySeconds": { "type": "integer", "format": "int32" },
          "perUserQuota": { "type": "integer", "format": "int32" }
        },
        "required": ["stopToDeleteDelaySeconds", "perUserQuota"]
      },
      "domino.jobs.web.UpdateJobName": {
        "properties": { "name": { "type": "string" } },
        "required": ["name"]
      },
      "domino.workspace.web.StopClassicWorkspaceRequest": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitMessage": { "type": "string", "nullable": true }
        },
        "required": ["workspaceId"]
      },
      "domino.credential.api.FullCredentialDto": {
        "properties": {
          "visibleCredentials": {
            "type": "collection.immutable.map[string,string]"
          },
          "secretCredentials": {
            "type": "collection.immutable.map[string,string]"
          },
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          }
        },
        "required": [
          "visibleCredentials",
          "secretCredentials",
          "credentialType"
        ]
      },
      "domino.projects.web.MarkProjectActive": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId"]
      },
      "domino.projects.api.repositories.responses.browse.CommitAuthorDTO": {
        "properties": {
          "name": { "type": "string" },
          "date": { "type": "date" }
        },
        "required": ["name", "date"]
      },
      "domino.nucleus.dataset.ui.CreateDatasetInput": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "projectId": { "type": "string", "nullable": true }
        },
        "required": ["name"]
      },
      "domino.projectManagement.web.LinkJobToGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.files.web.UnlinkFileFromGoal": {
        "properties": {
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["fileName", "commitId", "projectId", "goalId"]
      },
      "domino.common.run.interfaces.RunMonolithDTO": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "startTime": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectIdentity": { "type": "string" },
          "runType": { "type": "string" },
          "hardwareTierName": { "type": "string" },
          "runDurationInSeconds": { "type": "number", "format": "double" },
          "estimatedCost": { "type": "number", "format": "double" },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Stopping",
              "Stopped",
              "Error",
              "Finishing",
              "Queued",
              "StopRequested",
              "Scheduled",
              "Pulling",
              "Succeeded",
              "StopAndDiscardRequested",
              "Preparing",
              "Running",
              "Failed",
              "Serving",
              "Building"
            ]
          }
        },
        "required": [
          "id",
          "title",
          "startTime",
          "projectId",
          "projectIdentity",
          "runType",
          "hardwareTierName",
          "runDurationInSeconds",
          "estimatedCost",
          "status"
        ]
      },
      "domino.workspace.api.WorkspaceExecutionInfoDto": {
        "properties": {
          "executionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "workspaceSessionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isRestartable": { "type": "boolean" }
        },
        "required": ["executionId", "isRestartable"]
      },
      "domino.projects.api.repositories.GitProvidersDto": {
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitProviderDto"
            }
          }
        },
        "required": ["providers"]
      },
      "domino.workspaces.web.ArchiveCommentInput": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["commentId"]
      },
      "domino.admin.interface.ComputeClusterPodOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": ["Container", "Pod"]
          },
          "deployableObjectId": { "type": "string" },
          "computeNodeId": { "type": "string", "nullable": true },
          "status": { "type": "string" },
          "role": { "type": "string" },
          "isMaster": { "type": "boolean" }
        },
        "required": [
          "deployableObjectType",
          "deployableObjectId",
          "status",
          "role",
          "isMaster"
        ]
      },
      "domino.datasource.api.DataSourceConfig": { "properties": {} },
      "domino.gruz.web.RunImportRequest": {
        "properties": {
          "runs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/domino.gruz.api.RawRun" }
          }
        },
        "required": ["runs"]
      },
      "domino.jobs.interface.JobResourcesStatus": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobRepositoryStatus"
            }
          }
        },
        "required": ["repositories"]
      },
      "domino.nucleus.dataset.ui.AddMountInput": {
        "properties": {
          "datasetId": { "type": "string" },
          "useLatest": { "type": "boolean" },
          "useTag": { "type": "string", "nullable": true },
          "useId": { "nullable": true, "type": "string" }
        },
        "required": ["datasetId", "useLatest"]
      },
      "domino.files.web.FileOrFolderToMove": {
        "properties": {
          "originPath": { "type": "string" },
          "targetPath": { "type": "string" },
          "isDirectory": { "type": "boolean" },
          "ownerUsername": { "type": "string" },
          "projectName": { "type": "string" }
        },
        "required": [
          "originPath",
          "targetPath",
          "isDirectory",
          "ownerUsername",
          "projectName"
        ]
      },
      "domino.jobs.web.JobStatusChangeSocketEvent": {
        "properties": {
          "correlationId": { "type": "string" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "room": { "type": "string" },
          "status": { "type": "string" },
          "timestamp": { "type": "integer", "format": "epoch" },
          "startedBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "correlationId",
          "jobId",
          "projectId",
          "room",
          "status",
          "timestamp"
        ]
      },
      "domino.common.models.DiagnosticStatistics": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.models.DiagnosticStatistic"
            }
          },
          "isError": { "type": "boolean" }
        },
        "required": ["data", "isError"]
      },
      "domino.workspace.api.git.CommitRepo": {
        "properties": {
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitMessage": { "type": "string" }
        },
        "required": ["repoId", "commitMessage"]
      },
      "domino.nucleus.organization.models.OrganizationMembers": {
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMember"
            }
          }
        },
        "required": ["members"]
      },
      "domino.projectManagement.api.PmEntity": {
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "entityType": {
            "type": "string",
            "enum": ["PmTicket", "PmSubTicket", "PmStage", "PmComment"]
          }
        },
        "required": ["entityId", "entityType"]
      },
      "domino.projects.api.ProjectStage": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "stage": { "type": "string" },
          "createdAt": { "type": "integer", "format": "epoch" },
          "createdBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isArchived": { "type": "boolean" },
          "stageCreationSource": {
            "type": "string",
            "enum": ["Domino", "Jira"]
          }
        },
        "required": [
          "id",
          "stage",
          "createdAt",
          "isArchived",
          "stageCreationSource"
        ]
      },
      "domino.computecluster.api.ComputeClusterDetails": {
        "properties": {
          "clusterConfig": {
            "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterConfigResponseDto"
          },
          "webUiPath": { "type": "string" }
        },
        "required": ["clusterConfig", "webUiPath"]
      },
      "domino.nucleus.modelproduct.models.LoginRequired": {
        "properties": { "loginUrl": { "type": "string" } },
        "required": ["loginUrl"]
      },
      "domino.gruz.api.RunOutput": {
        "properties": {
          "outputCommitId": { "type": "string", "nullable": true },
          "commitMessage": { "type": "string", "nullable": true },
          "diagnosticStatistics": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.models.DiagnosticStatistics"
          }
        }
      },
      "domino.gitproviders.api.GetRepoTypeCapabilitiesApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.RepoTypeCapabilitiesDTO"
            }
          }
        },
        "required": ["items"]
      },
      "domino.server.projects.api.ProjectGatewayOverview": {
        "description": "Project Overview entity returned by the API gateway",
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/domino.server.projects.api.Owner"
          },
          "visibility": {
            "type": "string",
            "enum": ["Public", "Searchable", "Private"]
          },
          "mainRepositoryUri": { "nullable": true, "type": "string" },
          "lastStatusChangeInMillis": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "lastStageChangeInMillis": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "hardwareTierName": { "type": "string" },
          "description": { "type": "string" },
          "hardwareTierId": { "type": "string" },
          "requestingUserRole": {
            "type": "string",
            "enum": [
              "Admin",
              "ProjectImporter",
              "Contributor",
              "Viewer",
              "ResultsConsumer",
              "LauncherUser",
              "Owner"
            ]
          },
          "totalRunTime": {
            "description": "sum of run times of all executions in the project, in ISO8601 duration format including only seconds and milliseconds",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayTag"
            }
          },
          "numComments": { "format": "int64", "type": "integer" },
          "allowedOperations": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ChangeProjectSettings",
                "Run",
                "ConsumeApiEndpoint",
                "Edit",
                "ViewWorkspaces",
                "UpdateProjectDescription",
                "ProjectSearchPreview",
                "BrowseReadFiles",
                "EditTags",
                "RunLauncher",
                "ViewRuns"
              ]
            }
          },
          "runsCountByType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayExecutingRunsByType"
            }
          },
          "environmentName": { "type": "string" },
          "name": { "type": "string" },
          "serviceProvider": {
            "type": "string",
            "nullable": true,
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "id": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" },
          "stageId": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "status": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectStatus"
          }
        },
        "required": [
          "id",
          "name",
          "owner",
          "description",
          "hardwareTierName",
          "hardwareTierId",
          "environmentName",
          "allowedOperations",
          "visibility",
          "tags",
          "updatedAt",
          "numComments",
          "runsCountByType",
          "totalRunTime",
          "stageId",
          "status",
          "requestingUserRole"
        ]
      },
      "domino.workspaces.api.WorkspaceResultFiles": {
        "properties": {
          "commitId": { "type": "string" },
          "fileMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.ResultFileMetadata"
            }
          }
        },
        "required": ["commitId", "fileMetadata"]
      },
      "domino.environments.api.PaginatedRevisionData": {
        "properties": {
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.RevisionSummary"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/domino.environments.api.PaginatedRevisionInfo"
          }
        },
        "required": ["revisions", "pageInfo"]
      },
      "domino.projects.web.ArchiveProjectStage": {
        "properties": {
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["stageId"]
      },
      "domino.workspaces.web.LaunchWorkspaceInputs": {
        "properties": {
          "workspaceDefinitionId": { "type": "string" },
          "title": { "type": "string", "nullable": true },
          "commitId": { "type": "string", "nullable": true },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "hardwareTierId": { "type": "string", "nullable": true },
          "datasetConfig": { "type": "string", "nullable": true },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["workspaceDefinitionId"]
      },
      "domino.admin.interface.OnDemandSparkExecutionUnitOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": ["Container", "Pod"]
          },
          "deployableObjectId": { "type": "string" },
          "computeNodeId": { "type": "string", "nullable": true },
          "status": { "type": "string" },
          "role": { "type": "string" }
        },
        "required": [
          "deployableObjectType",
          "deployableObjectId",
          "status",
          "role"
        ]
      },
      "domino.common.gateway.search.SearchResultGatewayDTO": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "displayText": { "type": "string", "nullable": true },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "path": { "type": "string", "nullable": true },
          "link": { "type": "string" },
          "area": { "type": "string" }
        },
        "required": ["link", "area"]
      },
      "domino.common.modelproduct.NotificationRecipient": {
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string" }
        },
        "required": ["name", "email"]
      },
      "domino.admin.interface.ComputeNodeMemUtilization": {
        "properties": {
          "total": { "type": "number", "format": "double" },
          "requested": { "type": "number", "format": "double" },
          "available": { "type": "number", "format": "double" }
        },
        "required": ["total", "requested", "available"]
      },
      "domino.projects.api.ProjectInfo": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectOwnerInfo"
          }
        },
        "required": ["id", "name", "owner"]
      },
      "domino.projects.api.ProjectEnvironmentOwnerDTO": {
        "properties": {
          "id": { "type": "string" },
          "username": { "type": "string" }
        },
        "required": ["id", "username"]
      },
      "domino.jobs.interface.JobStatuses": {
        "properties": {
          "isCompleted": { "type": "boolean" },
          "isArchived": { "type": "boolean" },
          "isScheduled": { "type": "boolean" },
          "volumeRecoverabilityStatus": {
            "type": "string",
            "enum": [
              "Unauthorized",
              "VolumeUnavailable",
              "Recoverable",
              "NoActionNecessary"
            ]
          },
          "executionStatus": { "type": "string" }
        },
        "required": [
          "isCompleted",
          "isArchived",
          "isScheduled",
          "volumeRecoverabilityStatus",
          "executionStatus"
        ]
      },
      "domino.projects.api.ProjectAssetCount": {
        "properties": {
          "assetType": {
            "type": "string",
            "enum": ["App", "ModelAPI", "Launcher", "Schedules"]
          },
          "assetCount": { "type": "integer", "format": "int32" }
        },
        "required": ["assetType", "assetCount"]
      },
      "domino.provenance.api.ProvenanceCheckpointDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "executionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "createdAt": { "type": "string", "format": "date-time" },
          "environmentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitMessage": { "type": "string" },
          "dfsCommit": {
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCommit"
          },
          "importedProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceImportedProject"
            }
          },
          "importedRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceGitRepoDto"
            }
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "tool": { "type": "string", "nullable": true },
          "volumeSize": { "$ref": "#/components/schemas/Information" },
          "environmentRevisionSpec": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "datasetConfig": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "computeClusterConfig": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "externalVolumeMountIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": [
          "id",
          "projectId",
          "executionId",
          "createdAt",
          "environmentId",
          "commitMessage",
          "dfsCommit",
          "importedProjects",
          "importedRepositories",
          "hardwareTierId",
          "volumeSize",
          "environmentRevisionSpec",
          "datasetConfig",
          "computeClusterConfig",
          "externalVolumeMountIds"
        ]
      },
      "domino.jobs.interface.JobProblemSuggestion": {
        "properties": {
          "problem": { "type": "string" },
          "helpLink": { "type": "string" }
        },
        "required": ["problem", "helpLink"]
      },
      "domino.gruz.api.RunPostProcessing": {
        "properties": {
          "postProcessingControl": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.RunPostProcessingControl"
          },
          "postProcessedTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "domino.environments.api.EnvironmentDetails": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "archived": { "type": "boolean" },
          "name": { "type": "string" },
          "visibility": {
            "type": "string",
            "enum": ["Global", "Private", "Organization"]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentOwner"
          },
          "supportedClusters": {
            "type": "array",
            "items": { "type": "string", "enum": ["Dask", "Spark", "Ray"] }
          },
          "latestRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
          },
          "selectedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.RevisionOverview"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.nucleus.modelproduct.models.LinkAppToGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "appVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId", "appVersionId"]
      },
      "domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModel": {
        "properties": {
          "name": { "type": "string" },
          "yaml": { "type": "string" }
        },
        "required": ["name", "yaml"]
      },
      "domino.admin.interface.HardwareTierOverview": {
        "properties": {
          "id": { "type": "string" },
          "cores": { "type": "number", "format": "double" },
          "memoryInGiB": { "type": "number", "format": "double" }
        },
        "required": ["id", "cores", "memoryInGiB"]
      },
      "domino.jobs.interface.CommentContent": {
        "properties": { "value": { "type": "string" } },
        "required": ["value"]
      },
      "domino.datasetrw.api.DatasetRwFiletaskCopyUpdateDto": {
        "properties": {
          "timeRemaining": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "progress": { "type": "integer", "format": "int64" },
          "snapshotId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshotStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": ["progress", "snapshotId", "snapshotStatus"]
      },
      "domino.activity.api.FileChangeActivityMetaData": {
        "type": "object",
        "properties": {
          "commitMessage": { "nullable": true, "type": "string" },
          "filesChanged": { "type": "array", "items": { "type": "string" } },
          "action": {
            "type": "string",
            "enum": [
              "Moved File/Folder",
              "File Fully Deleted",
              "Folder Renamed",
              "Folder Created/Modified",
              "File Renamed",
              "Removed Files/Folders",
              "File Changed",
              "Removed File/Folder",
              "File Created/Modified",
              "Moved Files/Folders"
            ]
          },
          "commitId": { "type": "string" },
          "fileChangedDueToId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "fileChangedDueTo": {
            "type": "string",
            "enum": ["workspace", "user"]
          }
        },
        "required": [
          "filesChanged",
          "commitId",
          "action",
          "fileChangedDueTo",
          "fileChangedDueToId"
        ]
      },
      "domino.gruz.api.PortsRange": {
        "properties": {
          "from": { "type": "integer", "format": "int32" },
          "to": { "type": "integer", "format": "int32" }
        },
        "required": ["from", "to"]
      },
      "domino.datasetrw.api.DatasetRwFileDetailsDto": {
        "properties": {
          "isDirectory": { "type": "boolean", "nullable": true },
          "label": { "type": "string" },
          "sortableName": { "type": "string", "nullable": true },
          "fileName": { "type": "string", "nullable": true },
          "url": { "type": "string", "nullable": true },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": ["label"]
      },
      "domino.jobs.interface.ArtifactsInfoDto": {
        "properties": {
          "startState": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsStartStateDto"
          },
          "endState": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
          },
          "changes": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["startState", "endState", "changes"]
      },
      "domino.jobs.interface.Commenter": {
        "properties": {
          "commenterId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" },
          "fullName": { "type": "string" }
        },
        "required": ["commenterId", "username", "fullName"]
      },
      "domino.dataset.api.DatasetScratchSpaceDto": {
        "properties": {
          "userId": { "type": "string" },
          "projectId": { "type": "string" },
          "lastUpdatedDateMillis": { "type": "integer", "format": "int64" },
          "lastSnapshotDateMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "scratchSpaceSize": { "type": "integer", "format": "int64" },
          "isPartialSize": { "type": "boolean" },
          "id": { "type": "string" },
          "daysSinceLastSnapshot": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "promotionWarningStatus": {
            "type": "string",
            "enum": ["none", "low", "medium", "high"]
          }
        },
        "required": [
          "userId",
          "projectId",
          "lastUpdatedDateMillis",
          "scratchSpaceSize",
          "isPartialSize",
          "id",
          "promotionWarningStatus"
        ]
      },
      "domino.hardwaretier.api.NewHardwareTierDto": {
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "cores": { "type": "number", "format": "double" },
          "coresLimit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "memory": { "type": "number", "format": "double" },
          "allowSharedMemoryToExceedDefault": { "type": "boolean" },
          "clusterType": {
            "type": "string",
            "nullable": true,
            "enum": ["ClassicOnPremises", "ClassicAWS", "Kubernetes"]
          },
          "numberOfGpus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "gpuKey": { "type": "string" },
          "runMemoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.executor.run.RunMemoryLimitDto"
          },
          "isDefault": { "type": "boolean" },
          "centsPerMinute": { "type": "number", "format": "double" },
          "isFree": { "type": "boolean" },
          "isAllowedDuringTrial": { "type": "boolean" },
          "isVisible": { "type": "boolean" },
          "isGlobal": { "type": "boolean" },
          "nodePool": { "type": "string", "nullable": true },
          "maxSimultaneousExecutions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "overprovisioning": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierOverprovisioningDto"
          }
        },
        "required": [
          "id",
          "name",
          "cores",
          "memory",
          "allowSharedMemoryToExceedDefault",
          "gpuKey",
          "isDefault",
          "centsPerMinute",
          "isFree",
          "isAllowedDuringTrial",
          "isVisible",
          "isGlobal"
        ]
      },
      "domino.projects.api.ProjectStageAndStatus": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "lastStageChangeInMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastStatusChangeInMillis": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": ["id", "name", "stage", "status"]
      },
      "domino.jobs.web.JobsUsageSocketEvent": {
        "properties": {
          "correlationId": { "type": "string" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "room": { "type": "string" },
          "cpu": { "type": "number", "format": "double" },
          "mem": { "type": "number", "format": "double" },
          "timestamp": { "type": "integer", "format": "epoch" }
        },
        "required": [
          "correlationId",
          "jobId",
          "room",
          "cpu",
          "mem",
          "timestamp"
        ]
      },
      "domino.workspaces.api.CommentThread": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.workspaces.api.CommentContext"
          }
        },
        "required": ["id", "comments", "context"]
      },
      "domino.activity.api.ActivityMetaData": { "properties": {} },
      "domino.workspace.api.WorkspaceImportedProject": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "directoryName": { "type": "string", "nullable": true },
          "commitId": { "type": "string" },
          "release": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["projectId", "projectName", "ownerId", "commitId"]
      },
      "domino.jobs.web.JobOperationRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "jobId"]
      },
      "domino.projects.api.StageStat": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "projectCount": { "type": "integer", "format": "int32" }
        },
        "required": ["id", "name", "projectCount"]
      },
      "domino.projects.web.UpdateProjectGoalDescription": {
        "properties": { "description": { "type": "string" } },
        "required": ["description"]
      },
      "domino.nucleus.modelproduct.models.Stats": {
        "properties": {
          "usageCount": { "type": "integer", "format": "int32" }
        },
        "required": ["usageCount"]
      },
      "domino.projects.api.repositories.GitProviderDto": {
        "properties": {
          "value": { "type": "string" },
          "label": { "type": "string" },
          "requiresDomain": { "type": "boolean" },
          "accessTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.AccessTypeDto"
            }
          }
        },
        "required": ["value", "label", "requiresDomain", "accessTypes"]
      },
      "domino.activity.api.ModelVersionStatusActivityMetaData": {
        "properties": {
          "action": { "type": "string", "enum": ["published", "destroyed"] },
          "currentStatus": { "type": "string" },
          "modelName": { "type": "string" },
          "modelId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "modelVersionNumber": { "type": "integer", "format": "int32" }
        },
        "required": [
          "action",
          "currentStatus",
          "modelName",
          "modelId",
          "modelVersionNumber"
        ]
      },
      "domino.projects.web.CreateProjectGoal": {
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true }
        },
        "required": ["title"]
      },
      "domino.environments.api.EnvironmentOwner": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" },
          "environmentOwnerType": {
            "type": "string",
            "enum": ["Organization", "Individual"]
          }
        },
        "required": ["id", "username", "environmentOwnerType"]
      },
      "domino.datamount.web.UpdateDataMountRequest": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "mountPath": { "type": "string" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "projects": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "readOnly": { "type": "boolean" },
          "isPublic": { "type": "boolean" },
          "isRegistered": { "type": "boolean" },
          "status": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "name",
          "mountPath",
          "users",
          "projects",
          "readOnly",
          "isPublic",
          "isRegistered"
        ]
      },
      "domino.activity.api.ScheduleJobActivityMetaData": {
        "properties": {
          "action": {
            "type": "string",
            "enum": ["scheduled", "paused", "edited", "unpaused", "unscheduled"]
          },
          "title": { "type": "string", "nullable": true },
          "commandToRun": { "type": "string" },
          "cronSchedule": { "type": "string" }
        },
        "required": ["action", "commandToRun", "cronSchedule"]
      },
      "domino.activity.api.ActivityStream": {
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.activity.api.Activity"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/domino.activity.api.ActivityPagination"
          }
        },
        "required": ["activity", "pagination"]
      },
      "domino.activity.api.AppStatusActivityMetaData": {
        "properties": {
          "title": { "type": "string" },
          "status": { "type": "string" },
          "currentStatus": { "type": "string" }
        },
        "required": ["title", "status", "currentStatus"]
      },
      "domino.hardwaretier.api.HardwareTierWithCapacityDto": {
        "properties": {
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierDto"
          },
          "capacity": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierCapacity"
          }
        },
        "required": ["hardwareTier", "capacity"]
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserViewModel": {
        "properties": {
          "directorySize": { "type": "string", "nullable": true },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserRow"
            }
          }
        },
        "required": ["rows"]
      },
      "domino.modelmanager.api.ModelApiAggregatedUsageStatistics": {
        "properties": {
          "modelVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "statusCode": { "type": "integer", "format": "int32" },
          "timestamp": { "type": "integer", "format": "epoch" },
          "invocationCount": { "type": "integer", "format": "int64" }
        },
        "required": [
          "modelVersionId",
          "statusCode",
          "timestamp",
          "invocationCount"
        ]
      },
      "domino.projects.api.repositories.GitRepositoryDTO": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "name": { "type": "string", "nullable": true },
          "uri": { "type": "string" },
          "ref": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "serviceProvider": { "type": "string" }
        },
        "required": ["uri", "ref", "serviceProvider"]
      },
      "domino.workspace.web.ReproduceWorkspaceRequest": {
        "properties": {
          "name": { "type": "string" },
          "provenanceCheckpointId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["name", "provenanceCheckpointId"]
      },
      "domino.gitproviders.api.RepoDTO": {
        "properties": {
          "repoName": { "type": "string" },
          "defaultBranch": { "type": "string", "nullable": true },
          "externalUrl": { "type": "string" }
        },
        "required": ["repoName", "externalUrl"]
      },
      "domino.datasetrw.api.DatasetRwSnapshotSummaryDto": {
        "properties": {
          "snapshot": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
          },
          "authorUsername": { "type": "string", "nullable": true },
          "datasetDescription": { "type": "string", "nullable": true },
          "isReadWrite": { "type": "boolean" }
        },
        "required": ["snapshot", "isReadWrite"]
      },
      "domino.workspaces.api.LogContent": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "logType": {
            "type": "string",
            "enum": ["stdout", "stderr", "prepareoutput", "complete"]
          },
          "log": { "type": "string" },
          "size": { "type": "integer", "format": "int64" }
        },
        "required": ["timestamp", "logType", "log", "size"]
      },
      "domino.projects.api.Commenter": {
        "properties": {
          "commenterId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" },
          "fullName": { "type": "string" }
        },
        "required": ["commenterId", "username", "fullName"]
      },
      "domino.activity.api.ProjectGoalJobLinkActivityMetadata": {
        "properties": {
          "action": { "type": "string", "enum": ["added", "removed"] },
          "jobNumber": { "type": "integer", "format": "int32" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectGoalTitle": { "type": "string" }
        },
        "required": ["action", "jobNumber", "jobId", "projectGoalTitle"]
      },
      "domino.workspaces.api.ExecutionCheckpointStatus": {
        "properties": {
          "checkpoint": {
            "type": "string",
            "enum": [
              "UserFilesSaved",
              "ResourcesCreated",
              "NodeAssigned",
              "VolumesMounted",
              "VolumesReleased",
              "UserCodeLaunched",
              "FilesPrepared",
              "ResourcesDeleted",
              "Acknowledged",
              "ImagesPulled",
              "QuotaChecked"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["Pending", "Completed", "Error"]
          },
          "message": { "type": "string", "nullable": true }
        },
        "required": ["checkpoint", "status"]
      },
      "domino.admin.interface.WhiteLabelConfigurations": {
        "properties": {
          "appLogo": { "type": "string", "nullable": true },
          "errorPageContactEmail": { "type": "string" },
          "defaultProjectName": { "type": "string" },
          "favicon": { "type": "string" },
          "gitCredentialsDescription": { "type": "string" },
          "helpContentUrl": { "type": "string" },
          "hidePopularProjects": { "type": "boolean" },
          "hideDownloadDominoCli": { "type": "boolean" },
          "hideMarketingDisclaimer": { "type": "boolean" },
          "hidePublicProjects": { "type": "boolean" },
          "hideSearchableProjects": { "type": "boolean" },
          "hideSuggestedProjects": { "type": "boolean" },
          "hideLearnMoreOnFile": { "type": "boolean" },
          "hideGitSshKey": { "type": "boolean" },
          "appName": { "type": "string" },
          "pageFooter": { "type": "string" },
          "showSupportButton": { "type": "boolean" },
          "supportEmail": { "type": "string" }
        },
        "required": [
          "errorPageContactEmail",
          "defaultProjectName",
          "favicon",
          "gitCredentialsDescription",
          "helpContentUrl",
          "hidePopularProjects",
          "hideDownloadDominoCli",
          "hideMarketingDisclaimer",
          "hidePublicProjects",
          "hideSearchableProjects",
          "hideSuggestedProjects",
          "hideLearnMoreOnFile",
          "hideGitSshKey",
          "appName",
          "pageFooter",
          "showSupportButton",
          "supportEmail"
        ]
      },
      "domino.projects.api.UseableProjectEnvironmentsDTO": {
        "properties": {
          "currentlySelectedEnvironment": {
            "$ref": "#/components/schemas/domino.projects.api.SelectedEnvironmentDTO"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectEnvironmentDTO"
            }
          }
        },
        "required": ["currentlySelectedEnvironment", "environments"]
      },
      "domino.projects.api.EntityLink": {
        "properties": {
          "entityLinkType": {
            "type": "string",
            "enum": ["job", "model_api", "workspace", "app", "file"]
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projects.api.EntityLinkMetadata"
          },
          "timestamp": { "type": "integer", "format": "epoch" },
          "createdBy": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["entityLinkType", "metadata", "timestamp", "createdBy"]
      },
      "domino.workspaces.api.WorkspaceTag": {
        "properties": {
          "tagId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "createdBy": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "createdAt": { "type": "integer", "format": "epoch" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["tagId", "name", "createdBy", "createdAt", "projectId"]
      },
      "domino.scheduledrun.api.LegacyScheduledRunDTO": {
        "properties": {
          "id": { "type": "string" },
          "schedulingUserName": { "type": "string" },
          "title": { "type": "string", "nullable": true },
          "scheduleTime": { "type": "string" },
          "hardwareTierName": { "type": "string" },
          "launchBehavior": {
            "type": "string",
            "enum": ["Concurrent", "Sequential"]
          },
          "emailsToNotify": { "type": "string", "nullable": true },
          "projectIdentity": { "type": "string" }
        },
        "required": [
          "id",
          "schedulingUserName",
          "scheduleTime",
          "hardwareTierName",
          "launchBehavior",
          "projectIdentity"
        ]
      },
      "domino.datamount.web.FindByPvcNamesRequest": {
        "properties": {
          "pvcNames": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["pvcNames"]
      },
      "domino.nucleus.modelproduct.models.VisibilityPatch": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          }
        },
        "required": ["visibility"]
      },
      "domino.projectManagement.api.PmTicketType": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "domino.credential.api.VisibleDataSourceCredentialDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "dataSourceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.VisibleCredentialDto"
          },
          "owner": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["id", "dataSourceId", "credential", "owner", "users"]
      },
      "domino.projects.api.ProjectPortfolioPaginationFilter": {
        "properties": {
          "pagination": {
            "type": "domino.apiserverutils.pagination.paginationfilter"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "duration",
              "centsPerMinute",
              "lastActivity",
              "projectName",
              "createdOn",
              "status",
              "collaborators"
            ]
          },
          "searchQuery": { "type": "string", "nullable": true },
          "stageId": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "status": {
            "type": "array",
            "items": { "type": "string", "enum": ["active", "complete"] }
          },
          "isBlocked": { "type": "boolean", "nullable": true }
        },
        "required": ["pagination", "sortBy", "stageId", "status"]
      },
      "domino.activity.api.ProjectStatusChangeActivityMetaData": {
        "properties": {
          "projectName": { "type": "string" },
          "fromStatus": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatus"
          },
          "toStatus": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatus"
          }
        },
        "required": ["projectName", "fromStatus", "toStatus"]
      },
      "domino.admin.interface.ComputeNodeInfrastructureInfo": {
        "properties": {
          "name": { "type": "string" },
          "nodePool": { "type": "string", "nullable": true },
          "instanceType": { "type": "string", "nullable": true },
          "isBuildNode": { "type": "boolean" }
        },
        "required": ["name", "isBuildNode"]
      },
      "domino.workspace.api.WorkspaceConfigDto": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceHardwareTierDto"
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "tools": { "type": "array", "items": { "type": "string" } },
          "clusterProps": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.computecluster.api.SparkClusterPropsDto"
          },
          "computeClusterResponseProps": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.computecluster.api.ComputeClusterConfigResponseDto"
          }
        },
        "required": ["environment", "hardwareTier", "tools"]
      },
      "domino.jobs.interface.JobRepositoryStatus": {
        "properties": {
          "name": { "type": "string" },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "Unpushed and Dirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.RepositoryChanges"
          }
        },
        "required": ["name", "status"]
      },
      "domino.datasetrw.api.DatasetRwCopyTimeEstimateDto": {
        "properties": {
          "isLessThanMinutesEstimate": { "type": "boolean" },
          "minutesEstimate": { "type": "integer", "format": "int64" }
        },
        "required": ["isLessThanMinutesEstimate", "minutesEstimate"]
      },
      "domino.datasetrw.api.DatasetRwFileDetailsRowDto": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsDto"
          },
          "size": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsDto"
          },
          "lastModified": { "type": "integer", "format": "int64" }
        },
        "required": ["name", "size", "lastModified"]
      },
      "domino.nucleus.modelproduct.models.ModelProductError": {
        "properties": {
          "message": { "type": "string" },
          "correlationId": { "type": "string", "nullable": true }
        },
        "required": ["message"]
      },
      "domino.workspace.api.WorkspaceRepositoryState": {
        "properties": {
          "name": { "type": "string" },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "UnpushedDirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.RepositoryChanges"
          }
        },
        "required": ["name", "status"]
      },
      "domino.environments.api.RevisionSummary": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "number": { "type": "integer", "format": "int32" },
          "created": { "type": "integer", "format": "epoch" }
        },
        "required": ["id", "number", "created"]
      },
      "domino.admin.interface.ProjectSearchResultsDto": {
        "properties": {
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.UserProjectEntry"
            }
          },
          "totalMatches": { "type": "integer", "format": "int64" }
        },
        "required": ["page", "totalMatches"]
      },
      "domino.datasource.web.CheckDataSourceConnectionRequest": {
        "properties": {
          "dataSourceType": {
            "type": "string",
            "enum": ["SnowflakeConfig", "RedshiftConfig"]
          },
          "username": { "type": "string", "nullable": true },
          "password": { "type": "string", "nullable": true },
          "accountName": { "type": "string", "nullable": true },
          "database": { "type": "string", "nullable": true },
          "schema": { "type": "string", "nullable": true },
          "warehouse": { "type": "string", "nullable": true },
          "role": { "type": "string", "nullable": true },
          "host": { "type": "string", "nullable": true },
          "port": { "type": "string", "nullable": true },
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          }
        },
        "required": ["dataSourceType", "credentialType"]
      },
      "domino.nucleus.modelproduct.models.App": {
        "properties": { "appType": { "type": "string" } },
        "required": ["appType"]
      },
      "domino.common.models.DiagnosticStatistic": {
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["key", "value"]
      },
      "domino.projects.api.CollaboratorDTO": {
        "properties": {
          "collaboratorId": { "type": "string" },
          "projectRole": {
            "type": "string",
            "enum": [
              "Contributor",
              "LauncherUser",
              "ResultsConsumer",
              "ProjectImporter"
            ]
          }
        },
        "required": ["collaboratorId", "projectRole"]
      },
      "domino.projects.api.ProjectPortfolioMetaData": {
        "properties": {
          "projectStatusType": {
            "type": "string",
            "enum": ["active", "complete"]
          }
        },
        "required": ["projectStatusType"]
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserRow": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserEntry"
          },
          "size": {
            "$ref": "#/components/schemas/domino.nucleus.dataset.ui.DataSetFileBrowserEntry"
          }
        },
        "required": ["name", "size"]
      },
      "domino.server.account.api.GitCredentialDto": { "properties": {} },
      "domino.jobs.interface.DependentDatasetMount": {
        "properties": {
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "datasetName": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "isInput": { "type": "boolean" },
          "containerPath": { "type": "string", "nullable": true }
        },
        "required": ["datasetId", "datasetName", "projectId", "isInput"]
      },
      "domino.jobs.interface.CommentThread": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommentContext"
          }
        },
        "required": ["id", "comments", "context"]
      },
      "domino.projects.api.RevisionOverview": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "number": { "type": "integer", "format": "int32" },
          "status": { "type": "string", "nullable": true },
          "url": { "type": "string" },
          "availableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.EnvironmentWorkspaceToolDefinition"
            }
          }
        },
        "required": ["id", "number", "url", "availableTools"]
      },
      "domino.common.modelproduct.LogContent": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "logType": {
            "type": "string",
            "enum": ["stdout", "stderr", "prepareoutput", "complete"]
          },
          "log": { "type": "string" },
          "size": { "type": "integer", "format": "int64" }
        },
        "required": ["timestamp", "logType", "log", "size"]
      },
      "domino.projectManagement.web.LinkWorkspaceToGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.computegrid.ComputeClusterStatus": {
        "properties": {
          "clusterName": { "type": "string" },
          "clusterState": {
            "type": "string",
            "enum": ["Pending", "Starting", "Ready", "Stopping"]
          },
          "isReady": { "type": "boolean" },
          "workerCount": { "type": "integer", "format": "int32" }
        },
        "required": ["clusterName", "clusterState", "isReady", "workerCount"]
      },
      "domino.nucleus.modelproduct.models.EmailInvitationResponse": {
        "properties": {
          "succeeded": { "type": "array", "items": { "type": "string" } },
          "failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.EmailInvitationFailure"
            }
          }
        },
        "required": ["succeeded", "failed"]
      },
      "domino.workspace.web.UpdateWorkspaceTitleRequest": {
        "properties": { "title": { "type": "string" } },
        "required": ["title"]
      },
      "domino.jobs.interface.JobSet": {
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.Job"
            }
          },
          "totalCount": { "type": "integer", "format": "int64" },
          "pagination": {
            "$ref": "#/components/schemas/domino.jobs.interface.JobPagination"
          },
          "dominoStatColumns": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["jobs", "totalCount", "pagination", "dominoStatColumns"]
      },
      "domino.projects.api.SelectedEnvironmentDTO": {
        "properties": {
          "id": { "type": "string" },
          "v2EnvironmentDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.SelectedV2EnvironmentDetailsDTO"
          },
          "supportedClusters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ComputeClusterType" }
          }
        },
        "required": ["id", "supportedClusters"]
      },
      "domino.scheduledrun.api.ComputeClusterConfigSpecDto": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": { "type": "integer", "format": "int32" },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "type": "collection.immutable.map[string,string]",
            "nullable": true
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "masterHardwareTierId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.workspace.api.RestartableWorkspaceChangeEvent": {
        "properties": {
          "correlationId": { "type": "string" },
          "room": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "workspace": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
          }
        },
        "required": ["correlationId", "room", "timestamp", "workspace"]
      },
      "domino.nucleus.dataset.ui.UpdateDatasetInput": {
        "properties": {
          "description": { "type": "string", "nullable": true },
          "name": { "type": "string", "nullable": true }
        }
      },
      "domino.hardwaretier.api.HardwareTierCapacity": {
        "properties": {
          "currentNumberOfExecutors": { "type": "integer", "format": "int32" },
          "maximumNumberOfExecutors": { "type": "integer", "format": "int32" },
          "numberOfCurrentlyExecutingRuns": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfQueuedRuns": { "type": "integer", "format": "int32" },
          "maximumConcurrentRuns": { "type": "integer", "format": "int32" },
          "availableCapacityWithoutLaunching": {
            "type": "integer",
            "format": "int32"
          },
          "maximumAvailableCapacity": { "type": "integer", "format": "int32" },
          "capacityLevel": {
            "type": "string",
            "enum": [
              "CAN_EXECUTE_WITH_CURRENT_INSTANCES",
              "REQUIRES_LAUNCHING_INSTANCE",
              "FULL",
              "UNKNOWN"
            ]
          }
        },
        "required": [
          "currentNumberOfExecutors",
          "maximumNumberOfExecutors",
          "numberOfCurrentlyExecutingRuns",
          "numberOfQueuedRuns",
          "maximumConcurrentRuns",
          "availableCapacityWithoutLaunching",
          "maximumAvailableCapacity",
          "capacityLevel"
        ]
      },
      "domino.workspace.api.git.ContinueMergeConflictResolutionRequest": {
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
          },
          "shouldCommitAndPush": { "type": "boolean" }
        },
        "required": ["repository", "shouldCommitAndPush"]
      },
      "domino.nucleus.project.models.UpdateProjectVisibility": {
        "properties": {
          "visibility": {
            "type": "string",
            "enum": ["Public", "Searchable", "Private"]
          }
        },
        "required": ["visibility"]
      },
      "domino.datasource.api.DataSourceAdminInfoDto": {
        "properties": {
          "projectNames": {
            "type": "collection.immutable.map[domino.common.dominoid,string]"
          },
          "projectIdOwnerUsernameMap": {
            "type": "collection.immutable.map[domino.common.dominoid,string]"
          },
          "projectLastActiveMap": {
            "type": "collection.immutable.map[domino.common.dominoid,option[java.time.instant]]"
          }
        },
        "required": [
          "projectNames",
          "projectIdOwnerUsernameMap",
          "projectLastActiveMap"
        ]
      },
      "domino.workspaces.web.WorkspaceRelaunchOperationRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "useOriginalInputCommit": { "type": "boolean" }
        },
        "required": ["projectId", "workspaceId", "useOriginalInputCommit"]
      },
      "domino.nucleus.modelproduct.models.ModelProduct": {
        "properties": {
          "modelProductType": {
            "type": "string",
            "enum": ["APP", "BATCH", "REPORT", "SCORER"]
          },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "publisher": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.user.Person"
          },
          "created": { "type": "string", "format": "date-time" },
          "lastUpdated": { "type": "string", "format": "date-time" },
          "status": { "type": "string" },
          "media": { "type": "array", "items": { "type": "string" } },
          "openUrl": { "type": "string", "nullable": true },
          "projectUrl": { "type": "string", "nullable": true },
          "tags": { "type": "array", "items": { "type": "string" } },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.Stats"
          },
          "appExtension": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.App"
          },
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "latestAppVersionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runningAppUrl": { "type": "string", "nullable": true },
          "runningCommitId": { "type": "string", "nullable": true },
          "hardwareTierId": { "type": "string", "nullable": true },
          "permissionsData": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.PermissionsData"
          },
          "runDescribeUrl": { "type": "string", "nullable": true },
          "goalIds": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": [
          "modelProductType",
          "projectId",
          "name",
          "created",
          "lastUpdated",
          "status",
          "media",
          "tags",
          "stats",
          "id",
          "permissionsData"
        ]
      },
      "domino.activity.api.CommentedOnFileMetaData": {
        "properties": {
          "commitId": { "type": "string" },
          "fileName": { "type": "string" },
          "separator": { "type": "string" }
        },
        "required": ["commitId", "fileName", "separator"]
      },
      "domino.datasetrw.web.UpdateDatasetStatusRequest": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": ["status"]
      },
      "domino.gruz.api.RunDependencyProject": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitId": { "type": "string" }
        },
        "required": ["id", "commitId"]
      },
      "domino.workspace.api.WorkspaceSessionProvenanceDto": {
        "properties": {
          "workspaceSessionId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "provenanceCheckpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCheckpointDto"
            }
          }
        },
        "required": ["workspaceSessionId", "provenanceCheckpoints"]
      },
      "domino.nucleus.project.models.Project": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "visibility": { "type": "string" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerUsername": { "type": "string" },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.server.projects.domain.entities.ProjectGitRepository"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
            }
          },
          "collaboratorIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{40}$" }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
            }
          },
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "visibility",
          "ownerId",
          "ownerUsername",
          "importedGitRepos",
          "collaboratorIds",
          "collaborators",
          "tags",
          "stageId",
          "status"
        ]
      },
      "domino.nucleus.modelproduct.models.AccessRequest": {
        "properties": {
          "userId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "redirect": { "type": "boolean", "nullable": true }
        },
        "required": ["userId"]
      },
      "domino.nucleus.modelproduct.models.StartParams": {
        "properties": {
          "hardwareTierId": { "type": "string", "nullable": true },
          "datasetConfigName": { "type": "string", "nullable": true },
          "externalVolumeMountIds": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        }
      },
      "domino.projects.api.ProjectStatus": {
        "properties": {
          "status": { "type": "string", "enum": ["active", "complete"] },
          "isBlocked": { "type": "boolean" },
          "blockedReason": { "type": "string", "nullable": true },
          "completedMessage": { "type": "string", "nullable": true }
        },
        "required": ["status", "isBlocked"]
      },
      "domino.projects.api.EntityLinkMetadata": { "properties": {} },
      "domino.projects.web.CreateProjectStage": {
        "properties": { "stage": { "type": "string" } },
        "required": ["stage"]
      },
      "domino.nucleus.dataset.ui.MountConfigViewModel": {
        "properties": {
          "datasetId": { "type": "string" },
          "useLatest": { "type": "boolean" },
          "useTag": { "type": "string", "nullable": true },
          "useId": { "nullable": true, "type": "string" },
          "path": { "type": "string" }
        },
        "required": ["datasetId", "useLatest", "path"]
      },
      "domino.projects.api.AssetUsageValues": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "statusCode": { "type": "integer", "format": "int32" },
          "usageCount": { "type": "integer", "format": "int64" }
        },
        "required": ["timestamp", "statusCode", "usageCount"]
      },
      "domino.workspace.api.WorkspaceSessionStatsDto": {
        "properties": {
          "lastStartTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lastEndTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "runTimeSec": { "type": "integer", "format": "int64" }
        },
        "required": ["runTimeSec"]
      },
      "domino.jobs.interface.PaginationFilter": {
        "properties": {
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "latestTimeNano": { "type": "string", "nullable": true }
        },
        "required": ["limit", "offset"]
      },
      "domino.workspace.api.WorkspaceAdminPageClusterInfo": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "minWorkers": { "type": "integer", "format": "int32" },
          "maxWorkers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["clusterType", "minWorkers"]
      },
      "domino.datasource.web.CreateDataSourceRequest": {
        "properties": {
          "name": { "type": "string" },
          "dataSourceType": {
            "type": "string",
            "enum": ["SnowflakeConfig", "RedshiftConfig"]
          },
          "description": { "type": "string", "nullable": true },
          "projectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "accountName": { "type": "string", "nullable": true },
          "database": { "type": "string", "nullable": true },
          "schema": { "type": "string", "nullable": true },
          "warehouse": { "type": "string", "nullable": true },
          "role": { "type": "string", "nullable": true },
          "host": { "type": "string", "nullable": true },
          "port": { "type": "string", "nullable": true },
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          },
          "username": { "type": "string", "nullable": true },
          "password": { "type": "string", "nullable": true },
          "isEveryone": { "type": "boolean" },
          "userIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": [
          "name",
          "dataSourceType",
          "credentialType",
          "isEveryone",
          "userIds"
        ]
      },
      "domino.projects.api.repositories.responses.browse.RepoBrowserEntryDTO": {
        "properties": {
          "kind": { "type": "string", "enum": ["file", "dir"] },
          "sha": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" },
          "modified": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": ["kind", "sha", "name", "path", "modified"]
      },
      "domino.jobs.interface.Job": {
        "properties": {
          "number": { "type": "integer", "format": "int32" },
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "queuedJobHistoryDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.QueuedJobHistoryDetails"
          },
          "stageTime": {
            "$ref": "#/components/schemas/domino.jobs.interface.StageTime"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.TagApplication"
            }
          },
          "jobRunCommand": { "type": "string" },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobUsageInJob"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobStartedBy"
          },
          "commentsCount": { "type": "integer", "format": "int32" },
          "title": { "type": "string", "nullable": true },
          "commitDetails": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommitDetails"
          },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DominoStats"
            }
          },
          "statuses": {
            "$ref": "#/components/schemas/domino.jobs.interface.JobStatuses"
          },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "dependentRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentRepository"
            }
          },
          "dependentDatasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentDatasetMount"
            }
          },
          "dependentProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentProject"
            }
          },
          "suggestDatasets": { "type": "boolean" },
          "goalIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "runLauncherId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "dependentExternalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.DependentExternalVolumeMount"
            }
          },
          "computeCluster": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecDto"
          }
        },
        "required": [
          "number",
          "id",
          "stageTime",
          "tags",
          "jobRunCommand",
          "commentsCount",
          "commitDetails",
          "dominoStats",
          "statuses",
          "dependentRepositories",
          "dependentDatasetMounts",
          "dependentProjects",
          "suggestDatasets",
          "goalIds",
          "dependentExternalVolumeMounts"
        ]
      },
      "domino.projects.api.repositories.responses.GetBranchesApiResponse": {
        "properties": {
          "currentItemCount": { "type": "integer", "format": "int32" },
          "itemsPerPage": { "type": "integer", "format": "int32" },
          "startIndex": { "type": "integer", "format": "int32" },
          "totalItems": { "type": "integer", "format": "int32" },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.BranchEntryDTO"
            }
          }
        },
        "required": [
          "currentItemCount",
          "itemsPerPage",
          "startIndex",
          "totalItems",
          "items"
        ]
      },
      "domino.jobs.web.UnlinkJobfromGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.workspaces.api.ExecutorInfo": {
        "properties": {
          "executorInstanceId": { "type": "string" },
          "region": { "type": "string" },
          "humanName": { "type": "string", "nullable": true },
          "publicAddress": { "type": "string", "nullable": true },
          "privateAddress": { "type": "string", "nullable": true }
        },
        "required": ["executorInstanceId", "region"]
      },
      "domino.nucleus.project.models.Collaborator": {
        "properties": {
          "collaboratorId": { "type": "string" },
          "projectRole": {
            "type": "string",
            "enum": [
              "Contributor",
              "LauncherUser",
              "ResultsConsumer",
              "ProjectImporter"
            ]
          }
        },
        "required": ["collaboratorId", "projectRole"]
      },
      "domino.gruz.api.VerbatimBoundPort": {
        "properties": {
          "environmentVariableName": { "type": "string" },
          "assignPortFromRange": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.PortsRange"
          },
          "name": { "type": "string", "nullable": true },
          "port": { "type": "integer", "format": "int32", "nullable": true }
        },
        "required": ["environmentVariableName"]
      },
      "domino.datasource.api.DataSourceDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerName": { "type": "string" },
          "addedBy": {
            "type": "collection.immutable.map[domino.common.dominoid,string]"
          },
          "dataSourceType": {
            "type": "string",
            "enum": ["SnowflakeConfig", "RedshiftConfig"]
          },
          "config": {
            "$ref": "#/components/schemas/domino.datasource.api.DataSourceConfig"
          },
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          },
          "lastUpdated": { "type": "integer", "format": "int64" },
          "lastUpdatedBy": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "addedToProjectTimeMap": {
            "type": "collection.immutable.map[domino.common.dominoid,long]"
          },
          "isEveryone": { "type": "boolean" },
          "userIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "projectIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "adminInfo": {
            "$ref": "#/components/schemas/domino.datasource.api.DataSourceAdminInfoDto"
          },
          "status": { "type": "string", "enum": ["Active", "Deleted"] }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerName",
          "addedBy",
          "dataSourceType",
          "config",
          "credentialType",
          "lastUpdated",
          "lastUpdatedBy",
          "addedToProjectTimeMap",
          "isEveryone",
          "userIds",
          "projectIds",
          "adminInfo",
          "status"
        ]
      },
      "domino.jobs.interface.JobsTimelineSet": {
        "properties": {
          "jobsTimeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineRecord"
            }
          },
          "dominoStatColumns": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["jobsTimeline", "dominoStatColumns"]
      },
      "domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModels": {
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.dataset.ui.AdvancedDatasetConfigurationViewModel"
            }
          }
        },
        "required": ["models"]
      },
      "domino.projects.api.repositories.requests.CreateRepoRequest": {
        "properties": {
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "credentialId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repositoryName": { "type": "string" },
          "owner": { "type": "string" },
          "isPrivate": { "type": "boolean" }
        },
        "required": [
          "serviceProvider",
          "credentialId",
          "repositoryName",
          "owner",
          "isPrivate"
        ]
      },
      "domino.workspace.api.WorkspaceAdminPageSummaryDto": {
        "properties": {
          "totalNumWorkspaces": { "type": "integer", "format": "int64" },
          "maxAllowedNumWorkspaces": { "type": "integer", "format": "int64" },
          "totalAllocatedVolumeSize": {
            "$ref": "#/components/schemas/Information"
          },
          "maxAllowedAllocatedVolumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "totalStartedWorkspaces": { "type": "integer", "format": "int64" }
        },
        "required": [
          "totalNumWorkspaces",
          "maxAllowedNumWorkspaces",
          "totalAllocatedVolumeSize",
          "totalStartedWorkspaces"
        ]
      },
      "domino.workspace.api.git.MergeConflictRepository": {
        "properties": {
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repoName": { "type": "string" }
        },
        "required": ["repoId", "repoName"]
      },
      "domino.workspaces.api.DependentRepository": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "uri": { "type": "string" },
          "ref": { "type": "string" },
          "serviceProvider": { "type": "string" },
          "startingCommitId": { "nullable": true, "type": "string" },
          "finishedCommitId": { "nullable": true, "type": "string" },
          "startingBranch": { "type": "string", "nullable": true },
          "finishedBranch": { "type": "string", "nullable": true }
        },
        "required": ["id", "name", "uri", "ref", "serviceProvider"]
      },
      "domino.modelmanager.api.ModelGoal": {
        "properties": {
          "modelVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "modelVersion": { "type": "integer", "format": "int32" },
          "modelId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": [
          "modelVersionId",
          "goalId",
          "projectId",
          "modelVersion",
          "modelId"
        ]
      },
      "domino.projectManagement.web.CommentRequest": {
        "properties": { "comment": { "type": "string" } },
        "required": ["comment"]
      },
      "domino.scheduledrun.api.NewScheduledJobDto": {
        "properties": {
          "title": { "type": "string" },
          "command": { "type": "string" },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledrun.api.EditCronScheduleDTO"
          },
          "timezoneId": { "type": "string" },
          "isPaused": { "type": "boolean" },
          "publishAfterCompleted": { "type": "boolean" },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": { "type": "boolean" },
          "hardwareTierIdentifier": { "type": "string" },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "overrideEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": { "type": "string" }
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledrun.api.ComputeClusterConfigSpecDto"
          }
        },
        "required": [
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "publishAfterCompleted",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "scheduledByUserId",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.environments.api.PaginatedRevisionInfo": {
        "properties": {
          "totalPages": { "type": "integer", "format": "int32" },
          "currentPage": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" }
        },
        "required": ["totalPages", "currentPage", "pageSize"]
      },
      "domino.environments.api.ProxyConfig": {
        "properties": {
          "internalPath": { "type": "string" },
          "port": { "type": "integer", "format": "int32" },
          "rewrite": { "type": "boolean" }
        },
        "required": ["internalPath", "port", "rewrite"]
      },
      "domino.workspaces.api.StageTime": {
        "properties": {
          "submissionTime": { "type": "integer", "format": "epoch" },
          "startTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "completedTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          }
        },
        "required": ["submissionTime"]
      },
      "domino.nucleus.dataset.ui.DataSetFileBrowserEntry": {
        "properties": {
          "isDir": { "type": "boolean", "nullable": true },
          "label": { "type": "string" },
          "sortableName": { "type": "string", "nullable": true },
          "fileName": { "type": "string", "nullable": true },
          "url": { "type": "string", "nullable": true },
          "inBytes": { "type": "integer", "format": "int64", "nullable": true }
        },
        "required": ["label"]
      },
      "domino.workspace.api.WorkspaceSessionStatusInfo": {
        "properties": {
          "rawExecutionDisplayStatus": { "type": "string" },
          "rawExecutionDisplayStatusUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isLoading": { "type": "boolean" },
          "isRunning": { "type": "boolean" },
          "isStoppable": { "type": "boolean" },
          "isCompleting": { "type": "boolean" },
          "isFailed": { "type": "boolean" },
          "isSuccessful": { "type": "boolean" },
          "isCompleted": { "type": "boolean" }
        },
        "required": [
          "rawExecutionDisplayStatus",
          "rawExecutionDisplayStatusUpdatedAt",
          "isLoading",
          "isRunning",
          "isStoppable",
          "isCompleting",
          "isFailed",
          "isSuccessful",
          "isCompleted"
        ]
      },
      "domino.provenance.api.ProvenanceCommit": {
        "properties": {
          "commitId": { "type": "string" },
          "branchName": { "type": "string" }
        },
        "required": ["commitId", "branchName"]
      },
      "domino.server.projects.api.ProjectGatewaySummary": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerName": { "type": "string" },
          "description": { "type": "string" },
          "visibility": {
            "type": "string",
            "enum": ["Public", "Searchable", "Private"]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayTag"
            }
          },
          "runCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.server.projects.api.ProjectGatewayRunCountForType"
            }
          },
          "latestResultTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "latestResultRunId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "relationship": {
            "type": "string",
            "enum": ["Owned", "Collaborating", "Suggested", "Popular"]
          },
          "projectType": { "type": "string", "enum": ["Analytic", "DataSet"] },
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "status": {
            "$ref": "#/components/schemas/domino.server.projects.api.ProjectStatus"
          },
          "mainGitRepositoryUri": { "type": "string", "nullable": true },
          "serviceProvider": {
            "type": "string",
            "nullable": true,
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "ownerName",
          "description",
          "visibility",
          "tags",
          "runCounts",
          "relationship",
          "projectType",
          "stageId",
          "status"
        ]
      },
      "domino.nucleus.project.models.ForkOrCopyProject": {
        "properties": {
          "name": { "type": "string", "nullable": true },
          "description": { "type": "string", "nullable": true },
          "visibility": {
            "type": "string",
            "nullable": true,
            "enum": ["Public", "Searchable", "Private"]
          },
          "ownerId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "collaborators": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.NewTagsDTO"
          }
        }
      },
      "domino.environments.api.RevisionOverview": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "number": { "type": "integer", "format": "int32" },
          "status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Pushing",
              "Killed",
              "Starting",
              "Queued",
              "Pulling",
              "Succeeded",
              "Failed",
              "Building"
            ]
          },
          "url": { "type": "string" },
          "availableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.environments.api.EnvironmentWorkspaceToolDefinition"
            }
          }
        },
        "required": ["id", "number", "url", "availableTools"]
      },
      "domino.workspaces.web.LinkWorkspaceToGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.datasetrw.api.DatasetRwDto": {
        "type": "object",
        "properties": {
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "author": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "snapshotIds": {
            "type": "array",
            "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
          },
          "description": { "nullable": true, "type": "string" },
          "statusLastUpdatedBy": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          },
          "datasetPath": { "type": "string" },
          "readWriteSnapshotId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": { "type": "string" },
          "createdTime": { "format": "int64", "type": "integer" },
          "statusLastUpdatedTime": { "format": "int64", "type": "integer" },
          "id": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "projectId": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "createdTime",
          "lifecycleStatus",
          "statusLastUpdatedBy",
          "statusLastUpdatedTime",
          "readWriteSnapshotId",
          "datasetPath"
        ]
      },
      "domino.activity.api.ProjectGoalCreateActivityMetadata": {
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true }
        },
        "required": ["title"]
      },
      "domino.workspace.api.WorkspaceSortableColumns.Value": {
        "properties": {}
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Organization identifier" },
          "organizationUserId": {
            "type": "string",
            "description": "User id of Organization user"
          },
          "name": { "type": "string", "description": "Organization name" },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMember"
            },
            "description": "List of the organization members"
          },
          "defaultEnvironment": {
            "type": "string",
            "description": "Default environment used in the organization"
          },
          "legacyDefaultEnvironment": {
            "type": "string",
            "description": "Legacy default environment used in the organization"
          }
        },
        "required": ["id", "name", "organizationUserId", "members"]
      },
      "domino.nucleus.organization.models.OrganizationMember": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "role": { "type": "string", "enum": ["Member", "Admin"] }
        },
        "required": ["id", "role"]
      },
      "domino.workspace.api.WorkspaceDatasetMountDto": {
        "properties": {
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshot": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDatasetSnapshotDto"
          },
          "datasetName": { "type": "string" },
          "containerPath": { "type": "string" },
          "isInput": { "type": "boolean" }
        },
        "required": ["datasetId", "datasetName", "containerPath", "isInput"]
      },
      "domino.workspaces.api.Comment": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commenter": {
            "$ref": "#/components/schemas/domino.workspaces.api.Commenter"
          },
          "commentBody": {
            "$ref": "#/components/schemas/domino.workspaces.api.CommentContent"
          },
          "created": { "type": "integer", "format": "epoch" }
        },
        "required": ["commentId", "commenter", "commentBody", "created"]
      },
      "domino.server.controlcenter.OrganizationStatsDTO": {
        "properties": {
          "id": { "type": "string" },
          "fullName": { "type": "string" },
          "totalComputeTimeInMillis": { "type": "integer", "format": "int64" },
          "totalComputeSpend": {
            "$ref": "#/components/schemas/domino.server.controlcenter.MoneyDTO"
          },
          "numberOfRuns": { "type": "integer", "format": "int32" },
          "numberOfProjectsWithRuns": { "type": "integer", "format": "int32" }
        },
        "required": [
          "id",
          "fullName",
          "totalComputeTimeInMillis",
          "totalComputeSpend",
          "numberOfRuns",
          "numberOfProjectsWithRuns"
        ]
      },
      "domino.projects.api.AssetPortfolioSet": {
        "properties": {
          "totalCount": { "type": "integer", "format": "int32" },
          "assetPortfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioElement"
            }
          },
          "filter": {
            "$ref": "#/components/schemas/domino.projects.api.AssetPortfolioPaginationFilter"
          }
        },
        "required": ["totalCount", "assetPortfolios", "filter"]
      },
      "domino.jobs.interface.JobsTimelineDiagnosticStatRecord": {
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "number", "format": "double" }
        },
        "required": ["name", "value"]
      },
      "domino.datasource.api.DataSourceConfigFieldInfoDto": {
        "properties": {
          "name": { "type": "string" },
          "label": { "type": "string" },
          "optional": { "type": "boolean" },
          "regex": { "type": "string" }
        },
        "required": ["name", "label", "optional", "regex"]
      },
      "domino.projects.web.RaiseBlockerToProject": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "blockerReason": { "type": "string" }
        },
        "required": ["projectId", "blockerReason"]
      },
      "domino.jobs.web.ArchiveComment": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["commentId"]
      },
      "DominoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
      "domino.jobs.web.LinkJobtoGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.gruz.api.DatasetMount": {
        "properties": {
          "containerPath": { "type": "string" },
          "datasetId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "isReadOnly": { "type": "boolean" },
          "storageMode": { "type": "string", "nullable": true },
          "resourceId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.ResourceId"
          },
          "resourcePath": { "type": "string", "nullable": true }
        },
        "required": ["containerPath", "isReadOnly"]
      },
      "domino.datamount.api.DataMountDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "volumeType": { "type": "string", "enum": ["Nfs", "Smb", "Efs"] },
          "pvcName": { "type": "string" },
          "pvId": { "type": "string" },
          "mountPath": { "type": "string" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "projects": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "readOnly": { "type": "boolean" },
          "isPublic": { "type": "boolean" },
          "isRegistered": { "type": "boolean" },
          "status": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "name",
          "volumeType",
          "pvcName",
          "pvId",
          "mountPath",
          "users",
          "projects",
          "readOnly",
          "isPublic",
          "isRegistered"
        ]
      },
      "domino.projects.api.DefaultOnDemandSparkClusterPropertiesSpec": {
        "properties": {
          "computeEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "executorCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "executorHardwareTierId": { "type": "string", "nullable": true },
          "executorStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": { "type": "string", "nullable": true },
          "maximumExecutionSlotsPerUser": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": ["maximumExecutionSlotsPerUser"]
      },
      "domino.server.controlcenter.UserStatsDTO": {
        "properties": {
          "id": { "type": "string" },
          "fullName": { "type": "string" },
          "totalComputeTimeInMillis": { "type": "integer", "format": "int64" },
          "totalComputeSpend": {
            "$ref": "#/components/schemas/domino.server.controlcenter.MoneyDTO"
          },
          "numberOfRuns": { "type": "integer", "format": "int32" },
          "numberOfProjectsWithRuns": { "type": "integer", "format": "int32" },
          "username": { "type": "string" }
        },
        "required": [
          "id",
          "fullName",
          "totalComputeTimeInMillis",
          "totalComputeSpend",
          "numberOfRuns",
          "numberOfProjectsWithRuns",
          "username"
        ]
      },
      "domino.provenance.web.UpsertProvenanceCheckpointRequest": {
        "properties": {
          "executionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "syncOperationInfo": {
            "$ref": "#/components/schemas/domino.provenance.api.SyncOperationInfo"
          },
          "commitMessage": { "type": "string" },
          "dfsCommitId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCommit"
          },
          "importedRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.provenance.api.ProvenanceGitRepo"
            }
          },
          "createdBy": { "type": "string", "enum": ["Sync", "ExecutionInit"] }
        },
        "required": [
          "executionId",
          "syncOperationInfo",
          "commitMessage",
          "importedRepositories",
          "createdBy"
        ]
      },
      "domino.files.interface.CommentContext": { "properties": {} },
      "SyncOperationType": {
        "type": "string",
        "description": "Type of sync operation taking place",
        "enum": ["onlyDfs", "onlyGit", "gitAndDfs"]
      },
      "domino.activity.api.ProjectLinkChangeActivityMetadata": {
        "properties": {
          "ticketKey": { "type": "string" },
          "ticketUrl": { "type": "string" },
          "projectLinkAction": { "type": "string", "enum": ["Link", "Unlink"] },
          "keepExistingGoals": { "type": "boolean" }
        },
        "required": [
          "ticketKey",
          "ticketUrl",
          "projectLinkAction",
          "keepExistingGoals"
        ]
      },
      "domino.projectManagement.api.DominoEntity": {
        "properties": {
          "entityId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "entityType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          }
        },
        "required": ["entityId", "entityType"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsRecorded": {
        "properties": {
          "productId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "timestampInSec": { "type": "integer", "format": "int64" }
        },
        "required": ["productId", "timestampInSec"]
      },
      "domino.projectManagement.web.UnlinkFileFromGoalRequest": {
        "properties": {
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["fileName", "commitId", "projectId", "goalId"]
      },
      "domino.nucleus.dataset.ui.SetLimitOverrideInput": {
        "properties": { "ignoreLimits": { "type": "boolean" } },
        "required": ["ignoreLimits"]
      },
      "domino.workspace.api.ComputeClusterConfigDto": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": { "type": "integer", "format": "int32" },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "type": "collection.immutable.map[string,string]",
            "nullable": true
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "masterHardwareTierId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.files.web.CreateFileComment": {
        "properties": {
          "comment": { "type": "string" },
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["comment", "fileName", "commitId", "projectId"]
      },
      "domino.common.modelproduct.AppCodeInfoRepositoryDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "linkText": { "type": "string" },
          "fullUrl": { "type": "string" },
          "commit": { "type": "string", "nullable": true },
          "commitResourceLink": { "type": "string", "nullable": true }
        },
        "required": ["id", "linkText", "fullUrl"]
      },
      "domino.projects.api.EnvironmentOwner": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" },
          "environmentOwnerType": {
            "type": "string",
            "enum": ["Organization", "Individual"]
          }
        },
        "required": ["id", "username", "environmentOwnerType"]
      },
      "domino.provenance.api.ProvenanceImportedProject": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "directoryName": { "type": "string", "nullable": true },
          "commitId": { "type": "string" },
          "release": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["projectId", "projectName", "ownerId", "commitId"]
      },
      "domino.workspace.api.git.StageLocalCommitFileRequest": {
        "properties": {
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "filePath": { "type": "string" }
        },
        "required": ["repoId", "filePath"]
      },
      "domino.workspaces.api.PaginationFilter": {
        "properties": {
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "latestTimeNano": { "type": "string", "nullable": true }
        },
        "required": ["limit", "offset"]
      },
      "domino.server.projects.api.Owner": {
        "properties": {
          "id": { "type": "string", "nullable": true },
          "userName": { "type": "string" }
        },
        "required": ["userName"]
      },
      "domino.common.run.interfaces.RunDTO": {
        "properties": { "runId": { "type": "string" } },
        "required": ["runId"]
      },
      "domino.nucleus.project.ProjectSettingsUpdateDto": {
        "properties": {
          "defaultEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "defaultEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "defaultHardwareTierId": { "type": "string", "nullable": true },
          "defaultVolumeSizeGiB": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "domino.files.interface.FileSearchQuery": {
        "properties": { "value": { "type": "string" } },
        "required": ["value"]
      },
      "domino.datasetrw.api.DatasetRwProjectDetailsDto": {
        "properties": {
          "sourceProjectName": { "type": "string" },
          "sourceProjectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "sourceProjectOwnerUsername": { "type": "string" },
          "sharedProjectNames": {
            "type": "array",
            "items": { "type": "string" }
          },
          "sharedProjectIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "sharedProjectOwnerUsernames": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "sourceProjectName",
          "sourceProjectId",
          "sourceProjectOwnerUsername",
          "sharedProjectNames",
          "sharedProjectIds",
          "sharedProjectOwnerUsernames"
        ]
      },
      "domino.workspaces.api.CommentContext": {
        "properties": {
          "commentType": {
            "type": "string",
            "enum": [
              "WorkspaceCommentThread",
              "WorkspaceResultFileCommentThread"
            ]
          },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "fileName": { "type": "string", "nullable": true },
          "commitId": { "type": "string", "nullable": true }
        },
        "required": ["commentType", "workspaceId"]
      },
      "domino.jobs.web.StartJobRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commandToRun": { "type": "string" },
          "commitId": { "type": "string", "nullable": true },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "overrideHardwareTierId": { "type": "string", "nullable": true },
          "dataSetMountConfigName": { "type": "string", "nullable": true },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ComputeClusterConfigSpecDto"
          },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "externalVolumeMounts": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["projectId", "commandToRun"]
      },
      "domino.dataset.api.DatasetSnapshotDto": {
        "type": "object",
        "properties": {
          "resourceId": { "type": "string" },
          "creationTime": { "format": "int64", "type": "integer" },
          "author": { "nullable": true, "type": "string" },
          "deletedByUser": { "nullable": true, "type": "string" },
          "description": { "nullable": true, "type": "string" },
          "lastUsedTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "version": { "format": "int32", "type": "integer" },
          "labels": { "type": "object" },
          "markedForDeletionTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "deleted": { "type": "boolean" },
          "deleteTime": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "storageSize": { "format": "int64", "type": "integer" },
          "datasetId": { "type": "string" },
          "id": { "type": "string" },
          "isPartialSize": { "type": "boolean" },
          "status": { "type": "string" }
        },
        "required": [
          "id",
          "resourceId",
          "datasetId",
          "version",
          "labels",
          "creationTime",
          "status",
          "deleted",
          "storageSize",
          "isPartialSize"
        ]
      },
      "domino.nucleus.dataset.ui.DatasetViewModel": {
        "type": "object",
        "properties": {
          "snapshotIds": { "type": "array", "items": { "type": "string" } },
          "name": { "type": "string" },
          "description": { "nullable": true, "type": "string" },
          "projectOwner": { "nullable": true, "type": "string" },
          "id": { "type": "string" },
          "projectName": { "nullable": true, "type": "string" },
          "tags": { "type": "object" }
        },
        "required": ["id", "name", "snapshotIds", "tags"]
      },
      "domino.jobs.web.JobEvents": {
        "properties": {
          "jobsUsageEvent": {
            "$ref": "#/components/schemas/domino.jobs.web.JobsUsageSocketEvent"
          },
          "jobStatusChangeEvent": {
            "$ref": "#/components/schemas/domino.jobs.web.JobStatusChangeSocketEvent"
          }
        },
        "required": ["jobsUsageEvent", "jobStatusChangeEvent"]
      },
      "domino.hardwaretier.api.HardwareTierIdentifier": {
        "properties": { "value": { "type": "string" } },
        "required": ["value"]
      },
      "domino.server.controlcenter.TopItemDTO": {
        "description": "Represents one of the values for some object for which a specific metric has one of the top values",
        "type": "object",
        "properties": {
          "unit": {
            "description": "What units this value is in (e.g., \"$\", \"hours\")",
            "type": "string"
          },
          "name": {
            "description": "Name of the object for which this metric is at the top",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the ranked metric value",
            "type": "string"
          },
          "value": {
            "format": "double",
            "description": "What is the current value of this metric",
            "type": "number"
          },
          "variation": {
            "format": "double",
            "description": "Derivative of the value between the previous state and current",
            "type": "number"
          },
          "username": { "type": "string", "nullable": true }
        },
        "required": ["id", "name", "value", "unit", "variation"]
      },
      "domino.common.modelproduct.AppVersionDetails": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "started": { "type": "integer", "format": "epoch" },
          "inputCommitId": { "type": "string" },
          "outputCommitId": { "type": "string", "nullable": true },
          "resourceUsage": {
            "$ref": "#/components/schemas/domino.common.modelproduct.AppResourceUsage"
          },
          "hardwareTierName": { "type": "string" },
          "executorDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.modelproduct.ExecutorDetails"
          },
          "environmentDetails": {
            "$ref": "#/components/schemas/domino.common.modelproduct.EnvironmentDetails"
          },
          "appCodeInfo": {
            "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoDto"
          },
          "status": { "type": "string" }
        },
        "required": [
          "id",
          "started",
          "inputCommitId",
          "resourceUsage",
          "hardwareTierName",
          "environmentDetails",
          "appCodeInfo",
          "status"
        ]
      },
      "domino.workspaces.web.ArchiveWorkspaceInput": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["workspaceId", "projectId"]
      },
      "domino.environments.api.EnvironmentWorkspaceToolDefinition": {
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "title": { "type": "string" },
          "iconUrl": { "type": "string", "nullable": true },
          "start": { "type": "array", "items": { "type": "string" } },
          "proxyConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.environments.api.ProxyConfig"
          },
          "supportedFileExtensions": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          }
        },
        "required": ["id", "name", "title", "start"]
      },
      "domino.nucleus.project.models.NewTags": {
        "properties": {
          "tagNames": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["tagNames"]
      },
      "domino.projects.api.ProjectGoalStageAndStatus": {
        "properties": {
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "isCompleted": { "type": "boolean" },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "lastStageUpdatedAt": { "type": "integer", "format": "epoch" }
        },
        "required": ["goalId", "isCompleted", "stage", "lastStageUpdatedAt"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTotalResponse": {
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatistics"
          }
        },
        "required": ["stats"]
      },
      "domino.workspace.web.UpdateWorkspaceRequest": {
        "properties": {
          "name": { "type": "string" },
          "environmentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "tools": { "type": "array", "items": { "type": "string" } },
          "clusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceClusterConfigDto"
          },
          "computeClusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.ComputeClusterConfigDto"
          }
        },
        "required": ["name", "environmentId", "hardwareTierId", "tools"]
      },
      "domino.datasource.api.DataSourceProxyConfigDto": {
        "properties": {
          "dataSourceType": { "type": "string" },
          "config": { "type": "collection.immutable.map[string,string]" }
        },
        "required": ["dataSourceType", "config"]
      },
      "domino.jobs.interface.ArtifactsStartStateDto": {
        "properties": {
          "projectArtifacts": {
            "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
          },
          "importedProjectArtifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.ArtifactsObjectDto"
            }
          }
        },
        "required": ["projectArtifacts", "importedProjectArtifacts"]
      },
      "domino.projects.api.repositories.AccessTypeDto": {
        "properties": {
          "accessType": { "type": "string" },
          "label": { "type": "string" }
        },
        "required": ["accessType", "label"]
      },
      "domino.activity.api.ProjectGoalAppLinkActivityMetadata": {
        "properties": {
          "action": { "type": "string", "enum": ["added", "removed"] },
          "modelProductId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "appVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectGoalTitle": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": [
          "action",
          "modelProductId",
          "appVersionId",
          "projectGoalTitle",
          "name"
        ]
      },
      "domino.projects.api.Comment": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commenter": {
            "$ref": "#/components/schemas/domino.projects.api.Commenter"
          },
          "commentBody": { "type": "string" },
          "created": { "type": "integer", "format": "epoch" },
          "updatedAt": { "type": "integer", "format": "epoch" }
        },
        "required": [
          "commentId",
          "commenter",
          "commentBody",
          "created",
          "updatedAt"
        ]
      },
      "domino.projects.api.OnDemandSparkClusterStatus": {
        "properties": {
          "clusterName": { "type": "string" },
          "clusterState": {
            "type": "string",
            "enum": ["Pending", "Stopping", "Starting", "Ready", "NotFound"]
          },
          "exists": { "type": "boolean" },
          "isReady": { "type": "boolean" },
          "workerCount": { "type": "integer", "format": "int32" }
        },
        "required": [
          "clusterName",
          "clusterState",
          "exists",
          "isReady",
          "workerCount"
        ]
      },
      "domino.jobs.web.JobRestartOperationRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "shouldUseOriginalInputCommit": { "type": "boolean" }
        },
        "required": ["projectId", "jobId", "shouldUseOriginalInputCommit"]
      },
      "domino.admin.interface.ComputeNodeOverview": {
        "properties": {
          "name": { "type": "string" },
          "status": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeStatus"
          },
          "utilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeUtilization"
          }
        },
        "required": ["name", "status", "utilization"]
      },
      "domino.activity.api.ProjectStageChangeActivityMetaData": {
        "properties": {
          "projectName": { "type": "string" },
          "fromStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          },
          "toStage": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStage"
          }
        },
        "required": ["projectName", "fromStage", "toStage"]
      },
      "domino.admin.interface.ExecutionOverview": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "computeGridType": {
            "type": "string",
            "enum": ["ClassicOnPremises", "ClassicAWS", "Kubernetes"]
          },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectIdentifier": {
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "startingUsername": { "type": "string", "nullable": true },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "status": { "type": "string" },
          "executionUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ExecutionUnitOverview"
            }
          },
          "created": { "type": "string", "format": "date-time" },
          "title": { "type": "string", "nullable": true },
          "workloadType": { "type": "string" },
          "computeClusterOverviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ComputeClusterOverview"
            }
          },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.OnDemandSparkClusterOverview"
          },
          "onDemandSparkExecutionUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.OnDemandSparkExecutionUnitOverview"
            }
          }
        },
        "required": [
          "id",
          "computeGridType",
          "projectId",
          "projectIdentifier",
          "hardwareTier",
          "status",
          "executionUnits",
          "created",
          "workloadType",
          "computeClusterOverviews",
          "onDemandSparkExecutionUnits"
        ]
      },
      "domino.workspaces.web.AutoSyncFrequencyRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "timeInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enableAutoSync": { "type": "boolean" }
        },
        "required": ["projectId", "enableAutoSync"]
      },
      "domino.datasetrw.web.FileCollisionRequest": {
        "properties": {
          "filePaths": { "type": "array", "items": { "type": "string" } },
          "fileCollisionSetting": {
            "type": "string",
            "nullable": true,
            "enum": ["Rename", "Ignore", "Overwrite"]
          }
        },
        "required": ["filePaths"]
      },
      "domino.projects.web.AddComment": {
        "properties": { "comment": { "type": "string" } },
        "required": ["comment"]
      },
      "domino.datasetrw.web.CreateDatasetRequest": {
        "properties": {
          "datasetName": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["datasetName", "projectId"]
      },
      "domino.files.interface.ProjectReadmeFile": {
        "properties": { "path": { "type": "string" } },
        "required": ["path"]
      },
      "domino.provenance.api.SyncOperationInfo": {
        "properties": {
          "syncOperationId": { "type": "string" },
          "syncOperationType": {
            "$ref": "#/components/schemas/SyncOperationType"
          }
        },
        "required": ["syncOperationId", "syncOperationType"]
      },
      "Information": {
        "type": "object",
        "properties": {
          "value": { "type": "number", "description": "Number being stored" },
          "unit": { "$ref": "#/components/schemas/StorageUnit" }
        },
        "required": ["value", "unit"]
      },
      "domino.activity.api.WorkspaceStatusActivityMetaData": {
        "properties": {
          "title": { "type": "string" },
          "number": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "currentStatus": { "type": "string" },
          "commentCount": { "type": "integer", "format": "int32" }
        },
        "required": [
          "title",
          "number",
          "status",
          "currentStatus",
          "commentCount"
        ]
      },
      "domino.workspaces.api.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.LogContent"
            }
          },
          "isComplete": { "type": "boolean" },
          "pagination": {
            "$ref": "#/components/schemas/domino.workspaces.api.PaginationFilter"
          }
        },
        "required": ["logContent", "isComplete", "pagination"]
      },
      "domino.computecluster.api.ComputeClusterType.Value": {
        "properties": {}
      },
      "domino.gruz.api.RunTrigger": {
        "properties": {
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "startingScheduledRunId": { "type": "string", "nullable": true },
          "command": {
            "$ref": "#/components/schemas/domino.gruz.api.RawRunCommand"
          },
          "commitId": { "type": "string" },
          "environmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "runMemoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.RunMemoryLimit"
          }
        },
        "required": ["command", "commitId"]
      },
      "domino.nucleus.modelproduct.models.ConsumerModelProduct": {
        "properties": {
          "modelProductType": {
            "type": "string",
            "enum": ["APP", "BATCH", "REPORT", "SCORER"]
          },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "publisher": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.user.Person"
          },
          "notificationRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.NotificationRecipient"
            }
          },
          "lastUpdated": { "type": "string", "format": "date-time" },
          "status": { "type": "string" },
          "media": { "type": "array", "items": { "type": "string" } },
          "openUrl": { "type": "string", "nullable": true },
          "projectUrl": { "type": "string", "nullable": true },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.Stats"
          },
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          },
          "runningAppUrl": { "type": "string", "nullable": true },
          "runningCommitId": { "type": "string", "nullable": true },
          "appAccessStatus": {
            "type": "string",
            "enum": ["ALLOWED", "PENDING", "REQUESTABLE", "NOT_ALLOWED"]
          }
        },
        "required": [
          "modelProductType",
          "name",
          "notificationRecipients",
          "lastUpdated",
          "status",
          "media",
          "projectId",
          "stats",
          "id",
          "visibility",
          "appAccessStatus"
        ]
      },
      "domino.projectManagement.api.PmComment": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "commentBody": { "type": "string" },
          "created": { "type": "integer", "format": "epoch" },
          "commenter": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.PmUser"
          },
          "updatedAt": { "type": "integer", "format": "epoch" },
          "dominoEntity": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          }
        },
        "required": ["id", "commentBody", "created", "updatedAt"]
      },
      "domino.projects.api.OnDemandSparkClusterDetailsView": {
        "properties": {
          "sparkClusterProperties": {
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "sparkClusterUri": { "type": "string" }
        },
        "required": ["sparkClusterProperties", "sparkClusterUri"]
      },
      "domino.datasource.api.DataSourceConfigDto": { "properties": {} },
      "domino.workspace.api.QueuedWorkspaceHistoryDetails": {
        "properties": {
          "expectedWait": { "type": "string" },
          "explanation": { "type": "string" },
          "helpText": { "type": "string" }
        },
        "required": ["expectedWait", "explanation", "helpText"]
      },
      "domino.gruz.api.HttpProxyConfig": {
        "properties": {
          "port": { "type": "integer", "format": "int32" },
          "internalPath": { "type": "string" },
          "rewrite": { "type": "boolean" },
          "requireSubdomain": { "type": "boolean" }
        },
        "required": ["port", "internalPath", "rewrite", "requireSubdomain"]
      },
      "domino.workspace.api.git.CommitAndPushReposResponseDto": {
        "properties": {
          "succeeded": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["succeeded", "message"]
      },
      "domino.workspace.api.WorkspaceDatasetConfigDto": {
        "properties": {
          "name": { "type": "string" },
          "resolutionCommit": { "type": "string" }
        },
        "required": ["name", "resolutionCommit"]
      },
      "domino.projects.api.ProjectGoal": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.EntityLink"
            }
          },
          "currentStage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "isComplete": { "type": "boolean" },
          "isDeleted": { "type": "boolean" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "createdAt": { "type": "integer", "format": "epoch" },
          "createdBy": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "lastTitleUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "lastDescriptionUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "linkedEntities",
          "currentStage",
          "isComplete",
          "isDeleted",
          "projectId",
          "createdAt",
          "createdBy"
        ]
      },
      "domino.datasetrw.web.CreateSnapshotRequest": {
        "properties": {
          "relativeFilePaths": {
            "type": "array",
            "items": { "type": "string" }
          },
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["relativeFilePaths", "datasetId"]
      },
      "domino.jobs.interface.CodeInfoRepositoryDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "linkText": { "type": "string" },
          "fullUrl": { "type": "string" },
          "commit": { "type": "string", "nullable": true },
          "commitResourceLink": { "type": "string", "nullable": true },
          "branch": { "type": "string", "nullable": true }
        },
        "required": ["id", "linkText", "fullUrl"]
      },
      "domino.files.interface.CommentThread": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.files.interface.Comment"
            }
          },
          "context": {
            "$ref": "#/components/schemas/domino.files.interface.CommentContext"
          }
        },
        "required": ["id", "comments", "context"]
      },
      "domino.common.modelproduct.EnvironmentDetails": {
        "properties": {
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": { "type": "string" },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["environmentName"]
      },
      "domino.files.interface.ProjectFile": {
        "properties": {
          "path": { "type": "string" },
          "lastModified": { "type": "integer", "format": "int64" },
          "size": { "type": "integer", "format": "int64" },
          "key": { "type": "string" },
          "goalIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["path", "lastModified", "size", "key", "goalIds"]
      },
      "domino.projects.web.UpdateProjectGoalTitle": {
        "properties": { "title": { "type": "string" } },
        "required": ["title"]
      },
      "domino.activity.api.ProjectStatus": {
        "properties": {
          "status": { "type": "string", "enum": ["active", "complete"] },
          "isBlocked": { "type": "boolean" },
          "blockedReason": { "type": "string", "nullable": true },
          "completedMessage": { "type": "string", "nullable": true }
        },
        "required": ["status", "isBlocked"]
      },
      "domino.admin.interface.ComputeNodeUtilization": {
        "properties": {
          "cpuUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeCpuUtilization"
          },
          "memUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeMemUtilization"
          },
          "diskUtilization": {
            "$ref": "#/components/schemas/domino.admin.interface.ComputeNodeDiskUtilization"
          }
        },
        "required": ["cpuUtilization", "memUtilization", "diskUtilization"]
      },
      "domino.jobs.interface.ComputeClusterConfigSpecDto": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": { "type": "integer", "format": "int32" },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "type": "collection.immutable.map[string,string]",
            "nullable": true
          }
        },
        "required": [
          "clusterType",
          "computeEnvironmentId",
          "masterHardwareTierId",
          "workerCount",
          "workerHardwareTierId"
        ]
      },
      "domino.workspace.api.git.PullReposRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repos": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["projectId", "repos"]
      },
      "domino.workspace.api.git.PullReposResponseDto": {
        "properties": {
          "succeeded": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["succeeded", "message"]
      },
      "domino.nucleus.project.models.UpdateProjectDescription": {
        "properties": { "description": { "type": "string" } },
        "required": ["description"]
      },
      "domino.datasetrw.api.DatasetRwUploadSessionDto": {
        "properties": {
          "uploadKey": { "type": "string" },
          "lastTouched": { "type": "integer", "format": "epoch" },
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["uploadKey", "lastTouched", "datasetId", "id"]
      },
      "domino.workspaces.api.WorkspaceStartedBy": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" }
        },
        "required": ["id", "username"]
      },
      "domino.nucleus.gateway.users.models.ProjectsDependencyGraph": {
        "properties": {
          "selectedProjectId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.gateway.users.models.ProjectDependencyView"
            }
          }
        },
        "required": ["nodes"]
      },
      "domino.workspaces.api.WorkspaceGoal": {
        "properties": {
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceNumber": { "type": "integer", "format": "int32" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["goalId", "workspaceId", "workspaceNumber", "projectId"]
      },
      "domino.workspace.api.WorkspaceDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "deleted": { "type": "boolean" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerName": { "type": "string" },
          "name": { "type": "string" },
          "state": { "type": "string" },
          "stateUpdatedAt": { "type": "string", "format": "date-time" },
          "initConfig": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceInitConfigDto"
          },
          "configTemplate": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceConfigDto"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "importedProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceImportedProject"
            }
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceImportedGitRepo"
            }
          },
          "mostRecentSession": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionDto"
          },
          "sessionStats": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStatsDto"
          },
          "isLegacy": { "type": "boolean" },
          "isReproduced": { "type": "boolean" }
        },
        "required": [
          "id",
          "deleted",
          "projectId",
          "ownerId",
          "ownerName",
          "name",
          "state",
          "stateUpdatedAt",
          "initConfig",
          "configTemplate",
          "createdAt",
          "importedProjects",
          "importedGitRepos",
          "sessionStats",
          "isLegacy",
          "isReproduced"
        ]
      },
      "domino.datasource.api.DataSourceTypeConfigMetadataDto": {
        "properties": {
          "dataSourceType": {
            "type": "string",
            "enum": ["SnowflakeConfig", "RedshiftConfig"]
          },
          "config": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasource.api.DataSourceConfigFieldInfoDto"
            }
          }
        },
        "required": ["dataSourceType", "config"]
      },
      "domino.common.modelproduct.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.LogContent"
            }
          },
          "isComplete": { "type": "boolean" },
          "pagination": {
            "$ref": "#/components/schemas/domino.common.modelproduct.PaginationFilter"
          }
        },
        "required": ["logContent", "isComplete", "pagination"]
      },
      "domino.projectManagement.api.PmTicket": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "ticketType": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketType"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
          },
          "title": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmComment"
            }
          },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "updatedAt": { "type": "integer", "format": "epoch" },
          "subTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicket"
            }
          }
        },
        "required": [
          "id",
          "ticketType",
          "stage",
          "title",
          "comments",
          "ticketMetadata",
          "updatedAt",
          "subTickets"
        ]
      },
      "domino.files.web.ArchiveFileComment": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentThreadId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "commentThreadId", "commentId"]
      },
      "domino.gruz.api.RawRunCommand": {
        "properties": {
          "runCommandType": {
            "type": "string",
            "enum": ["App", "Direct", "InteractiveSession", "Argv", "Launcher"]
          },
          "argv": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          },
          "name": { "type": "string", "nullable": true },
          "title": { "type": "string", "nullable": true },
          "commands": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          },
          "initCommand": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          },
          "networkingConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.ContainerNetworkingConfig"
          },
          "httpProxy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.HttpProxyConfig"
          },
          "isGitBased": { "type": "boolean", "nullable": true },
          "commandString": { "type": "string", "nullable": true },
          "launcherId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "values": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.LauncherValue"
            }
          }
        },
        "required": ["runCommandType"]
      },
      "domino.workspaces.api.WorkspaceRuntimeExecutionDetails": {
        "properties": {
          "executorInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.ExecutorInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/domino.workspaces.api.Environment"
          },
          "hardwareTier": {
            "$ref": "#/components/schemas/domino.workspaces.api.HardwareTierDetails"
          }
        },
        "required": ["environment", "hardwareTier"]
      },
      "domino.workspaces.api.ListWorkspaceStatus": { "properties": {} },
      "domino.credential.web.CreateRequest": {
        "properties": {
          "dataSourceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.FullCredentialDto"
          },
          "owner": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["dataSourceId", "credential", "owner", "users"]
      },
      "domino.projectManagement.api.PmCredentials": { "properties": {} },
      "domino.projects.api.repositories.responses.GetRepoBrowseApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBrowserEntryDTO"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBrowserSummaryDTO"
          }
        },
        "required": ["items", "summary"]
      },
      "domino.activity.api.CommentActivityMetaData": {
        "properties": {
          "commentedOn": {
            "type": "string",
            "enum": ["project", "job", "goal", "workspace", "file"]
          },
          "commentedOnMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnMetaData"
          },
          "operation": {
            "type": "string",
            "enum": ["Archived", "Updated", "Created"]
          },
          "commentData": { "type": "string" }
        },
        "required": [
          "commentedOn",
          "commentedOnMetaData",
          "operation",
          "commentData"
        ]
      },
      "domino.jobs.interface.RepositoryChanges": {
        "properties": {
          "created": { "type": "array", "items": { "type": "string" } },
          "modified": { "type": "array", "items": { "type": "string" } },
          "deleted": { "type": "array", "items": { "type": "string" } },
          "staged": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["created", "modified", "deleted", "staged"]
      },
      "domino.workspace.api.WorkspaceImportedGitRepo": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "ref": { "type": "string" }
        },
        "required": ["id", "name", "ref"]
      },
      "domino.workspaces.api.WorkspaceRepositoryStatus": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceRepositoryState"
            }
          }
        },
        "required": ["repositories"]
      },
      "domino.projectManagement.api.ResponseMessage": {
        "properties": { "message": { "type": "string" } },
        "required": ["message"]
      },
      "domino.jobs.interface.ExecutorInfo": {
        "properties": {
          "executorInstanceId": { "type": "string" },
          "region": { "type": "string" },
          "humanName": { "type": "string", "nullable": true },
          "publicAddress": { "type": "string", "nullable": true },
          "privateAddress": { "type": "string", "nullable": true }
        },
        "required": ["executorInstanceId", "region"]
      },
      "domino.gitproviders.api.RepoTypeCapabilitiesDTO": {
        "properties": {
          "repoCreationEnabled": { "type": "boolean" },
          "repoListingEnabled": { "type": "boolean" },
          "ownerListingEnabled": { "type": "boolean" }
        },
        "required": [
          "repoCreationEnabled",
          "repoListingEnabled",
          "ownerListingEnabled"
        ]
      },
      "domino.jobs.interface.JobStartedBy": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" }
        },
        "required": ["id", "username"]
      },
      "domino.common.modelproduct.AppGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "appVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId", "appVersionId"]
      },
      "domino.projectManagement.api.PmProjectSummary": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "key": { "type": "string" },
          "name": { "type": "string" },
          "link": { "type": "string" }
        },
        "required": ["id", "key", "name", "link"]
      },
      "domino.gruz.api.CustomHostnameMapping": {
        "properties": {
          "hostname": { "type": "string" },
          "targetIp": { "type": "string" }
        },
        "required": ["hostname", "targetIp"]
      },
      "domino.projects.api.repositories.responses.browse.RepoDirectorySummaryDTO": {
        "properties": {
          "path": { "type": "string" },
          "commit": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": ["path", "commit"]
      },
      "domino.workspaces.api.WorkspaceRepositoryState": {
        "properties": {
          "name": { "type": "string" },
          "status": {
            "type": "string",
            "enum": [
              "Unpushed",
              "Unpushed and Dirty",
              "Clean",
              "Unknown",
              "Modified"
            ]
          },
          "changes": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.RepositoryChanges"
          }
        },
        "required": ["name", "status"]
      },
      "domino.nucleus.file.ProjectFileDeprecated": {
        "properties": {
          "path": { "type": "domino.filesync.sync.relativefilepath" },
          "lastModified": { "type": "integer", "format": "int64" },
          "size": { "type": "integer", "format": "int64" },
          "key": { "type": "domino.filesync.sync.sha1" }
        },
        "required": ["path", "lastModified", "size", "key"]
      },
      "domino.files.interface.Comment": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentedBy": {
            "$ref": "#/components/schemas/domino.files.interface.CommentedBy"
          },
          "commentBody": { "type": "string" },
          "createdAt": { "type": "integer", "format": "epoch" }
        },
        "required": ["commentId", "commentedBy", "commentBody", "createdAt"]
      },
      "domino.datasetrw.web.FilesToDeleteRequest": {
        "properties": {
          "relativePaths": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["relativePaths"]
      },
      "domino.workspace.api.InitialCommitsDto": { "properties": {} },
      "domino.datasource.web.UpdateDataSourceCredentialRequest": {
        "properties": {
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          },
          "username": { "type": "string", "nullable": true },
          "password": { "type": "string", "nullable": true }
        },
        "required": ["credentialType"]
      },
      "domino.jobs.interface.JobResultFiles": {
        "properties": {
          "commitId": { "type": "string" },
          "fileMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.ResultFileMetadata"
            }
          }
        },
        "required": ["commitId", "fileMetadata"]
      },
      "domino.nucleus.dataset.ui.DatasetProjectMountSummaryViewModel": {
        "properties": {
          "datasetId": { "type": "string" },
          "snapshotId": { "nullable": true, "type": "string" },
          "name": { "type": "string" },
          "ownerName": { "type": "string" },
          "projectName": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "storageSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isPartialSize": { "type": "boolean" },
          "requestLatest": { "type": "boolean" },
          "requestedTag": { "type": "string", "nullable": true },
          "requestedVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "latestVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalAvailableVersions": { "type": "integer", "format": "int32" },
          "path": { "type": "string" }
        },
        "required": [
          "datasetId",
          "name",
          "ownerName",
          "projectName",
          "isPartialSize",
          "requestLatest",
          "totalAvailableVersions",
          "path"
        ]
      },
      "domino.datasetrw.api.DatasetRwSnapshotFilesViewDto": {
        "properties": {
          "directorySize": { "type": "string", "nullable": true },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwFileDetailsRowDto"
            }
          }
        },
        "required": ["rows"]
      },
      "domino.nucleus.lib.auth.PrincipalWithFeatureFlags": {
        "properties": {
          "isAnonymous": { "type": "boolean" },
          "isAdmin": { "type": "boolean" },
          "canonicalId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "canonicalName": { "type": "string", "nullable": true },
          "allowedSystemOperations": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EditCentralConfig",
                "ManageOrganizations",
                "UpdateUser",
                "ViewUsage",
                "ViewProjectSizes",
                "ListAllProjects",
                "StopRuns",
                "ViewExecutors",
                "UseK8sDashboard",
                "EditEnvironmentsAsOwner",
                "StopServer",
                "GeneratePasswordResetLinks",
                "ViewRevenue",
                "ActAsProjectAdmin",
                "ViewMetrics",
                "ViewLogs",
                "RunMongoDBCommands",
                "ManageEnvironments",
                "ExecuteRunsForFree",
                "ViewGlobalEnvironments",
                "ViewAdminMenu",
                "ViewUserList",
                "ManageBuilds",
                "ClearProjectBlobs",
                "CurateProjects",
                "ViewProjectList",
                "ViewEverythingInControlCenter",
                "RestartNucleus",
                "ManageHardwareTiers",
                "TriggerSearchIndexing",
                "ManageProjectTags",
                "ResetIndex",
                "SetUserSystemRoles",
                "ManageFeatureFlags",
                "ViewAdminDashboard",
                "PreviewProjects",
                "ManageExecutors",
                "MigrateRunLogs",
                "ReadKubernetes",
                "ViewSearchIndex"
              ]
            }
          },
          "featureFlags": { "type": "array", "items": { "type": "string" } },
          "booleanSettings": { "type": "array", "items": { "type": "string" } },
          "mixpanelSettings": {
            "$ref": "#/components/schemas/domino.nucleus.lib.auth.MixpanelSettings"
          }
        },
        "required": [
          "isAnonymous",
          "isAdmin",
          "allowedSystemOperations",
          "featureFlags",
          "booleanSettings",
          "mixpanelSettings"
        ]
      },
      "domino.workspaces.api.Commenter": {
        "properties": {
          "commenterId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" },
          "fullName": { "type": "string" }
        },
        "required": ["commenterId", "username", "fullName"]
      },
      "domino.gruz.api.StopRequest": {
        "properties": {
          "saveChanges": { "type": "boolean" },
          "commitMessage": { "type": "string", "nullable": true },
          "saveDatasets": { "type": "boolean", "nullable": true },
          "stoppingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["saveChanges"]
      },
      "domino.common.ProjectId": {
        "properties": {
          "ownerUsername": { "type": "string" },
          "projectName": { "type": "string" }
        },
        "required": ["ownerUsername", "projectName"]
      },
      "domino.files.interface.FileGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "fileName": { "type": "string" },
          "commitId": { "type": "string" }
        },
        "required": ["projectId", "goalId", "fileName", "commitId"]
      },
      "domino.common.modelproduct.AppCodeInfoDto": {
        "properties": {
          "mainRepo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoRepositoryDto"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.AppCodeInfoRepositoryDto"
            }
          }
        },
        "required": ["importedGitRepos"]
      },
      "domino.projectManagement.api.FullSyncStatus": {
        "properties": {
          "syncStatus": {
            "type": "string",
            "enum": ["InProgress", "Completed", "Failed"]
          },
          "lastSyncInitiatedAt": { "type": "integer", "format": "epoch" }
        },
        "required": ["syncStatus", "lastSyncInitiatedAt"]
      },
      "domino.modelmanager.api.ModelApiLast24HourInvocationCount": {
        "properties": {
          "modelVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "statusCode": { "type": "integer", "format": "int32" },
          "invocationCount": { "type": "integer", "format": "int64" }
        },
        "required": ["modelVersionId", "statusCode", "invocationCount"]
      },
      "domino.nucleus.modelproduct.models.PermissionsData": {
        "description": "ModelProduct permissions",
        "type": "object",
        "properties": {
          "appAccessStatus": {
            "type": "string",
            "enum": ["ALLOWED", "PENDING", "REQUESTABLE", "NOT_ALLOWED"]
          },
          "pendingInvitations": {
            "type": "array",
            "items": { "type": "string" }
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "AUTHENTICATED",
              "GRANT_BASED",
              "GRANT_BASED_STRICT"
            ]
          },
          "discoverable": { "type": "boolean" },
          "accessRequestStatuses": {
            "additionalProperties": { "type": "string" },
            "type": "object"
          }
        },
        "required": [
          "visibility",
          "accessRequestStatuses",
          "pendingInvitations",
          "discoverable",
          "appAccessStatus"
        ]
      },
      "domino.common.user.LiteUserResponseDTO": {
        "properties": { "isLiteUser": { "type": "boolean" } },
        "required": ["isLiteUser"]
      },
      "domino.launcherjob.api.PostParameter": {
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["key", "value"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsCount": {
        "properties": {
          "productId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "count": { "type": "integer", "format": "int64" }
        },
        "required": ["productId", "count"]
      },
      "domino.jobs.interface.LogContent": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "logType": {
            "type": "string",
            "enum": ["stdout", "stderr", "prepareoutput", "complete"]
          },
          "log": { "type": "string" },
          "size": { "type": "integer", "format": "int64" }
        },
        "required": ["timestamp", "logType", "log", "size"]
      },
      "domino.server.projects.api.ProjectGatewayRunCountForType": {
        "properties": {
          "runType": {
            "type": "string",
            "enum": [
              "Other",
              "SSHProxy",
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace"
            ]
          },
          "executingCount": { "type": "integer", "format": "int32" },
          "stoppedCount": { "type": "integer", "format": "int32" }
        },
        "required": ["runType", "executingCount", "stoppedCount"]
      },
      "domino.server.projects.domain.entities.ProjectGitRepository": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "uriHost": { "type": "string" },
          "uriPort": { "type": "string", "nullable": true },
          "uriPath": { "type": "string" },
          "defaultRef": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "name": { "type": "string", "nullable": true },
          "serviceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          }
        },
        "required": [
          "id",
          "uriHost",
          "uriPath",
          "defaultRef",
          "serviceProvider"
        ]
      },
      "domino.datasource.web.UpdateDataSourceMetadataRequest": {
        "properties": { "description": { "type": "string", "nullable": true } }
      },
      "domino.datasetrw.api.DatasetRwDetailsDto": {
        "type": "object",
        "properties": {
          "datasetPath": { "type": "string" },
          "projects": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectDetailsDto"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "author": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "snapshotIds": {
            "type": "array",
            "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
          },
          "readWriteSnapshotId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "name": { "type": "string" },
          "description": { "nullable": true, "type": "string" },
          "id": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "projects",
          "lifecycleStatus",
          "readWriteSnapshotId",
          "datasetPath"
        ]
      },
      "domino.projects.api.ProjectSummary": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "visibility": { "type": "string" },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerUsername": { "type": "string" },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectGitRepositoryTemp"
          },
          "importedGitRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.GitRepositoryDTO"
            }
          },
          "collaboratorIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{40}$" }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectTagDTO"
            }
          },
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "visibility",
          "ownerId",
          "ownerUsername",
          "importedGitRepositories",
          "collaboratorIds",
          "collaborators",
          "tags",
          "stageId",
          "status"
        ]
      },
      "domino.workspaces.web.WorkspaceStatusChangeSocketEvent": {
        "properties": {
          "correlationId": { "type": "string" },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "room": { "type": "string" },
          "status": { "type": "string" },
          "timestamp": { "type": "integer", "format": "epoch" },
          "startedBy": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": [
          "correlationId",
          "workspaceId",
          "projectId",
          "room",
          "status",
          "timestamp"
        ]
      },
      "domino.workspaces.web.StopDiscardWorkspaceDetails": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["workspaceId"]
      },
      "domino.nucleus.modelproduct.models.UninviteRequest": {
        "properties": { "email": { "type": "string" } },
        "required": ["email"]
      },
      "domino.datasetrw.web.FiletaskUpdateRequest": {
        "properties": {
          "id": { "type": "string" },
          "key": { "type": "string" },
          "taskType": { "type": "string" },
          "status": { "type": "string" },
          "errorMsg": { "type": "string" }
        },
        "required": ["id", "key", "taskType", "status", "errorMsg"]
      },
      "domino.jobs.interface.QueuedJobHistoryDetails": {
        "properties": {
          "expectedWait": { "type": "string" },
          "explanation": { "type": "string" },
          "helpText": { "type": "string" }
        },
        "required": ["expectedWait", "explanation", "helpText"]
      },
      "StorageUnit": {
        "type": "string",
        "description": "Unit of number being stored",
        "enum": [
          "B",
          "o",
          "KB",
          "KiB",
          "MB",
          "MiB",
          "GB",
          "GiB",
          "TB",
          "TiB",
          "PB",
          "PiB",
          "EB",
          "EiB",
          "ZB",
          "ZiB",
          "YB",
          "YiB",
          "bit",
          "Kbit",
          "Kibit",
          "Mbit",
          "Mibit",
          "Gbit",
          "Gibit",
          "Tbit",
          "Tibit",
          "Pbit",
          "Pibit",
          "Ebit",
          "Eibit",
          "Zbit",
          "Zibit",
          "Ybit",
          "Yibit"
        ]
      },
      "domino.computegrid.ResourceUsage": {
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.UsageSnapshot"
            }
          }
        },
        "required": ["snapshots"]
      },
      "domino.modelmanager.web.UnlinkmodelFromGoal": {
        "properties": {
          "modelId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "modelVersion": { "type": "integer", "format": "int32" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["modelId", "modelVersion", "projectId", "goalId"]
      },
      "domino.jobs.interface.JobsTimelineRecord": {
        "properties": {
          "jobNumber": { "type": "integer", "format": "int32" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobStartTime": { "type": "integer", "format": "epoch" },
          "jobTitle": { "type": "string" },
          "jobStatus": { "type": "string" },
          "diagnosticStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.JobsTimelineDiagnosticStatRecord"
            }
          }
        },
        "required": [
          "jobNumber",
          "jobId",
          "jobStartTime",
          "jobTitle",
          "jobStatus",
          "diagnosticStats"
        ]
      },
      "domino.jobs.interface.VolumeMount": {
        "properties": {
          "mountPath": { "type": "string" },
          "subPath": { "type": "string", "nullable": true },
          "readOnly": { "type": "boolean" }
        },
        "required": ["mountPath", "readOnly"]
      },
      "domino.workspaces.api.VolumeMount": {
        "properties": {
          "mountPath": { "type": "string" },
          "subPath": { "type": "string", "nullable": true },
          "readOnly": { "type": "boolean" }
        },
        "required": ["mountPath", "readOnly"]
      },
      "domino.projectManagement.api.LinkedProjectDetails": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "ticketId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "ticketKey": { "type": "string" },
          "ticketLink": { "type": "string" }
        },
        "required": [
          "projectId",
          "projectName",
          "ticketId",
          "ticketKey",
          "ticketLink"
        ]
      },
      "domino.nucleus.modelproduct.models.GrantAccessRequired": {
        "properties": {
          "modelProduct": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.ModelProduct"
          }
        },
        "required": ["modelProduct"]
      },
      "domino.datasetrw.api.DatasetRwSnapshotAdminSummaryDto": {
        "properties": {
          "snapshot": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwSnapshotDto"
          },
          "datasetName": { "type": "string" },
          "ownerUsername": { "type": "string", "nullable": true },
          "projectName": { "type": "string" }
        },
        "required": ["snapshot", "datasetName", "projectName"]
      },
      "domino.admin.interface.UserProjectEntry": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "ownerUsername": { "type": "string", "nullable": true },
          "ownerName": { "type": "string", "nullable": true },
          "name": { "type": "string" },
          "created": { "type": "string", "format": "date-time" },
          "runs": { "type": "integer", "format": "int64" },
          "lastRunStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "totalRunTimeInHours": { "type": "number", "format": "double" },
          "archived": { "type": "boolean" }
        },
        "required": [
          "projectId",
          "name",
          "created",
          "runs",
          "totalRunTimeInHours",
          "archived"
        ]
      },
      "domino.workspace.api.git.MergeConflictResolutionResponseDto": {
        "properties": {
          "succeededRepoIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "failedRepoIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "failedReason": { "type": "string", "nullable": true }
        },
        "required": ["succeededRepoIds", "failedRepoIds"]
      },
      "domino.files.web.LinkFileToGoal": {
        "properties": {
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["fileName", "commitId", "projectId", "goalId"]
      },
      "domino.workspaces.api.AvailableWorkspaceTools": {
        "properties": {
          "workspaceTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceDefinitionDto"
            }
          }
        },
        "required": ["workspaceTools"]
      },
      "domino.workspace.api.git.ContinueMergeConflictResolutionResponseDto": {
        "properties": {
          "succeeded": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["succeeded", "message"]
      },
      "domino.workspace.api.git.StageCurrentLocalFileRequest": {
        "properties": {
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "filePath": { "type": "string" }
        },
        "required": ["repoId", "filePath"]
      },
      "NewOrganization": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Organization name" },
          "email": {
            "type": "string",
            "description": "Organization email used to create the organization user"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.organization.models.OrganizationMember"
            },
            "description": "List of members the organization should have"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl",
          "id"
        ]
      },
      "domino.gruz.api.RawRun": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "status": { "type": "string" },
          "trigger": {
            "$ref": "#/components/schemas/domino.gruz.api.RunTrigger"
          },
          "meta": { "$ref": "#/components/schemas/domino.gruz.api.RunMeta" },
          "output": { "$ref": "#/components/schemas/domino.gruz.api.RunOutput" }
        },
        "required": ["id", "projectId", "status", "trigger", "meta", "output"]
      },
      "domino.jobs.interface.DependentProject": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitId": { "type": "string" }
        },
        "required": ["projectId", "commitId"]
      },
      "domino.projects.api.repositories.responses.browse.RepoBranchSummaryDTO": {
        "properties": {
          "branchName": { "type": "string" },
          "commit": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
          }
        },
        "required": ["branchName", "commit"]
      },
      "domino.workspace.api.WorkspaceSessionStartDto": {
        "properties": { "time": { "type": "integer", "format": "int64" } },
        "required": ["time"]
      },
      "domino.computecluster.api.SparkClusterPropsDto": {
        "properties": {
          "computeEnvironment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "executorCount": { "type": "integer", "format": "int32" },
          "executorHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "volumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          }
        },
        "required": [
          "computeEnvironment",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.computecluster.api.ComputeClusterConfigResponseDto": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "computeEnvironment": {
            "$ref": "#/components/schemas/domino.environments.api.EnvironmentRevisionSummary"
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "masterHardwareTierName": { "type": "string" },
          "workerCount": { "type": "integer", "format": "int32" },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerHardwareTierName": { "type": "string" },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "type": "collection.immutable.map[string,string]",
            "nullable": true
          }
        },
        "required": [
          "clusterType",
          "computeEnvironment",
          "masterHardwareTierId",
          "masterHardwareTierName",
          "workerCount",
          "workerHardwareTierId",
          "workerHardwareTierName"
        ]
      },
      "domino.workspaces.api.Environment": {
        "properties": {
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": { "type": "string" },
          "environmentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["environmentName", "environmentId"]
      },
      "domino.credential.api.VisibleCredentialDto": {
        "properties": {
          "visibleCredentials": {
            "type": "collection.immutable.map[string,string]"
          },
          "credentialType": {
            "type": "string",
            "enum": ["Individual", "Shared"]
          }
        },
        "required": ["visibleCredentials", "credentialType"]
      },
      "domino.workspaces.api.QueuedWorkspaceHistoryDetails": {
        "properties": {
          "expectedWait": { "type": "string" },
          "explanation": { "type": "string" },
          "helpText": { "type": "string" }
        },
        "required": ["expectedWait", "explanation", "helpText"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTimeseries": {
        "properties": {
          "timestampSec": { "type": "integer", "format": "int64" },
          "stats": {
            "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatistics"
          }
        },
        "required": ["timestampSec", "stats"]
      },
      "domino.admin.interface.ComputeNodeDiskUtilization": {
        "properties": {
          "total": { "type": "number", "format": "double" },
          "used": { "type": "number", "format": "double" }
        },
        "required": ["total", "used"]
      },
      "domino.gruz.api.ContainerNetworkingConfig": {
        "properties": {
          "httpProxyPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "autoBoundPorts": {
            "type": "array",
            "items": { "type": "integer", "format": "int32" }
          },
          "verbatimBoundPorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.VerbatimBoundPort"
            }
          },
          "allowedVerbatimPortsRange": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.PortsRange"
          },
          "executorHostnameMapping": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.ExecutorHostnameMapping"
          },
          "customHostnameMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.CustomHostnameMapping"
            }
          }
        },
        "required": [
          "autoBoundPorts",
          "verbatimBoundPorts",
          "customHostnameMappings"
        ]
      },
      "domino.nucleus.gateway.users.models.ProjectDependencyView": {
        "properties": {
          "projectId": {
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "projectType": { "type": "string", "enum": ["Analytic", "DataSet"] },
          "dependencies": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/domino.common.ProjectId" }
          }
        },
        "required": ["projectId", "projectType", "dependencies"]
      },
      "domino.common.modelproduct.PaginationFilter": {
        "properties": {
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "latestTimeNano": { "type": "string", "nullable": true }
        },
        "required": ["limit", "offset"]
      },
      "domino.projectManagement.api.DominoProjectToPmTicketMetadata": {
        "properties": {
          "mapType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "description": { "type": "string" },
          "title": { "type": "string" },
          "updatedAt": { "type": "integer", "format": "epoch" },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketType"
            }
          },
          "ticketStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
            }
          }
        },
        "required": [
          "mapType",
          "ticketMetadata",
          "description",
          "title",
          "updatedAt",
          "ticketTypes",
          "ticketStages"
        ]
      },
      "domino.workspaces.api.DependentExternalVolumeMount": {
        "properties": {
          "name": { "type": "string" },
          "mount": {
            "$ref": "#/components/schemas/domino.workspaces.api.VolumeMount"
          }
        },
        "required": ["name", "mount"]
      },
      "domino.workspace.api.git.CancelMergeConflictResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          },
          "shouldRevertLastCommit": { "type": "boolean" }
        },
        "required": ["repositories", "shouldRevertLastCommit"]
      },
      "domino.jobs.interface.DependentExternalVolumeMount": {
        "properties": {
          "name": { "type": "string" },
          "mount": {
            "$ref": "#/components/schemas/domino.jobs.interface.VolumeMount"
          }
        },
        "required": ["name", "mount"]
      },
      "ComputeClusterType": {
        "type": "string",
        "description": "Type of compute cluster",
        "enum": ["Spark", "Ray", "Dask"]
      },
      "domino.activity.api.AllMetadata": {
        "properties": {
          "jobStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.JobStatusActivityMetaData"
          },
          "workspaceStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.WorkspaceStatusActivityMetaData"
          },
          "commentActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentActivityMetaData"
          },
          "commentedOnJobMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnJobMetaData"
          },
          "commentedOnWorkspaceMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnWorkspaceMetaData"
          },
          "commentedOnFileMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnFileMetaData"
          },
          "commentedOnProjectGoalMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.CommentedOnProjectGoalMetaData"
          },
          "projectStageChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStageChangeActivityMetaData"
          },
          "projectStatusChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectStatusChangeActivityMetaData"
          },
          "appStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.AppStatusActivityMetaData"
          },
          "modelVersionStatusActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ModelVersionStatusActivityMetaData"
          },
          "scheduleJobActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ScheduleJobActivityMetaData"
          },
          "scheduleJobEditActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.ScheduleJobEditActivityMetaData"
          },
          "fileChangeActivityMetaData": {
            "$ref": "#/components/schemas/domino.activity.api.FileChangeActivityMetaData"
          },
          "projectGoalCreateActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalCreateActivityMetadata"
          },
          "projectGoalStatusChangeActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalStatusChangeActivityMetadata"
          },
          "projectGoalUpdateTitleActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalUpdateTitleActivityMetadata"
          },
          "projectGoalUpdateDescriptionActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalUpdateDescriptionActivityMetadata"
          },
          "projectGoalFileLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalFileLinkActivityMetadata"
          },
          "projectGoalJobLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalJobLinkActivityMetadata"
          },
          "projectGoalWorkspaceLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalWorkspaceLinkActivityMetadata"
          },
          "projectGoalAppLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalAppLinkActivityMetadata"
          },
          "projectGoalModelLinkActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectGoalModelLinkActivityMetadata"
          },
          "projectLinkChangeActivityMetadata": {
            "$ref": "#/components/schemas/domino.activity.api.ProjectLinkChangeActivityMetadata"
          }
        },
        "required": [
          "jobStatusActivityMetaData",
          "workspaceStatusActivityMetaData",
          "commentActivityMetaData",
          "commentedOnJobMetaData",
          "commentedOnWorkspaceMetaData",
          "commentedOnFileMetaData",
          "commentedOnProjectGoalMetaData",
          "projectStageChangeActivityMetaData",
          "projectStatusChangeActivityMetaData",
          "appStatusActivityMetaData",
          "modelVersionStatusActivityMetaData",
          "scheduleJobActivityMetaData",
          "scheduleJobEditActivityMetaData",
          "fileChangeActivityMetaData",
          "projectGoalCreateActivityMetadata",
          "projectGoalStatusChangeActivityMetadata",
          "projectGoalUpdateTitleActivityMetadata",
          "projectGoalUpdateDescriptionActivityMetadata",
          "projectGoalFileLinkActivityMetadata",
          "projectGoalJobLinkActivityMetadata",
          "projectGoalWorkspaceLinkActivityMetadata",
          "projectGoalAppLinkActivityMetadata",
          "projectGoalModelLinkActivityMetadata",
          "projectLinkChangeActivityMetadata"
        ]
      },
      "domino.workspace.api.WorkspaceQuotaStatusDto": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OverQuotaForMaxWorkspacesPerUserPerProject",
              "OverQuotaForMaxAllocatedVolumeSizeAcrossAllWorkspaces",
              "QuotaNotExceeded",
              "OverQuotaForMaxWorkspacesPerUser",
              "OverQuotaForMaxWorkspaces"
            ]
          },
          "currentValue": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "limit": { "type": "integer", "format": "int64", "nullable": true }
        },
        "required": ["status"]
      },
      "domino.activity.api.CommentedOnWorkspaceMetaData": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceNumber": { "type": "integer", "format": "int32" },
          "title": { "type": "string" }
        },
        "required": ["workspaceId", "workspaceNumber", "title"]
      },
      "domino.workspace.api.git.CommitAndPushRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.CommitRepo"
            }
          },
          "syncOperationInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.provenance.api.SyncOperationInfo"
          }
        },
        "required": ["projectId", "repos"]
      },
      "domino.workspaces.api.DominoStats": {
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["name", "value"]
      },
      "domino.workspaces.web.CreateCommentInput": {
        "properties": { "comment": { "type": "string" } },
        "required": ["comment"]
      },
      "domino.projects.web.MoveProjectToStage": {
        "properties": {
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["stageId", "projectId"]
      },
      "domino.projects.api.OnDemandSparkClusterPropertiesSpec": {
        "properties": {
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "executorCount": { "type": "integer", "format": "int32" },
          "executorHardwareTierId": { "type": "string" },
          "executorStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": { "type": "string" }
        },
        "required": [
          "computeEnvironmentId",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.common.gateway.runs.ComputeClusterDetails": {
        "properties": {
          "computeClusterType": { "type": "string" },
          "masterHardwareTierId": { "type": "string", "nullable": true },
          "masterHardwareTierCostPerMinute": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "workerCount": { "type": "integer", "format": "int32" },
          "workerHardwareTierId": { "type": "string" },
          "workerHardwareTierCostPerMinute": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "computeClusterType",
          "workerCount",
          "workerHardwareTierId",
          "workerHardwareTierCostPerMinute"
        ]
      },
      "domino.jobs.interface.ResultFileContent": {
        "properties": { "content": { "type": "string" } },
        "required": ["content"]
      },
      "domino.nucleus.modelproduct.models.UsageStatistics": {
        "type": "object",
        "properties": {
          "count": { "format": "int64", "type": "integer" },
          "users": { "type": "object" }
        },
        "required": ["count", "users"]
      },
      "domino.workspaces.api.WorkspaceAutoSync": {
        "properties": {
          "enable": { "type": "boolean" },
          "syncFrequencyInMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["enable"]
      },
      "domino.jobs.interface.JobStatus": {
        "properties": {
          "queued": { "type": "array", "items": { "type": "string" } },
          "running": { "type": "array", "items": { "type": "string" } },
          "completed": { "type": "array", "items": { "type": "string" } },
          "archived": { "type": "array", "items": { "type": "string" } },
          "active": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["queued", "running", "completed", "archived", "active"]
      },
      "domino.computegrid.UsageSnapshot": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "cpu": { "type": "number", "format": "double" },
          "memory": { "type": "number", "format": "double" }
        },
        "required": ["timestamp", "cpu", "memory"]
      },
      "domino.datasetrw.api.SharedDatasetRwEntryDto": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "sharedDatasets": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["projectId", "sharedDatasets"]
      },
      "domino.projects.api.AssetViewStats": {
        "properties": {
          "viewType": { "type": "string", "enum": ["last24H", "allView"] },
          "totalCount": { "type": "integer", "format": "int64" },
          "errorRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": ["viewType", "totalCount"]
      },
      "domino.admin.interface.ComputeClusterOverview": {
        "properties": {
          "clusterName": { "type": "string" },
          "clusterType": { "type": "string" },
          "masterHardwareTier": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerStorageSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "webUiPath": { "type": "string" },
          "podOverviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.admin.interface.ComputeClusterPodOverview"
            }
          }
        },
        "required": [
          "clusterName",
          "clusterType",
          "workerHardwareTier",
          "webUiPath",
          "podOverviews"
        ]
      },
      "domino.datasetrw.web.UpdateSnapshotStatusRequest": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          }
        },
        "required": ["status"]
      },
      "domino.activity.api.ProjectGoalUpdateTitleActivityMetadata": {
        "properties": {
          "fromTitle": { "type": "string" },
          "toTitle": { "type": "string" }
        },
        "required": ["fromTitle", "toTitle"]
      },
      "domino.nucleus.modelproduct.models.EmailInvitationFailure": {
        "properties": {
          "email": { "type": "string" },
          "errorMessage": { "type": "string" }
        },
        "required": ["email", "errorMessage"]
      },
      "domino.filesync.sync.RelativeFilePath": {
        "type": "object",
        "properties": {
          "canonicalizedPathString": {
            "type": "string",
            "description": "Path on the file system"
          },
          "separator": {
            "type": "string",
            "description": "Path separator",
            "example": "/"
          }
        }
      },
      "domino.projects.api.ProxyConfig": {
        "properties": {
          "internalPath": { "type": "string" },
          "port": { "type": "integer", "format": "int32" },
          "rewrite": { "type": "boolean" }
        },
        "required": ["internalPath", "port", "rewrite"]
      },
      "domino.workspaces.web.StopCommitWorkspaceDetails": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitMessage": { "type": "string", "nullable": true }
        },
        "required": ["workspaceId"]
      },
      "domino.modelmanager.web.RecordInvocation": {
        "properties": {
          "modelVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "statusCode": { "type": "integer", "format": "int32" }
        },
        "required": ["modelVersionId", "statusCode"]
      },
      "domino.projectManagement.api.PmId": {
        "properties": { "id": { "type": "string" } },
        "required": ["id"]
      },
      "domino.workspace.api.WorkspacePageDto": {
        "properties": {
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDto"
            }
          },
          "totalWorkspaceCount": { "type": "integer", "format": "int64" },
          "offset": { "type": "integer", "format": "int32" },
          "limit": { "type": "integer", "format": "int32" }
        },
        "required": ["workspaces", "totalWorkspaceCount", "offset", "limit"]
      },
      "domino.nucleus.dataset.ui.UpdateSnapshotStatusInput": {
        "properties": { "status": { "type": "string" } },
        "required": ["status"]
      },
      "domino.projectManagement.api.DominoGoalToPmSubTicketMetadata": {
        "properties": {
          "mapType": {
            "type": "string",
            "enum": [
              "DominoProject",
              "DominoGoal",
              "DominoStage",
              "DominoComment"
            ]
          },
          "dominoProjectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "updatedAt": { "type": "integer", "format": "epoch" },
          "ticketMetadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketMetadata"
          },
          "ticketStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projectManagement.api.PmTicketStage"
            }
          }
        },
        "required": [
          "mapType",
          "dominoProjectId",
          "updatedAt",
          "ticketMetadata",
          "ticketStages"
        ]
      },
      "domino.workspace.api.git.StageFileResponseDto": {
        "properties": {
          "succeeded": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["succeeded", "message"]
      },
      "domino.activity.api.JobStatusActivityMetaData": {
        "properties": {
          "title": { "type": "string" },
          "number": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "isScheduled": { "type": "boolean" },
          "currentStatus": { "type": "string" },
          "commentCount": { "type": "integer", "format": "int32" }
        },
        "required": [
          "title",
          "number",
          "status",
          "isScheduled",
          "currentStatus",
          "commentCount"
        ]
      },
      "domino.gruz.api.LauncherValue": {
        "properties": {
          "key": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["key", "values"]
      },
      "domino.workspace.api.WorkspaceDatasetSnapshotDto": {
        "properties": {
          "snapshotId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshotVersion": { "type": "integer", "format": "int32" }
        },
        "required": ["snapshotId", "snapshotVersion"]
      },
      "domino.common.models.EnvironmentVariables": {
        "properties": {
          "vars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.models.EnvironmentVariable"
            }
          }
        },
        "required": ["vars"]
      },
      "domino.datasource.web.UpdateDataSourceConfigRequest": {
        "properties": {
          "dataSourceType": {
            "type": "string",
            "enum": ["SnowflakeConfig", "RedshiftConfig"]
          },
          "accountName": { "type": "string", "nullable": true },
          "database": { "type": "string", "nullable": true },
          "schema": { "type": "string", "nullable": true },
          "warehouse": { "type": "string", "nullable": true },
          "role": { "type": "string", "nullable": true },
          "host": { "type": "string", "nullable": true },
          "port": { "type": "string", "nullable": true }
        },
        "required": ["dataSourceType"]
      },
      "domino.scheduledrun.api.ScheduledJobDto": {
        "properties": {
          "id": { "type": "string" },
          "created": { "type": "string", "format": "date-time" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "command": { "type": "string" },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledrun.api.CronScheduleDTO"
          },
          "timezoneId": { "type": "string" },
          "isPaused": { "type": "boolean" },
          "publishAfterCompleted": { "type": "boolean" },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": { "type": "boolean" },
          "hardwareTierIdentifier": { "type": "string" },
          "hardwareTierName": { "type": "string" },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "overrideEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "scheduledByUserName": { "type": "string" },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": { "type": "string" }
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledrun.api.ComputeClusterConfigSpecDto"
          }
        },
        "required": [
          "id",
          "created",
          "projectId",
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "publishAfterCompleted",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "hardwareTierName",
          "scheduledByUserId",
          "scheduledByUserName",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.modelmanager.web.LinkmodelToGoal": {
        "properties": {
          "modelId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "modelVersion": { "type": "integer", "format": "int32" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["modelId", "modelVersion", "projectId", "goalId"]
      },
      "domino.workspaces.api.DependentDatasetMount": {
        "properties": {
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshotId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "snapshotVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "datasetName": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "isInput": { "type": "boolean" },
          "containerPath": { "type": "string", "nullable": true }
        },
        "required": ["datasetId", "datasetName", "projectId", "isInput"]
      },
      "domino.nucleus.modelproduct.models.GranteeList": {
        "properties": {
          "emails": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["emails"]
      },
      "domino.workspace.api.DataMountSpecificationDto": {
        "properties": {
          "name": { "type": "string" },
          "mount": {
            "$ref": "#/components/schemas/domino.workspace.api.VolumeMountDto"
          }
        },
        "required": ["name", "mount"]
      },
      "domino.projects.api.AssetPortfolioPaginationFilter": {
        "properties": {
          "pagination": {
            "type": "domino.apiserverutils.pagination.paginationfilter"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "name",
              "projectName",
              "assetType",
              "lastUpdated",
              "numberOfVersions",
              "ownerName",
              "last24Hours"
            ]
          },
          "searchQuery": { "type": "string", "nullable": true }
        },
        "required": ["pagination", "sortBy"]
      },
      "domino.computegrid.ExecutionCheckpoint": {
        "properties": {
          "checkpointName": {
            "type": "string",
            "enum": [
              "UserFilesSaved",
              "ResourcesCreated",
              "NodeAssigned",
              "VolumesMounted",
              "VolumesReleased",
              "UserCodeLaunched",
              "FilesPrepared",
              "ResourcesDeleted",
              "Acknowledged",
              "ImagesPulled",
              "QuotaChecked"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["Pending", "Completed", "Error"]
          },
          "message": { "type": "string", "nullable": true }
        },
        "required": ["checkpointName", "status"]
      },
      "domino.datasetrw.api.DatasetRwViewDto": {
        "type": "object",
        "properties": {
          "snapshotIds": {
            "type": "array",
            "items": { "pattern": "^[0-9a-f]{24}$", "type": "string" }
          },
          "name": { "type": "string" },
          "description": { "nullable": true, "type": "string" },
          "createdTime": { "format": "int64", "type": "integer" },
          "projectOwner": { "type": "string" },
          "id": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "projectName": { "type": "string" },
          "projectId": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "snapshotIds",
          "tags",
          "createdTime",
          "projectOwner",
          "projectName"
        ]
      },
      "domino.projects.api.ProjectPortfolioElement": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "status": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStatus"
          },
          "stage": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStage"
          },
          "createdOn": { "type": "integer", "format": "epoch" },
          "lastActivity": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectAssetCount"
            }
          },
          "costPerMinute": { "type": "number", "format": "double" },
          "duration": { "type": "integer", "format": "int64" },
          "totalGoalsCount": { "type": "integer", "format": "int32" },
          "completedGoalsCount": { "type": "integer", "format": "int32" }
        },
        "required": [
          "projectId",
          "projectName",
          "status",
          "stage",
          "createdOn",
          "collaborators",
          "owner",
          "assets",
          "costPerMinute",
          "duration",
          "totalGoalsCount",
          "completedGoalsCount"
        ]
      },
      "domino.workspaces.web.WorkspacesUsageSocketEvent": {
        "properties": {
          "correlationId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "room": { "type": "string" },
          "cpu": { "type": "number", "format": "double" },
          "mem": { "type": "number", "format": "double" },
          "timestamp": { "type": "integer", "format": "epoch" }
        },
        "required": [
          "correlationId",
          "projectId",
          "workspaceId",
          "room",
          "cpu",
          "mem",
          "timestamp"
        ]
      },
      "domino.server.account.api.GitCredentialAccessorDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "gitServiceProvider": {
            "type": "string",
            "enum": [
              "github",
              "gitlab",
              "githubEnterprise",
              "unknown",
              "gitlabEnterprise",
              "bitbucket",
              "bitbucketServer"
            ]
          },
          "domain": { "type": "string" },
          "fingerprint": { "type": "string" },
          "protocol": { "type": "string" }
        },
        "required": [
          "id",
          "name",
          "gitServiceProvider",
          "domain",
          "fingerprint",
          "protocol"
        ]
      },
      "domino.scheduledrun.api.UpdatedScheduledJobDTO": {
        "properties": {
          "title": { "type": "string" },
          "command": { "type": "string" },
          "schedule": {
            "$ref": "#/components/schemas/domino.scheduledrun.api.EditCronScheduleDTO"
          },
          "timezoneId": { "type": "string" },
          "isPaused": { "type": "boolean" },
          "publishAfterCompleted": { "type": "boolean" },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "allowConcurrentExecution": { "type": "boolean" },
          "hardwareTierIdentifier": { "type": "string" },
          "overrideEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "overrideEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "scheduledByUserId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": { "type": "string" }
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "onDemandSparkClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.OnDemandSparkClusterPropertiesSpec"
          },
          "computeClusterProperties": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.scheduledrun.api.ComputeClusterConfigSpecDto"
          }
        },
        "required": [
          "title",
          "command",
          "schedule",
          "timezoneId",
          "isPaused",
          "publishAfterCompleted",
          "allowConcurrentExecution",
          "hardwareTierIdentifier",
          "scheduledByUserId",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "DocumentType": {
        "type": "string",
        "description": "List of searchable document types",
        "enum": [
          "project",
          "data_set",
          "file",
          "run",
          "model",
          "environment",
          "comment"
        ]
      },
      "domino.computegrid.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.computegrid.LogContent"
            }
          },
          "isComplete": { "type": "boolean" },
          "pagination": {
            "$ref": "#/components/schemas/domino.computegrid.PaginationFilter"
          }
        },
        "required": ["logContent", "isComplete", "pagination"]
      },
      "domino.projects.api.repositories.responses.BranchEntryDTO": {
        "properties": { "name": { "type": "string" } },
        "required": ["name"]
      },
      "domino.projects.api.CommentThread": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.Comment"
            }
          }
        },
        "required": ["id", "comments"]
      },
      "domino.jobs.interface.JobGoal": {
        "properties": {
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobNumber": { "type": "integer", "format": "int32" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["goalId", "jobId", "jobNumber", "projectId"]
      },
      "domino.projects.api.repositories.responses.browse.RepoBrowserSummaryDTO": {
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoBranchSummaryDTO"
          },
          "dir": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.RepoDirectorySummaryDTO"
          }
        },
        "required": ["ref"]
      },
      "domino.server.projects.api.ProjectStatus": {
        "properties": {
          "status": { "type": "string", "enum": ["active", "complete"] },
          "isBlocked": { "type": "boolean" },
          "blockedReason": { "type": "string", "nullable": true },
          "completedMessage": { "type": "string", "nullable": true }
        },
        "required": ["status", "isBlocked"]
      },
      "domino.activity.api.ProjectGoalFileLinkActivityMetadata": {
        "properties": {
          "action": { "type": "string", "enum": ["added", "removed"] },
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectGoalTitle": { "type": "string" }
        },
        "required": ["action", "fileName", "commitId", "projectGoalTitle"]
      },
      "domino.scheduledrun.api.ScheduledJobForRequestingUserDto": {
        "properties": {
          "scheduledJob": {
            "$ref": "#/components/schemas/domino.scheduledrun.api.ScheduledJobDto"
          },
          "canEdit": { "type": "boolean" }
        },
        "required": ["scheduledJob", "canEdit"]
      },
      "domino.jobs.web.JobStopOperationRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitResults": { "type": "boolean" }
        },
        "required": ["projectId", "jobId", "commitResults"]
      },
      "domino.projects.api.repositories.ReferenceDTO": {
        "properties": {
          "type": { "type": "string" },
          "value": { "type": "string", "nullable": true }
        },
        "required": ["type"]
      },
      "domino.jobs.web.CreateComment": {
        "properties": { "comment": { "type": "string" } },
        "required": ["comment"]
      },
      "domino.jobs.interface.ResultFileMetadata": {
        "properties": {
          "contentId": { "type": "string" },
          "filename": { "type": "string" },
          "size": { "type": "integer", "format": "int64" },
          "lastModified": { "type": "integer", "format": "epoch" },
          "author": { "type": "string" }
        },
        "required": ["contentId", "filename", "size", "lastModified", "author"]
      },
      "domino.jobs.interface.Tag": {
        "properties": {
          "tagId": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": ["tagId", "name"]
      },
      "domino.activity.api.ProjectGoalStatusChangeActivityMetadata": {
        "properties": {
          "statusChange": {
            "type": "string",
            "enum": ["complete", "incomplete", "delete"]
          },
          "projectGoalTitle": { "type": "string" }
        },
        "required": ["statusChange", "projectGoalTitle"]
      },
      "domino.files.web.FilesAndFoldersToRemove": {
        "properties": {
          "paths": { "type": "array", "items": { "type": "string" } },
          "ownerUsername": { "type": "string" },
          "projectName": { "type": "string" }
        },
        "required": ["paths", "ownerUsername", "projectName"]
      },
      "domino.projects.api.ProjectPortfolioStats": {
        "properties": {
          "totalProjects": { "type": "integer", "format": "int32" },
          "stageStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.StageStat"
            }
          },
          "statuStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.StatusStat"
            }
          }
        },
        "required": ["totalProjects", "stageStats", "statuStats"]
      },
      "domino.computegrid.ExecutionEventDto": {
        "type": "object",
        "properties": {
          "reason": { "nullable": true, "type": "string" },
          "metricName": { "nullable": true, "type": "string" },
          "creationTime": { "format": "date-time", "type": "string" },
          "executionType": {
            "nullable": true,
            "type": "string",
            "enum": [
              "Other",
              "SSHProxy",
              "Model API",
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace"
            ]
          },
          "description": { "nullable": true, "type": "string" },
          "source": {
            "type": "string",
            "enum": ["Domino", "Kubernetes", "Metrics"]
          },
          "attempt": { "format": "int32", "type": "integer" },
          "resourceKind": {
            "nullable": true,
            "type": "string",
            "enum": ["Other", "Event", "Deployment", "Job", "Service", "Pod"]
          },
          "payload": { "nullable": true, "type": "object" },
          "id": { "pattern": "^[0-9a-f]{24}$", "type": "string" },
          "state": { "nullable": true, "type": "string" },
          "outcome": {
            "nullable": true,
            "type": "string",
            "enum": ["Error", "Retry", "Failure", "Ignored", "Success"]
          },
          "timestamp": { "format": "date-time", "type": "string" },
          "kind": { "type": "string" },
          "sagaId": { "nullable": true, "type": "string" },
          "outcomeMessage": { "nullable": true, "type": "string" },
          "updateTime": { "format": "date-time", "type": "string" },
          "durationMillis": {
            "nullable": true,
            "format": "int64",
            "type": "integer"
          },
          "elapsedMillis": { "format": "int64", "type": "integer" },
          "outcomeDetails": { "nullable": true, "type": "string" },
          "sagaName": { "nullable": true, "type": "string" },
          "executionId": {
            "nullable": true,
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "maxAttempts": {
            "nullable": true,
            "format": "int32",
            "type": "integer"
          },
          "attemptCorrelationId": {
            "pattern": "^[0-9a-f]{24}$",
            "type": "string"
          },
          "nextState": { "nullable": true, "type": "string" }
        },
        "required": [
          "id",
          "kind",
          "source",
          "attempt",
          "attemptCorrelationId",
          "timestamp",
          "elapsedMillis",
          "creationTime",
          "updateTime"
        ]
      },
      "RunUtilization": {
        "type": "object",
        "description": "Statistics on a specific run",
        "properties": {
          "id": { "type": "string", "description": "Id of a run" },
          "projectId": {
            "type": "string",
            "description": "Id of a oproject the run belongs to"
          },
          "projectIdentity": {
            "type": "string",
            "description": "human-readable project identifier"
          },
          "startingUserId": {
            "type": "string",
            "description": "Id of a user who started the run"
          },
          "startingUserFullName": {
            "type": "string",
            "description": "Full name of a user who started the run"
          },
          "runType": { "$ref": "#/components/schemas/RunType" },
          "hardwareTierId": {
            "type": "string",
            "description": "Hardware tier which was used for these runs"
          },
          "startDateTime": {
            "type": "string",
            "description": "Date when the run was started in the ISO-8601 format"
          },
          "queueDurationInSeconds": {
            "type": "number",
            "description": "How long the run spent in the queue before running (in seconds)"
          },
          "runDurationInSeconds": {
            "type": "number",
            "description": "How long the run was running (in seconds)"
          },
          "estimatedCost": {
            "type": "number",
            "description": "The estimated cost of the run"
          }
        }
      },
      "domino.projects.api.ProjectGitRepositoryTemp": {
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "uri": { "type": "string" },
          "defaultRef": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.ReferenceDTO"
          },
          "name": { "type": "string", "nullable": true },
          "serviceProvider": { "type": "string" },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["uri", "defaultRef", "serviceProvider"]
      },
      "domino.gruz.api.RunMeta": {
        "properties": {
          "queued": { "type": "string", "format": "date-time" },
          "started": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "title": { "type": "string", "nullable": true },
          "number": { "type": "integer", "format": "int32", "nullable": true },
          "dependencyProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.RunDependencyProject"
            }
          },
          "postProcessing": {
            "$ref": "#/components/schemas/domino.gruz.api.RunPostProcessing"
          },
          "overrideHardwareTierId": { "type": "string", "nullable": true },
          "centsPerMinute": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isolatedOutputCommit": { "type": "boolean", "nullable": true },
          "priority": { "type": "integer", "format": "int32" },
          "repositories": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.PreparedRepository"
            }
          },
          "statusChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.StatusChange"
            }
          },
          "stopRequest": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.gruz.api.StopRequest"
          },
          "publiclyVisible": { "type": "boolean" },
          "datasetMounts": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.gruz.api.DatasetMount"
            }
          }
        },
        "required": [
          "queued",
          "dependencyProjects",
          "postProcessing",
          "priority",
          "statusChanges",
          "publiclyVisible"
        ]
      },
      "domino.projects.api.EnvironmentWorkspaceToolDefinition": {
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "title": { "type": "string" },
          "iconUrl": { "type": "string", "nullable": true },
          "start": { "type": "array", "items": { "type": "string" } },
          "proxyConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProxyConfig"
          },
          "supportedFileExtensions": {
            "type": "array",
            "nullable": true,
            "items": { "type": "string" }
          }
        },
        "required": ["id", "name", "title", "start"]
      },
      "domino.workspaces.web.WorkspaceEvents": {
        "properties": {
          "workspacesUsage": {
            "$ref": "#/components/schemas/domino.workspaces.web.WorkspacesUsageSocketEvent"
          },
          "workspaceStatusChangeEvent": {
            "$ref": "#/components/schemas/domino.workspaces.web.WorkspaceStatusChangeSocketEvent"
          }
        },
        "required": ["workspacesUsage", "workspaceStatusChangeEvent"]
      },
      "domino.workspace.api.RepositoryChanges": {
        "properties": {
          "created": { "type": "array", "items": { "type": "string" } },
          "modified": { "type": "array", "items": { "type": "string" } },
          "deleted": { "type": "array", "items": { "type": "string" } },
          "staged": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["created", "modified", "deleted", "staged"]
      },
      "domino.jobs.interface.ArtifactsObjectDto": {
        "properties": {
          "commitId": { "type": "string" },
          "projectName": { "type": "string" },
          "ownerName": { "type": "string" }
        },
        "required": ["commitId", "projectName", "ownerName"]
      },
      "domino.workspace.api.WorkspaceInitConfigDto": {
        "properties": {
          "volumeSize": { "$ref": "#/components/schemas/Information" },
          "intialCommits": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.InitialCommitsDto"
          }
        },
        "required": ["volumeSize"]
      },
      "domino.common.DominoId": {
        "properties": { "raw": { "type": "string" } },
        "required": ["raw"]
      },
      "domino.activity.api.ProjectStage": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "domino.workspaces.api.DependentProject": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitId": { "type": "string" }
        },
        "required": ["projectId", "commitId"]
      },
      "domino.files.interface.CommentedBy": {
        "properties": {
          "userId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "userName": { "type": "string" }
        },
        "required": ["userId", "userName"]
      },
      "domino.jobs.interface.JobResourceUsage": {
        "properties": {
          "cpu": { "type": "number", "format": "double" },
          "memory": { "type": "number", "format": "double" },
          "timestamp": { "type": "integer", "format": "epoch" }
        },
        "required": ["cpu", "memory", "timestamp"]
      },
      "domino.common.gateway.runs.RunsGatewaySummary": {
        "properties": {
          "batchId": { "type": "string" },
          "runId": { "type": "string" },
          "title": { "type": "string" },
          "command": { "type": "string" },
          "status": { "type": "string" },
          "runType": { "type": "string" },
          "userName": { "type": "string" },
          "userId": { "type": "string" },
          "projectOwnerName": { "type": "string" },
          "projectOwnerId": { "type": "string" },
          "projectName": { "type": "string" },
          "projectId": { "type": "string" },
          "runDurationSec": { "type": "number", "format": "double" },
          "hardwareTier": { "type": "string" },
          "hardwareTierCostCurrency": { "type": "string" },
          "hardwareTierCostAmount": { "type": "number", "format": "double" },
          "queuedTime": { "type": "string", "format": "date-time" },
          "startTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "totalCostCurrency": { "type": "string" },
          "totalCostAmount": { "type": "number", "format": "double" },
          "computeClusterDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.gateway.runs.ComputeClusterDetails"
          }
        },
        "required": [
          "batchId",
          "runId",
          "title",
          "command",
          "status",
          "runType",
          "userName",
          "userId",
          "projectOwnerName",
          "projectOwnerId",
          "projectName",
          "projectId",
          "runDurationSec",
          "hardwareTier",
          "hardwareTierCostCurrency",
          "hardwareTierCostAmount",
          "queuedTime",
          "totalCostCurrency",
          "totalCostAmount"
        ]
      },
      "domino.files.interface.DeletePropsDto": { "properties": {} },
      "domino.workspaces.web.UnlinkWorkspaceFromGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.projects.api.WritableProjectMounts": {
        "type": "object",
        "properties": {
          "mainGitMount": { "nullable": true, "type": "string" },
          "importedGitMounts": { "type": "object" },
          "mainDfsMount": { "type": "string" }
        },
        "required": ["mainDfsMount", "importedGitMounts"]
      },
      "domino.gitproviders.api.GetOwnersApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.OwnerDTO"
            }
          }
        },
        "required": ["items"]
      },
      "domino.jobs.interface.CommentContext": {
        "properties": {
          "commentType": {
            "type": "string",
            "enum": ["JobCommentThread", "JobResultFileCommentThread"]
          },
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "fileName": { "type": "string", "nullable": true },
          "commitId": { "type": "string", "nullable": true }
        },
        "required": ["commentType", "jobId"]
      },
      "domino.common.gateway.runs.RunsGatewaySequence": {
        "properties": {
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.gateway.runs.RunsGatewaySummary"
            }
          },
          "nextBatchId": { "type": "string", "nullable": true }
        },
        "required": ["runs"]
      },
      "domino.gruz.api.ResourceId": {
        "properties": { "raw": { "type": "string" } },
        "required": ["raw"]
      },
      "domino.projectManagement.web.ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "description": "Error code",
            "type": "integer"
          },
          "message": {
            "description": "Error message received from external service (ex jira)",
            "type": "string"
          }
        },
        "required": ["message", "code"]
      },
      "domino.dataset.api.DatasetDto": {
        "type": "object",
        "properties": {
          "archived": { "type": "boolean" },
          "created": { "format": "int64", "type": "integer" },
          "snapshotIds": { "type": "array", "items": { "type": "string" } },
          "name": { "type": "string" },
          "description": { "nullable": true, "type": "string" },
          "id": { "type": "string" },
          "projectId": { "nullable": true, "type": "string" },
          "stupidProjectId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.ProjectId"
          },
          "tags": { "type": "object" }
        },
        "required": ["id", "name", "archived", "snapshotIds", "tags", "created"]
      },
      "domino.common.run.interfaces.NewRunGitRefDto": {
        "properties": {
          "refType": { "type": "string" },
          "refValue": { "type": "string", "nullable": true }
        },
        "required": ["refType"]
      },
      "domino.activity.api.Activity": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "activitySource": {
            "type": "string",
            "enum": [
              "project",
              "job",
              "model_api",
              "schedule_job",
              "files",
              "workspace",
              "comment",
              "app"
            ]
          },
          "activity": {
            "type": "string",
            "enum": [
              "PROJECT_GOAL_DESCRIPTION_CHANGE",
              "PROJECT_STAGE_CHANGE",
              "COMMENT_ADDED",
              "MODEL_API_STATUS_CHANGE",
              "PROJECT_GOAL_MODEL_LINK_CHANGE",
              "JOB_STATUS_CHANGE",
              "WORKSPACE_TITLE_CHANGE",
              "PROJECT_STATUS_CHANGE",
              "PROJECT_GOAL_CREATE",
              "APP_STATUS_CHANGE",
              "FILE_CHANGE",
              "PROJECT_GOAL_APP_LINK_CHANGE",
              "SCHEDULE_JOB_TRIGGER_CHANGE",
              "PROJECT_LINK_CHANGE",
              "SCHEDULE_JOB_CONFIG_CHANGE",
              "PROJECT_GOAL_FILE_LINK_CHANGE",
              "PROJECT_GOAL_STATUS_CHANGE",
              "JOB_TITLE_CHANGE",
              "PROJECT_GOAL_TITLE_CHANGE",
              "PROJECT_GOAL_JOB_LINK_CHANGE",
              "COMMENT_ARCHIVED",
              "COMMENT_UPDATED",
              "WORKSPACE_STATUS_CHANGE",
              "PROJECT_GOAL_WORKSPACE_LINK_CHANGE"
            ]
          },
          "sourceId": { "type": "string" },
          "timestamp": { "type": "integer", "format": "epoch" },
          "activityBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.activity.api.ActivityBy"
          },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "metadata": {
            "$ref": "#/components/schemas/domino.activity.api.ActivityMetaData"
          }
        },
        "required": [
          "id",
          "activitySource",
          "activity",
          "sourceId",
          "timestamp",
          "projectId",
          "metadata"
        ]
      },
      "domino.nucleus.file.ProjectCommitDeprecated": {
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "commitTime": { "type": "integer", "format": "int64" }
        },
        "required": ["id", "name", "commitTime"]
      },
      "domino.projects.web.MarkProjectComplete": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "completeReason": { "type": "string" }
        },
        "required": ["projectId", "completeReason"]
      },
      "domino.nucleus.dataset.ui.AddDataSetTagInput": {
        "properties": {
          "name": { "type": "string" },
          "dataSetId": { "type": "string" }
        },
        "required": ["name", "dataSetId"]
      },
      "domino.common.run.interfaces.NewRunDTO": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commandToRun": { "type": "string" },
          "commitId": { "type": "string", "nullable": true },
          "mainRepoGitRef": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.run.interfaces.NewRunGitRefDto"
          },
          "hardwareTierName": { "type": "string", "nullable": true },
          "datasetConfig": { "type": "string", "nullable": true },
          "dominoClientSource": { "type": "string", "nullable": true }
        },
        "required": ["projectId", "commandToRun"]
      },
      "domino.jobs.interface.Comment": {
        "properties": {
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commenter": {
            "$ref": "#/components/schemas/domino.jobs.interface.Commenter"
          },
          "commentBody": {
            "$ref": "#/components/schemas/domino.jobs.interface.CommentContent"
          },
          "created": { "type": "integer", "format": "epoch" }
        },
        "required": ["commentId", "commenter", "commentBody", "created"]
      },
      "domino.projectManagement.api.SubTicketToDominoMapper": {
        "properties": {
          "dominoEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          },
          "pmEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmEntity"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoGoalToPmSubTicketMetadata"
          },
          "isDeleted": { "type": "boolean" }
        },
        "required": ["dominoEntity", "pmEntity", "metadata", "isDeleted"]
      },
      "domino.projects.api.ProjectOwnerInfo": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "canonicalName": { "type": "string" }
        },
        "required": ["id", "canonicalName"]
      },
      "domino.computegrid.LogContent": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "logType": {
            "type": "string",
            "enum": [
              "stdout",
              "complete",
              "prepareoutput",
              "stderr",
              "stdoutstderr"
            ]
          },
          "log": { "type": "string" },
          "size": { "type": "integer", "format": "int64" }
        },
        "required": ["timestamp", "logType", "log", "size"]
      },
      "domino.common.modelproduct.AppResourceUsageSnapshot": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "cpu": { "type": "number", "format": "double" },
          "memory": { "type": "number", "format": "double" }
        },
        "required": ["timestamp", "cpu", "memory"]
      },
      "domino.gruz.api.StatusChange": {
        "properties": {
          "time": { "type": "string", "format": "date-time" },
          "status": { "type": "string" }
        },
        "required": ["time", "status"]
      },
      "domino.gruz.api.RunPostProcessingControl": {
        "properties": {
          "publishApiEndpoint": { "type": "boolean" },
          "publishModelId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["publishApiEndpoint"]
      },
      "domino.projects.api.ProjectDependenciesAndForks": {
        "properties": {
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
            }
          },
          "baseProject": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
          },
          "relatedForks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectInfo"
            }
          },
          "canCreateReviewRequest": { "type": "boolean" },
          "canUpdateFork": { "type": "boolean" }
        },
        "required": [
          "dependencies",
          "relatedForks",
          "canCreateReviewRequest",
          "canUpdateFork"
        ]
      },
      "domino.projectManagement.api.PmLinker": {
        "properties": {
          "userId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "credentials": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmCredentials"
          }
        },
        "required": ["credentials"]
      },
      "domino.projects.api.StatusStat": {
        "properties": {
          "name": {
            "type": "string",
            "enum": ["active", "complete", "blocked"]
          },
          "projectCount": { "type": "integer", "format": "int32" }
        },
        "required": ["name", "projectCount"]
      },
      "domino.workspace.api.WorkspaceCommitDto": {
        "properties": {
          "id": { "type": "string" },
          "isDfsCommit": { "type": "boolean" }
        },
        "required": ["id", "isDfsCommit"]
      },
      "domino.nucleus.dataset.ui.DatasetWorkspace": {
        "properties": { "workspaceId": { "type": "string" } },
        "required": ["workspaceId"]
      },
      "domino.projects.web.UpdateStageName": {
        "properties": {
          "stageId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "stageName": { "type": "string" }
        },
        "required": ["stageId", "stageName"]
      },
      "domino.workspaces.api.CommentContent": {
        "properties": { "value": { "type": "string" } },
        "required": ["value"]
      },
      "domino.projects.api.NewTagsDTO": {
        "properties": {
          "tagNames": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["tagNames"]
      },
      "domino.workspace.api.WorkspaceAdminPageTableRow": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "ownerUsername": { "type": "string" },
          "workspaceCreatedTime": { "type": "string", "format": "date-time" },
          "lastSessionStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentRevisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "environmentName": { "type": "string" },
          "pvSpace": { "$ref": "#/components/schemas/Information" },
          "projectName": { "type": "string" },
          "projectOwnerName": { "type": "string" },
          "workspaceState": {
            "type": "string",
            "enum": [
              "Started",
              "Stopping",
              "Created",
              "Deleted",
              "Starting",
              "Stopped",
              "Initializing"
            ]
          },
          "pvcName": { "type": "string" },
          "clusterInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageClusterInfo"
          }
        },
        "required": [
          "workspaceId",
          "name",
          "ownerUsername",
          "workspaceCreatedTime",
          "environmentName",
          "pvSpace",
          "projectName",
          "projectOwnerName",
          "workspaceState",
          "pvcName"
        ]
      },
      "domino.datasetrw.web.AddTagRequest": {
        "properties": {
          "snapshotId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "tag": { "type": "string" }
        },
        "required": ["snapshotId", "tag"]
      },
      "domino.workspaces.api.ResultFileMetadata": {
        "properties": {
          "contentId": { "type": "string" },
          "filename": { "type": "string" },
          "size": { "type": "integer", "format": "int64" },
          "lastModified": { "type": "integer", "format": "epoch" },
          "author": { "type": "string" }
        },
        "required": ["contentId", "filename", "size", "lastModified", "author"]
      },
      "domino.jobs.web.RemoveTagFromJob": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "tagId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "tagId"]
      },
      "domino.projectManagement.web.UnlinkWorkspaceFromGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.datasetrw.web.UpdateDatasetRequest": {
        "properties": {
          "datasetName": { "type": "string", "nullable": true },
          "description": { "type": "string", "nullable": true }
        }
      },
      "domino.jobs.interface.CommitDetails": {
        "properties": {
          "inputCommitId": { "type": "string" },
          "outputCommitId": { "type": "string", "nullable": true }
        },
        "required": ["inputCommitId"]
      },
      "domino.nucleus.modelproduct.models.UnlinkAppFromGoal": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "appVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId", "appVersionId"]
      },
      "domino.projects.api.ProjectTagDTO": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "isApproved": { "type": "boolean" }
        },
        "required": ["id", "name", "isApproved"]
      },
      "domino.projectManagement.api.TicketToDominoMapper": {
        "properties": {
          "dominoEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoEntity"
          },
          "pmEntity": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmEntity"
          },
          "metadata": {
            "$ref": "#/components/schemas/domino.projectManagement.api.DominoProjectToPmTicketMetadata"
          },
          "isDeleted": { "type": "boolean" }
        },
        "required": ["dominoEntity", "pmEntity", "metadata", "isDeleted"]
      },
      "domino.jobs.web.CreateTag": {
        "properties": {
          "tagName": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["tagName", "projectId"]
      },
      "domino.workspace.api.git.HardResetResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          }
        },
        "required": ["repositories"]
      },
      "domino.activity.api.ProjectGoalWorkspaceLinkActivityMetadata": {
        "properties": {
          "action": { "type": "string", "enum": ["added", "removed"] },
          "workspaceNumber": { "type": "integer", "format": "int32" },
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectGoalTitle": { "type": "string" }
        },
        "required": [
          "action",
          "workspaceNumber",
          "workspaceId",
          "projectGoalTitle"
        ]
      },
      "domino.nucleus.dataset.ui.CreateSnapshotWithRunInput": {
        "properties": {
          "datasetId": { "type": "string" },
          "command": { "type": "string" },
          "outputPath": { "type": "string" }
        },
        "required": ["datasetId", "command", "outputPath"]
      },
      "domino.activity.api.CommentedOnProjectGoalMetaData": {
        "properties": {
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "isArchived": { "type": "boolean" }
        },
        "required": ["goalId", "title", "isArchived"]
      },
      "domino.jobs.interface.JobRuntimeExecutionDetails": {
        "properties": {
          "executorInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.ExecutorInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/domino.jobs.interface.Environment"
          },
          "hardwareTier": { "type": "string" },
          "hardwareTierId": { "type": "string" }
        },
        "required": ["environment", "hardwareTier", "hardwareTierId"]
      },
      "domino.gruz.api.RunMemoryLimit": {
        "properties": {
          "memoryLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memorySwapLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "domino.common.models.EnvironmentVariable": {
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["name", "value"]
      },
      "domino.activity.api.ActivityBy": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "username": { "type": "string" }
        },
        "required": ["id", "username"]
      },
      "domino.datasetrw.api.DatasetRwSnapshotDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "resourceId": { "type": "string" },
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "author": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "version": { "type": "integer", "format": "int32" },
          "description": { "type": "string", "nullable": true },
          "creationTime": { "type": "integer", "format": "int64" },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "statusLastUpdatedBy": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "statusLastUpdatedTime": { "type": "integer", "format": "int64" },
          "storageSize": { "type": "integer", "format": "int64" },
          "isPartialSize": { "type": "boolean" },
          "lastUsedTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isReadWrite": { "type": "boolean" }
        },
        "required": [
          "id",
          "resourceId",
          "datasetId",
          "version",
          "creationTime",
          "lifecycleStatus",
          "statusLastUpdatedBy",
          "statusLastUpdatedTime",
          "storageSize",
          "isPartialSize",
          "isReadWrite"
        ]
      },
      "domino.computecluster.api.DefaultComputeClusterSettings": {
        "properties": {
          "clusterType": { "$ref": "#/components/schemas/ComputeClusterType" },
          "computeEnvironmentId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "masterHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerCount": { "type": "integer", "format": "int32" },
          "maxWorkerCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workerHardwareTierId": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "workerStorage": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "extraConfigs": {
            "type": "collection.immutable.map[string,string]",
            "nullable": true
          },
          "maxUserExecutionSlots": { "type": "integer", "format": "int32" }
        },
        "required": ["clusterType", "workerCount", "maxUserExecutionSlots"]
      },
      "domino.projects.api.repositories.responses.browse.CommitShortDTO": {
        "properties": {
          "sha": { "type": "string" },
          "author": {
            "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitAuthorDTO"
          },
          "message": { "type": "string" }
        },
        "required": ["sha", "author", "message"]
      },
      "domino.credential.web.UpdateAccessRequest": {
        "properties": {
          "owner": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["owner", "users"]
      },
      "domino.jobs.interface.DominoStats": {
        "properties": {
          "name": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["name", "value"]
      },
      "domino.jobs.interface.Environment": {
        "properties": {
          "environmentRevisionId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "environmentName": { "type": "string" },
          "revisionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["environmentName"]
      },
      "domino.jobs.interface.TagApplication": {
        "properties": {
          "tagId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "createdBy": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "createdAt": { "type": "integer", "format": "epoch" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["tagId", "name", "createdBy", "createdAt", "projectId"]
      },
      "domino.activity.api.ActivityPagination": {
        "properties": {
          "pageSize": { "type": "integer", "format": "int32" },
          "latestTimeStamp": { "type": "integer", "format": "epoch" }
        },
        "required": ["pageSize", "latestTimeStamp"]
      },
      "domino.admin.interface.ExecutionUnitOverview": {
        "properties": {
          "deployableObjectType": {
            "type": "string",
            "enum": ["Container", "Pod"]
          },
          "deployableObjectId": { "type": "string" },
          "computeNodeId": { "type": "string", "nullable": true },
          "status": { "type": "string" }
        },
        "required": ["deployableObjectType", "deployableObjectId", "status"]
      },
      "domino.projects.web.SetCredentialMapping": {
        "properties": {
          "credentialId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["credentialId"]
      },
      "domino.provenance.api.ProvenanceGitRepo": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "commit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.provenance.api.ProvenanceCommit"
          }
        },
        "required": ["id", "name"]
      },
      "domino.projects.api.ProjectStakeholder": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "userName": { "type": "string" }
        },
        "required": ["id", "name", "userName"]
      },
      "domino.server.projectreleases.ProjectReleaseDto": {
        "properties": {
          "projectId": { "type": "string" },
          "runId": { "type": "string" },
          "createdAt": { "type": "integer", "format": "epoch" },
          "createdBy": { "type": "string" }
        },
        "required": ["projectId", "runId", "createdAt", "createdBy"]
      },
      "domino.projects.api.SelectedV2EnvironmentDetailsDTO": {
        "properties": {
          "latestRevision": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "latestRevisionUrl": { "type": "string" },
          "latestRevisionStatus": { "type": "string", "nullable": true },
          "selectedRevision": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "selectedRevisionUrl": { "type": "string", "nullable": true }
        },
        "required": ["latestRevisionUrl"]
      },
      "domino.projects.api.AssetPortfolioStats": {
        "properties": {
          "assetPortfolioStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectAssetCount"
            }
          }
        },
        "required": ["assetPortfolioStats"]
      },
      "domino.projects.web.ArchiveComment": {
        "properties": {
          "threadId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["threadId", "commentId"]
      },
      "domino.datasetrw.api.DatasetRwSummaryDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "ownerUsername": { "type": "string", "nullable": true },
          "projects": {
            "$ref": "#/components/schemas/domino.datasetrw.api.DatasetRwProjectDetailsDto"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "Pending",
              "Deleted",
              "DeletionInProgress",
              "Failed",
              "Active",
              "MarkedForDeletion"
            ]
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "required": ["id", "name", "projects", "lifecycleStatus"]
      },
      "domino.launcherjob.api.LauncherJobStartDto": {
        "properties": {
          "jobTitle": { "type": "string", "nullable": true },
          "startingUserId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "project": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "postParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.launcherjob.api.PostParameter"
            }
          },
          "uploadedFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.launcherjob.api.LauncherJobUploadedFile"
            }
          },
          "notifyOnCompleteEmailAddresses": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "project",
          "postParameters",
          "uploadedFiles",
          "notifyOnCompleteEmailAddresses"
        ]
      },
      "domino.workspace.api.WorkspaceHardwareTierDto": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "domino.files.interface.CommitSourceInfo": {
        "properties": {
          "sourceProjectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "sourceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "sourceNumber": { "type": "integer", "format": "int32" },
          "sourceType": {
            "type": "string",
            "enum": ["job", "workspace", "user"]
          }
        },
        "required": [
          "sourceProjectId",
          "sourceId",
          "sourceNumber",
          "sourceType"
        ]
      },
      "domino.nucleus.lib.auth.MixpanelSettings": {
        "properties": {
          "frontendClientEnabled": { "type": "boolean" },
          "backendClientEnabled": { "type": "boolean" },
          "token": { "type": "string" }
        },
        "required": ["frontendClientEnabled", "backendClientEnabled", "token"]
      },
      "domino.files.interface.CommitInfo": {
        "properties": {
          "commitId": { "type": "string" },
          "commitShortMessage": { "type": "string" },
          "commitFullMessage": { "type": "string" },
          "commitTime": { "type": "integer", "format": "int32" },
          "committedBy": { "type": "string" },
          "commitSourceInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.files.interface.CommitSourceInfo"
          },
          "isLatestCommit": { "type": "boolean" }
        },
        "required": [
          "commitId",
          "commitShortMessage",
          "commitFullMessage",
          "commitTime",
          "committedBy",
          "isLatestCommit"
        ]
      },
      "domino.nucleus.dataset.ui.DataSetRun": {
        "properties": { "runId": { "type": "string" } },
        "required": ["runId"]
      },
      "domino.workspace.api.git.CommitRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.CommitRepo"
            }
          }
        },
        "required": ["projectId", "repos"]
      },
      "domino.projects.api.AssetVersionHistoryElement": {
        "properties": {
          "timestamp": { "type": "integer", "format": "epoch" },
          "duration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "stakeholder": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "assetVersion": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.AssetVersionInfo"
          }
        },
        "required": ["timestamp", "stakeholder", "projectId", "projectName"]
      },
      "domino.projects.api.ProjectEnvironmentDTO": {
        "properties": {
          "id": { "type": "string" },
          "archived": { "type": "boolean" },
          "name": { "type": "string" },
          "version": { "type": "integer", "format": "int32" },
          "visibility": {
            "type": "string",
            "enum": ["Global", "Private", "Organization"]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectEnvironmentOwnerDTO"
          },
          "supportedClusters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ComputeClusterType" }
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "version",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.workspace.api.WorkspaceSessionEndDto": {
        "properties": {
          "time": { "type": "integer", "format": "int64" },
          "exitStatus": {
            "type": "string",
            "enum": ["Stopped", "Succeeded", "Failed", "Error"]
          },
          "repoDirty": { "type": "boolean" }
        },
        "required": ["time", "exitStatus", "repoDirty"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTopNResponse": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsCount"
            }
          }
        },
        "required": ["data"]
      },
      "domino.jobs.interface.DependentRepository": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "uri": { "type": "string" },
          "ref": { "type": "string" },
          "serviceProvider": { "type": "string" },
          "startingCommitId": { "nullable": true, "type": "string" },
          "startingCommitUri": { "type": "string", "nullable": true },
          "finishedCommitId": { "nullable": true, "type": "string" },
          "finishedCommitUri": { "type": "string", "nullable": true },
          "startingBranch": { "type": "string", "nullable": true },
          "finishedBranch": { "type": "string", "nullable": true }
        },
        "required": ["id", "name", "uri", "ref", "serviceProvider"]
      },
      "domino.projectManagement.api.PmTicketMetadata": {
        "properties": {
          "ticketLink": { "type": "string" },
          "ticketKey": { "type": "string" },
          "projectId": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          }
        },
        "required": ["ticketLink", "ticketKey", "projectId"]
      },
      "domino.jobs.interface.JobUsageInJob": {
        "properties": {
          "cpu": { "type": "number", "format": "double" },
          "memory": { "type": "number", "format": "double" }
        },
        "required": ["cpu", "memory"]
      },
      "domino.workspace.api.git.StageRemoteCommitFileRequest": {
        "properties": {
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "filePath": { "type": "string" }
        },
        "required": ["repoId", "filePath"]
      },
      "domino.workspaces.api.WorkspaceSummary": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "stageTime": {
            "$ref": "#/components/schemas/domino.workspaces.api.StageTime"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceStartedBy"
          },
          "number": { "type": "integer", "format": "int32" },
          "isCompleted": { "type": "boolean" },
          "isArchived": { "type": "boolean" },
          "commentsCount": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
            }
          },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DominoStats"
            }
          },
          "goalIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
          },
          "isRestartable": { "type": "boolean" }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "stageTime",
          "number",
          "isCompleted",
          "isArchived",
          "commentsCount",
          "status",
          "tags",
          "dominoStats",
          "goalIds",
          "isRestartable"
        ]
      },
      "domino.projects.api.ProjectPortfolioSet": {
        "properties": {
          "totalCount": { "type": "integer", "format": "int32" },
          "projectPortfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioElement"
            }
          },
          "paginationFilter": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectPortfolioPaginationFilter"
          }
        },
        "required": ["totalCount", "projectPortfolios", "paginationFilter"]
      },
      "domino.files.web.FileOrFolderToRemove": {
        "properties": {
          "pathToRemove": { "type": "string" },
          "ownerUsername": { "type": "string" },
          "projectName": { "type": "string" }
        },
        "required": ["pathToRemove", "ownerUsername", "projectName"]
      },
      "domino.computegrid.PaginationFilter": {
        "properties": {
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "latestTimeNano": { "type": "string", "nullable": true }
        },
        "required": ["limit", "offset"]
      },
      "domino.projects.api.EnvironmentDetails": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "archived": { "type": "boolean" },
          "name": { "type": "string" },
          "visibility": {
            "type": "string",
            "enum": ["Global", "Private", "Organization"]
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.EnvironmentOwner"
          },
          "supportedClusters": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ComputeClusterType" }
          },
          "latestRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.RevisionOverview"
          },
          "selectedRevision": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.RevisionOverview"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "visibility",
          "supportedClusters"
        ]
      },
      "domino.projects.api.repositories.responses.GetCommitsApiResponse": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.repositories.responses.browse.CommitShortDTO"
            }
          }
        },
        "required": ["items"]
      },
      "domino.dataset.api.DatasetSnapshotSummaryDto": {
        "type": "object",
        "properties": {
          "datasetDescription": { "nullable": true, "type": "string" },
          "runUrl": { "nullable": true, "type": "string" },
          "authorUsername": { "nullable": true, "type": "string" },
          "snapshot": {
            "$ref": "#/components/schemas/domino.dataset.api.DatasetSnapshotDto"
          },
          "originName": { "nullable": true, "type": "string" }
        },
        "required": ["snapshot"]
      },
      "domino.jobs.interface.LogSet": {
        "properties": {
          "logContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.LogContent"
            }
          },
          "isComplete": { "type": "boolean" },
          "pagination": {
            "$ref": "#/components/schemas/domino.jobs.interface.PaginationFilter"
          }
        },
        "required": ["logContent", "isComplete", "pagination"]
      },
      "domino.projects.api.AssetVersionInfo": {
        "properties": {
          "assetVersionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "assetName": { "type": "string" },
          "assetVersion": { "type": "string" }
        },
        "required": ["assetVersionId", "assetName", "assetVersion"]
      },
      "domino.projectManagement.api.PmUser": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "domino.gitproviders.api.GetReposApiResponse": {
        "properties": {
          "totalHits": { "type": "integer", "format": "int32" },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.gitproviders.api.RepoDTO"
            }
          }
        },
        "required": ["totalHits", "items"]
      },
      "domino.workspaces.api.WorkspaceResourceUsage": {
        "properties": {
          "cpu": { "type": "number", "format": "double" },
          "memory": { "type": "number", "format": "double" },
          "timestamp": { "type": "integer", "format": "epoch" }
        },
        "required": ["cpu", "memory", "timestamp"]
      },
      "domino.server.controlcenter.MoneyDTO": {
        "properties": {
          "amount": { "type": "number", "format": "double" },
          "currencyCode": { "type": "string" }
        },
        "required": ["amount", "currencyCode"]
      },
      "domino.workspace.api.git.CommitReposResponseDto": {
        "properties": {
          "succeeded": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["succeeded", "message"]
      },
      "domino.common.modelproduct.ExecutorDetails": {
        "properties": {
          "executorInstanceId": { "type": "string" },
          "region": { "type": "string" },
          "humanName": { "type": "string", "nullable": true },
          "publicAddress": { "type": "string", "nullable": true },
          "privateAddress": { "type": "string", "nullable": true }
        },
        "required": ["executorInstanceId", "region"]
      },
      "domino.jobs.interface.JobPagination": {
        "properties": {
          "pageSize": { "type": "integer", "format": "int32" },
          "sortBy": { "type": "string", "enum": ["asc", "desc"] },
          "orderBy": {
            "type": "string",
            "enum": [
              "number",
              "duration",
              "dominoStatsField",
              "queued",
              "command",
              "commentCount",
              "status",
              "title",
              "user"
            ]
          },
          "dominoStatsSortFieldName": { "type": "string", "nullable": true },
          "pageNo": { "type": "integer", "format": "int32" }
        },
        "required": ["pageSize", "sortBy", "orderBy", "pageNo"]
      },
      "domino.workspace.api.WorkspaceClusterConfigDto": {
        "properties": {
          "computeEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "computeEnvironmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "executorCount": { "type": "integer", "format": "int32" },
          "executorHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "volumeSize": {
            "nullable": true,
            "$ref": "#/components/schemas/Information"
          },
          "masterHardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          }
        },
        "required": [
          "computeEnvironmentId",
          "executorCount",
          "executorHardwareTierId",
          "masterHardwareTierId"
        ]
      },
      "domino.workspace.web.WorkspaceEvents": {
        "properties": {
          "changeEvent": {
            "$ref": "#/components/schemas/domino.workspace.api.RestartableWorkspaceChangeEvent"
          }
        },
        "required": ["changeEvent"]
      },
      "domino.projects.web.UpdateCommentInfo": {
        "properties": {
          "commentThreadId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commentBody": { "type": "string" }
        },
        "required": ["commentThreadId", "commentId", "commentBody"]
      },
      "domino.admin.interface.OnDemandSparkClusterOverview": {
        "properties": {
          "name": { "type": "string" },
          "workerStorageMB": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "masterHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "workerHardwareTier": {
            "$ref": "#/components/schemas/domino.admin.interface.HardwareTierOverview"
          },
          "webUiPath": { "type": "string" }
        },
        "required": [
          "name",
          "masterHardwareTier",
          "workerHardwareTier",
          "webUiPath"
        ]
      },
      "domino.nucleus.dataset.ui.CreateSnapshotWithWorkspaceInput": {
        "properties": {
          "datasetId": { "type": "string" },
          "outputPath": { "type": "string" },
          "workspaceDefinitionId": { "type": "string" },
          "title": { "type": "string", "nullable": true },
          "commitId": { "type": "string", "nullable": true },
          "hardwareTierId": { "type": "string", "nullable": true }
        },
        "required": ["datasetId", "outputPath", "workspaceDefinitionId"]
      },
      "domino.activity.api.CommentedOnJobMetaData": {
        "properties": {
          "jobId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "jobNumber": { "type": "integer", "format": "int32" },
          "title": { "type": "string" }
        },
        "required": ["jobId", "jobNumber", "title"]
      },
      "domino.server.projects.api.ProjectGatewayTag": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "isApproved": { "type": "boolean" }
        },
        "required": ["id", "name", "isApproved"]
      },
      "domino.gruz.api.ExecutorHostnameMapping": {
        "properties": { "targetIp": { "type": "string" } },
        "required": ["targetIp"]
      },
      "domino.datamount.web.UpdateDataMountStatusRequest": {
        "properties": {
          "datamountIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["datamountIds"]
      },
      "domino.projects.web.AddBlockedAtComment": {
        "properties": {
          "comment": { "type": "string" },
          "blockedAt": { "type": "integer", "format": "epoch" }
        },
        "required": ["comment", "blockedAt"]
      },
      "domino.jobs.interface.CodeInfoDto": {
        "properties": {
          "mainRepo": {
            "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoRepositoryDto"
          },
          "importedGitRepos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.jobs.interface.CodeInfoRepositoryDto"
            }
          }
        },
        "required": ["mainRepo", "importedGitRepos"]
      },
      "domino.jobs.interface.LogsWithProblemSuggestion": {
        "properties": {
          "logset": {
            "$ref": "#/components/schemas/domino.jobs.interface.LogSet"
          },
          "problemSuggestion": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.jobs.interface.JobProblemSuggestion"
          }
        },
        "required": ["logset"]
      },
      "domino.launcherjob.api.LauncherJobUploadedFile": {
        "properties": {
          "parameterName": { "type": "string" },
          "fileName": { "type": "string" },
          "tempFileBase64Encoding": { "type": "string" }
        },
        "required": ["parameterName", "fileName", "tempFileBase64Encoding"]
      },
      "domino.projectManagement.web.LinkFileToGoalRequest": {
        "properties": {
          "fileName": { "type": "string" },
          "commitId": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["fileName", "commitId", "projectId", "goalId"]
      },
      "domino.workspaces.api.HardwareTierDetails": {
        "properties": {
          "name": { "type": "string" },
          "id": { "type": "string" }
        },
        "required": ["name", "id"]
      },
      "domino.activity.api.CommentedOnMetaData": { "properties": {} },
      "domino.projectManagement.api.PmTicketStage": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "domino.nucleus.modelproduct.models.IsRunnable": {
        "properties": { "isRunnable": { "type": "boolean" } },
        "required": ["isRunnable"]
      },
      "domino.activity.api.ScheduleJobEditActivityMetaData": {
        "properties": {
          "action": {
            "type": "string",
            "enum": ["scheduled", "paused", "edited", "unpaused", "unscheduled"]
          },
          "fromTitle": { "type": "string", "nullable": true },
          "fromCommandToRun": { "type": "string" },
          "fromCronSchedule": { "type": "string" },
          "toTitle": { "type": "string", "nullable": true },
          "toCommandToRun": { "type": "string" },
          "toCronSchedule": { "type": "string" }
        },
        "required": [
          "action",
          "fromCommandToRun",
          "fromCronSchedule",
          "toCommandToRun",
          "toCronSchedule"
        ]
      },
      "domino.jobs.interface.StageTime": {
        "properties": {
          "submissionTime": { "type": "integer", "format": "epoch" },
          "runStartTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "completedTime": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          }
        },
        "required": ["submissionTime"]
      },
      "domino.common.user.Person": {
        "type": "object",
        "properties": {
          "firstName": { "description": "Person first name", "type": "string" },
          "lastName": { "description": "Person last name", "type": "string" },
          "phoneNumber": {
            "nullable": true,
            "description": "Person phone number",
            "type": "string"
          },
          "avatarUrl": {
            "description": "Url of the person's avatar",
            "type": "string"
          },
          "companyName": {
            "nullable": true,
            "description": "Person's company name",
            "type": "string"
          },
          "fullName": { "description": "Person full name", "type": "string" },
          "id": {
            "pattern": "^[0-9a-f]{24}$",
            "description": "Person user id",
            "type": "string"
          },
          "userName": { "description": "Person username", "type": "string" },
          "email": {
            "nullable": true,
            "description": "Person email",
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "fullName",
          "userName",
          "avatarUrl",
          "id"
        ]
      },
      "domino.common.executor.run.RunMemoryLimitDto": {
        "properties": {
          "memoryLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memorySwapLimitMegabytes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "domino.common.modelproduct.AppVersionOverview": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "started": { "type": "integer", "format": "epoch" },
          "duration": { "type": "integer", "format": "int32" },
          "publishingUserId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "publishingUsername": { "type": "string" },
          "status": { "type": "string" },
          "goalIds": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": [
          "id",
          "started",
          "duration",
          "publishingUserId",
          "publishingUsername",
          "status",
          "goalIds"
        ]
      },
      "domino.nucleus.user.Response": {
        "properties": { "message": { "type": "string" } },
        "required": ["message"]
      },
      "domino.common.user.TrialStatusDTO": {
        "properties": {
          "trialStatus": {
            "type": "string",
            "enum": ["Initial", "Extended", "Expired"]
          }
        },
        "required": ["trialStatus"]
      },
      "domino.workspaces.web.UpdateWorkspaceTitle": {
        "properties": { "title": { "type": "string" } },
        "required": ["title"]
      },
      "domino.workspaces.api.WorkspaceDefinitionDto": {
        "properties": {
          "id": { "type": "string" },
          "iconUrl": { "type": "string", "nullable": true },
          "name": { "type": "string" },
          "title": { "type": "string" }
        },
        "required": ["id", "name", "title"]
      },
      "domino.projects.api.repositories.CredentialMappingDTO": {
        "properties": {
          "userId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repoId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "credentialId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          }
        },
        "required": ["userId", "projectId", "repoId"]
      },
      "domino.projectManagement.web.UnlinkJobFromGoalRequest": {
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "goalId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["projectId", "goalId"]
      },
      "domino.server.controlcenter.HardwareTiersUtilizationDTO": {
        "description": "TODO describe",
        "type": "object",
        "properties": {
          "completedRunsCount": {
            "format": "int32",
            "description": "How many runs was executed in this hardware tier",
            "type": "integer"
          },
          "estimatedCostVariation": {
            "format": "double",
            "description": "How much the `estimatedCost` changed recently",
            "type": "number"
          },
          "averageQueueTimeInSeconds": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "estimatedCostPerHour": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "name": { "description": "TODO describe", "type": "string" },
          "costEfficiency": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "utilization": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "id": { "description": "TODO describe", "type": "string" },
          "estimatedCost": {
            "format": "double",
            "description": "TODO describe",
            "type": "number"
          },
          "utilizationVariation": {
            "format": "double",
            "description": "How much the `utilization` changed recently",
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "costEfficiency",
          "utilization",
          "utilizationVariation",
          "averageQueueTimeInSeconds",
          "estimatedCost",
          "estimatedCostVariation",
          "estimatedCostPerHour",
          "completedRunsCount"
        ]
      },
      "domino.hardwaretier.api.HardwareTierDto": {
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "cores": { "type": "number", "format": "double" },
          "coresLimit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "memory": { "type": "number", "format": "double" },
          "allowSharedMemoryToExceedDefault": { "type": "boolean" },
          "clusterType": {
            "type": "string",
            "nullable": true,
            "enum": ["ClassicOnPremises", "ClassicAWS", "Kubernetes"]
          },
          "numberOfGpus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "gpuKey": { "type": "string" },
          "runMemoryLimit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.common.executor.run.RunMemoryLimitDto"
          },
          "isDefault": { "type": "boolean" },
          "centsPerMinute": { "type": "number", "format": "double" },
          "isFree": { "type": "boolean" },
          "isAllowedDuringTrial": { "type": "boolean" },
          "isVisible": { "type": "boolean" },
          "isGlobal": { "type": "boolean" },
          "isArchived": { "type": "boolean" },
          "creationTime": { "type": "string", "format": "date-time" },
          "updateTime": { "type": "string", "format": "date-time" },
          "nodePool": { "type": "string", "nullable": true },
          "maxSimultaneousExecutions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "overprovisioning": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierOverprovisioningDto"
          }
        },
        "required": [
          "id",
          "name",
          "cores",
          "memory",
          "allowSharedMemoryToExceedDefault",
          "gpuKey",
          "isDefault",
          "centsPerMinute",
          "isFree",
          "isAllowedDuringTrial",
          "isVisible",
          "isGlobal",
          "isArchived",
          "creationTime",
          "updateTime"
        ]
      },
      "domino.datamount.web.CreateDataMountRequest": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "volumeType": { "type": "string", "enum": ["Nfs", "Smb", "Efs"] },
          "pvcName": { "type": "string" },
          "pvId": { "type": "string" },
          "mountPath": { "type": "string" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "readOnly": { "type": "boolean" },
          "isPublic": { "type": "boolean" }
        },
        "required": [
          "name",
          "volumeType",
          "pvcName",
          "pvId",
          "mountPath",
          "users",
          "readOnly",
          "isPublic"
        ]
      },
      "domino.scheduledrun.api.CronScheduleDTO": {
        "properties": {
          "cronString": { "type": "string" },
          "isCustom": { "type": "boolean" },
          "humanReadableCronString": { "type": "string" }
        },
        "required": ["cronString", "isCustom", "humanReadableCronString"]
      },
      "domino.workspace.web.CreateWorkspaceRequest": {
        "properties": {
          "name": { "type": "string" },
          "environmentId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "environmentRevisionSpec": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "hardwareTierId": {
            "$ref": "#/components/schemas/domino.hardwaretier.api.HardwareTierIdentifier"
          },
          "datasetConfig": { "type": "string", "nullable": true },
          "tools": { "type": "array", "items": { "type": "string" } },
          "clusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceClusterConfigDto"
          },
          "computeClusterConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.ComputeClusterConfigDto"
          },
          "externalVolumeMounts": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          },
          "startingCommit": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceCommitDto"
          }
        },
        "required": [
          "name",
          "environmentId",
          "hardwareTierId",
          "tools",
          "externalVolumeMounts"
        ]
      },
      "domino.projects.api.AssetPortfolioElement": {
        "properties": {
          "assetId": { "type": "string" },
          "assetName": { "type": "string" },
          "assetType": {
            "type": "string",
            "enum": ["App", "ModelAPI", "Launcher", "Schedules"]
          },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectName": { "type": "string" },
          "projectOwner": {
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "epoch",
            "nullable": true
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectStakeholder"
          },
          "versionHistory": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetVersionHistoryElement"
            }
          },
          "status": { "type": "string", "nullable": true },
          "usage": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.AssetUsageValues"
            }
          },
          "metadata": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.AssetViewStats"
          }
        },
        "required": [
          "assetId",
          "assetName",
          "assetType",
          "projectId",
          "projectName",
          "projectOwner"
        ]
      },
      "domino.hardwaretier.api.HardwareTierOverprovisioningDto": {
        "properties": {
          "instances": { "type": "integer", "format": "int32" },
          "schedulingEnabled": { "type": "boolean" },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          },
          "timezone": { "type": "string" },
          "fromTime": { "type": "string" },
          "toTime": { "type": "string" }
        },
        "required": [
          "instances",
          "schedulingEnabled",
          "daysOfWeek",
          "timezone",
          "fromTime",
          "toTime"
        ]
      },
      "domino.scheduledrun.api.EditCronScheduleDTO": {
        "properties": {
          "cronString": { "type": "string" },
          "isCustom": { "type": "boolean" }
        },
        "required": ["cronString", "isCustom"]
      },
      "RunType": {
        "type": "string",
        "description": "What is the type of the run",
        "enum": [
          "App",
          "Batch",
          "Endpoint",
          "Launcher",
          "Scheduled",
          "SSHProxy",
          "Workspace",
          "Other"
        ]
      },
      "domino.admin.interface.ComputeNodeStatus": {
        "properties": {
          "conditionType": { "type": "string" },
          "conditionStatus": { "type": "string" },
          "reason": { "type": "string" },
          "message": { "type": "string" },
          "lastHeartbeatTime": { "type": "string", "format": "date-time" },
          "lastTransitionTime": { "type": "string", "format": "date-time" }
        },
        "required": [
          "conditionType",
          "conditionStatus",
          "reason",
          "message",
          "lastHeartbeatTime",
          "lastTransitionTime"
        ]
      },
      "domino.projectManagement.api.PmOAuth1aConfiguration": {
        "properties": {
          "applicationUrl": { "type": "string" },
          "applicationName": { "type": "string" },
          "applicationType": { "type": "string" },
          "createIncomingLink": { "type": "boolean" },
          "inComingConsumerKey": { "type": "string" },
          "inComingConsumerName": { "type": "string" },
          "publicKey": { "type": "string", "nullable": true }
        },
        "required": [
          "applicationUrl",
          "applicationName",
          "applicationType",
          "createIncomingLink",
          "inComingConsumerKey",
          "inComingConsumerName"
        ]
      },
      "domino.workspace.api.VolumeMountDto": {
        "properties": {
          "mountPath": { "type": "string" },
          "subPath": { "type": "string", "nullable": true },
          "readOnly": { "type": "boolean" }
        },
        "required": ["mountPath", "readOnly"]
      },
      "domino.workspace.api.git.ForcePushResolutionRequest": {
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.git.MergeConflictRepository"
            }
          }
        },
        "required": ["repositories"]
      },
      "domino.gitproviders.api.OwnerDTO": { "properties": {} },
      "domino.workspaces.api.Workspace": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "title": { "type": "string" },
          "definitionTitle": { "type": "string" },
          "stageTime": {
            "$ref": "#/components/schemas/domino.workspaces.api.StageTime"
          },
          "startedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceStartedBy"
          },
          "number": { "type": "integer", "format": "int32" },
          "isCompleted": { "type": "boolean" },
          "isArchived": { "type": "boolean" },
          "queuedWorkspaceHistoryDetails": {
            "$ref": "#/components/schemas/domino.workspaces.api.QueuedWorkspaceHistoryDetails"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceTag"
            }
          },
          "usage": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceResourceUsage"
          },
          "commentsCount": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "volumeRecoverabilityStatus": {
            "type": "string",
            "enum": [
              "Unauthorized",
              "VolumeUnavailable",
              "Recoverable",
              "NoActionNecessary"
            ]
          },
          "inputCommitId": { "type": "string" },
          "outputCommitId": { "type": "string", "nullable": true },
          "dominoStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DominoStats"
            }
          },
          "dependentRepositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentRepository"
            }
          },
          "dependentDatasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentDatasetMount"
            }
          },
          "dependentProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentProject"
            }
          },
          "autoSyncSettings": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspaces.api.WorkspaceAutoSync"
          },
          "isRestartable": { "type": "boolean" },
          "dependentExternalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspaces.api.DependentExternalVolumeMount"
            }
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "definitionTitle",
          "stageTime",
          "number",
          "isCompleted",
          "isArchived",
          "queuedWorkspaceHistoryDetails",
          "tags",
          "commentsCount",
          "status",
          "volumeRecoverabilityStatus",
          "inputCommitId",
          "dominoStats",
          "dependentRepositories",
          "dependentDatasetMounts",
          "dependentProjects",
          "isRestartable",
          "dependentExternalVolumeMounts"
        ]
      },
      "domino.server.projects.api.ProjectGatewayExecutingRunsByType": {
        "properties": {
          "runType": {
            "type": "string",
            "enum": [
              "Other",
              "SSHProxy",
              "Endpoint",
              "App",
              "Scheduled",
              "Launcher",
              "Batch",
              "Workspace"
            ]
          },
          "count": { "type": "integer", "format": "int32" }
        },
        "required": ["runType", "count"]
      },
      "domino.projectManagement.api.PmTicketSummary": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/domino.projectManagement.api.PmId"
          },
          "key": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": ["id", "key", "name"]
      },
      "domino.admin.interface.ComputeNodeCpuUtilization": {
        "properties": {
          "total": { "type": "number", "format": "double" },
          "requested": { "type": "number", "format": "double" },
          "available": { "type": "number", "format": "double" }
        },
        "required": ["total", "requested", "available"]
      },
      "domino.nucleus.project.ProjectSettingsDto": {
        "properties": {
          "defaultEnvironmentId": {
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "defaultEnvironmentRevisionSpec": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["ActiveRevision", "LatestRevision"]
              },
              {
                "type": "object",
                "required": ["revisionId"],
                "properties": { "revisionId": { "type": "string" } }
              }
            ]
          },
          "defaultHardwareTierId": { "type": "string" },
          "sparkClusterMode": {
            "type": "string",
            "enum": ["Local", "Standalone", "Yarn", "OnDemand"]
          },
          "defaultVolumeSizeGiB": { "type": "number", "format": "double" },
          "maxVolumeSizeGiB": { "type": "number", "format": "double" },
          "minVolumeSizeGiB": { "type": "number", "format": "double" }
        },
        "required": [
          "defaultEnvironmentId",
          "defaultEnvironmentRevisionSpec",
          "defaultHardwareTierId",
          "sparkClusterMode",
          "defaultVolumeSizeGiB",
          "maxVolumeSizeGiB",
          "minVolumeSizeGiB"
        ]
      },
      "domino.files.interface.FileMatchesDto": {
        "properties": {
          "projectId": { "type": "string" },
          "commitId": { "type": "string" },
          "files": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["projectId", "commitId", "files"]
      },
      "domino.workspace.api.WorkspaceAdminPageDataDto": {
        "properties": {
          "offset": { "type": "integer", "format": "int32" },
          "limit": { "type": "integer", "format": "int32" },
          "totalEntries": { "type": "integer", "format": "int32" },
          "tableRows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceAdminPageTableRow"
            }
          }
        },
        "required": ["offset", "limit", "totalEntries", "tableRows"]
      },
      "domino.credential.web.UpdateCredentialRequest": {
        "properties": {
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.FullCredentialDto"
          }
        },
        "required": ["credential"]
      },
      "domino.workspace.api.WorkspaceSessionDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "executionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "config": {
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceConfigDto"
          },
          "datasetConfig": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDatasetConfigDto"
          },
          "datasetMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.WorkspaceDatasetMountDto"
            }
          },
          "externalVolumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.workspace.api.DataMountSpecificationDto"
            }
          },
          "queuedWorkspaceHistoryDetails": {
            "$ref": "#/components/schemas/domino.workspace.api.QueuedWorkspaceHistoryDetails"
          },
          "start": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStartDto"
          },
          "end": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionEndDto"
          },
          "sessionStatusInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.workspace.api.WorkspaceSessionStatusInfo"
          }
        },
        "required": [
          "id",
          "executionId",
          "config",
          "datasetMounts",
          "externalVolumeMounts",
          "queuedWorkspaceHistoryDetails"
        ]
      },
      "domino.environments.api.EnvironmentRevisionSummary": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "revisionId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "revisionNumber": { "type": "integer", "format": "int32" }
        },
        "required": ["id", "name", "revisionId", "revisionNumber"]
      },
      "domino.datasetrw.api.DatasetRwProjectMountDto": {
        "properties": {
          "datasetId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "snapshotId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "ownerProjectId": {
            "nullable": true,
            "type": "string",
            "pattern": "^[0-9a-f]{24}$"
          },
          "ownerProjectOwnerUsername": { "type": "string" },
          "ownerProjectName": { "type": "string" },
          "storageSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "isPartialSize": { "type": "boolean" },
          "availableVersions": { "type": "integer", "format": "int32" },
          "mountPathsForProject": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "datasetId",
          "snapshotId",
          "name",
          "ownerProjectOwnerUsername",
          "ownerProjectName",
          "isPartialSize",
          "availableVersions",
          "mountPathsForProject"
        ]
      },
      "domino.dataset.api.ConsumedSnapshotDto": {
        "properties": {
          "consumerType": {
            "type": "object",
            "properties": {
              "entryName": { "type": "string", "enum": ["user", "run"] }
            }
          },
          "consumerId": { "type": "string" },
          "datasetId": { "type": "string" },
          "datasetName": { "type": "string" },
          "snapshotId": { "type": "string" },
          "snapshotVersion": { "type": "integer", "format": "int32" },
          "timestamp": { "type": "integer", "format": "epoch" }
        },
        "required": [
          "consumerType",
          "consumerId",
          "datasetId",
          "datasetName",
          "snapshotId",
          "snapshotVersion",
          "timestamp"
        ]
      },
      "domino.credential.api.FullDataSourceCredentialDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "dataSourceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "credential": {
            "$ref": "#/components/schemas/domino.credential.api.FullCredentialDto"
          },
          "owner": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "users": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
          }
        },
        "required": ["id", "dataSourceId", "credential", "owner", "users"]
      },
      "domino.nucleus.project.models.NewProject": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "visibility": {
            "type": "string",
            "enum": ["Public", "Searchable", "Private"]
          },
          "ownerId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "repoToCreate": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.repositories.requests.CreateRepoRequest"
          },
          "mainRepository": {
            "nullable": true,
            "$ref": "#/components/schemas/domino.projects.api.ProjectGitRepositoryTemp"
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.projects.api.CollaboratorDTO"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/domino.projects.api.NewTagsDTO"
          }
        },
        "required": [
          "name",
          "description",
          "visibility",
          "ownerId",
          "collaborators",
          "tags"
        ]
      },
      "domino.gruz.api.PreparedRepository": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "uriHost": { "type": "string" },
          "uriPort": { "type": "string", "nullable": true },
          "uriPath": { "type": "string" },
          "serviceProvider": { "type": "string" },
          "ref": { "type": "string" },
          "startingRef": { "type": "string", "nullable": true },
          "finishedRef": { "type": "string", "nullable": true },
          "startingBranch": { "type": "string", "nullable": true },
          "finishedBranch": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "name",
          "uriHost",
          "uriPath",
          "serviceProvider",
          "ref"
        ]
      },
      "domino.workspaces.api.RepositoryChanges": {
        "properties": {
          "created": { "type": "array", "items": { "type": "string" } },
          "modified": { "type": "array", "items": { "type": "string" } },
          "deleted": { "type": "array", "items": { "type": "string" } },
          "staged": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["created", "modified", "deleted", "staged"]
      },
      "domino.api.ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "description": "Error message" }
        }
      },
      "domino.workspaces.web.StopEndWorkspaceDetails": {
        "properties": {
          "workspaceId": { "type": "string", "pattern": "^[0-9a-f]{24}$" }
        },
        "required": ["workspaceId"]
      },
      "domino.files.web.FullDeleteSpecification": {
        "properties": {
          "filePath": { "type": "string" },
          "projectId": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "commitId": { "type": "string" },
          "deleteReason": { "type": "string" }
        },
        "required": ["filePath", "projectId", "commitId", "deleteReason"]
      },
      "domino.common.modelproduct.AppResourceUsage": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.common.modelproduct.AppResourceUsageSnapshot"
            }
          }
        },
        "required": ["data"]
      },
      "domino.activity.api.ProjectGoalUpdateDescriptionActivityMetadata": {
        "properties": {
          "fromDescription": { "type": "string", "nullable": true },
          "toDescription": { "type": "string", "nullable": true },
          "projectGoalTitle": { "type": "string" }
        },
        "required": ["projectGoalTitle"]
      },
      "domino.provenance.api.ProvenanceGitRepoDto": {
        "properties": {
          "id": { "type": "string", "pattern": "^[0-9a-f]{24}$" },
          "name": { "type": "string" },
          "commitId": { "type": "string" },
          "branchName": { "type": "string" }
        },
        "required": ["id", "name", "commitId", "branchName"]
      },
      "domino.nucleus.modelproduct.models.UsageStatisticsTimeseriesResponse": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/domino.nucleus.modelproduct.models.UsageStatisticsTimeseries"
            }
          }
        },
        "required": ["data"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The server could not understand the request due to malformed syntax",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "The server could not find the requested resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The current user cannot perform this operation because they are not logged in",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "The current user is not authorized to perform this operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "Timeout": {
        "description": "Server operation timed out",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      },
      "ProjectManagementErrorResponse": {
        "description": "The current operation failed due to external service failure",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.projectManagement.web.ErrorResponse"
            }
          }
        }
      },
      "Relogin": {
        "description": "User needs to re-login even if they are logged in and come back",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "redirectPath": { "type": "string" } }
            }
          }
        }
      },
      "InternalError": {
        "description": "An internal error prevented the server from performing this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/domino.api.ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "DominoApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Domino-Api-Key"
      },
      "BearerAuthentication": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "servers": [{ "url": "https://laurel3702.quality-team-sandbox.domino.tech/v4" }]
}
